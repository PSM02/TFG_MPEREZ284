{
  "wcag:1.2.1": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to make information conveyed by prerecorded\n                  audio-only and prerecorded video-only content available to all users. Alternatives\n                  for time-based media that are text based make information accessible because text\n                  can be rendered through any sensory modality (for example, visual, auditory or tactile)\n                  to match the needs of the user. In the future, text could also be translated into\n                  symbols, sign language or simpler forms of the language (future).\n                  \n               \nAn example of pre-recorded video with no audio information or user interaction is\n                  a silent movie. The purpose of the transcript is to provide an equivalent to what\n                  is presented visually. For prerecorded video content, authors have the option to provide\n                  an audio track. The purpose of the audio alternative is to be an equivalent to the\n                  video. This makes it possible for users with and without vision impairment to review\n                  content simultaneously. The approach can also make it easier for those with cognitive,\n                  language and learning disabilities to understand the content because it would provide\n                  parallel presentation.\n                  \n               \n\nNote\n\nA text equivalent is not required for audio that is provided as an equivalent for\n                        video with no audio information.  For example, it is not required to caption audio\n                        description that is provided as an alternative to a silent movie.\n                        \n                     \n\n\nSee also \n                  1.2.4: Audio-only (Live)\n\n",
      "examples": "\nExamples\n\nAn audio recording of a speech\nThe link to an audio clip says, \"Chairman's speech to the assembly.\" A link to a text\n                     transcript is provided immediately after the link to the audio clip.\n                  \nAn audio recording of a press conference\nA Web page includes a link to an audio recording of a press conference that identifies\n                     the audio recording. The page also links to a text transcript of the press conference.\n                     The transcript includes a verbatim record of everything the speakers say. It identifies\n                     who is speaking as well as noting other significant sounds that are part of the recording,\n                     such as applause, laughter, questions from the audience, and so on.\n                  \nAn animation that illustrates how a car engine works\nAn animation shows how a car engine works. There is no audio and the animation is\n                     part of a tutorial that describes how an engine works. Since the text of the tutorial\n                     already provides a full explanation, the media is an alternative for text and the\n                     text alternative includes only a brief description of the animation and refers to\n                     the tutorial text for more information.\n                  \nA video-only file with an audio track\nA silent movie includes an audio track which includes a description of the action\n                     in the video.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nAudio element content has text alternative\nVideo element auditory content has captions\nVideo element visual-only content has accessible alternative\n\n"
    }
  },
  "wcag:1.1.1": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to make information conveyed by non-text content\n                  accessible through the use of a text alternative.  Text alternatives are a primary\n                  way for making information accessible because they can be rendered through any sensory\n                  modality (for example, visual, auditory or tactile) to match the needs of the user.\n                  Providing text alternatives allows the information to be rendered in a variety of\n                  ways by a variety of user agents. For example, a person who cannot see a picture can\n                  have the text alternative read aloud using synthesized speech. A person who cannot\n                  hear an audio file can have the text alternative displayed so that he or she can read\n                  it. In the future, text alternatives will also allow information to be more easily\n                  translated into sign language or into a simpler form of the same language.\n                  \n               \n\n\n                     Note on CAPTCHA\n                     \n                     \n                  \n\n                     CAPTCHAs are a controversial topic in the accessibility community. As is described\n                     in the\n                     paper \n                     Inaccessibility of CAPTCHA, CAPTCHAs intrinsically push the edges of human abilities in an attempt to defeat\n                     automated processes. Every type of CAPTCHA will be unsolvable by users with certain\n                     disabilities. However, they are widely used, and the Web Content Accessibility Guidelines\n                     Working Group believes that if CAPTCHAs were forbidden outright, Web sites would choose\n                     not to conform to WCAG rather than abandon CAPTCHA. This would create barriers for\n                     a great many more users with disabilities. For this reason the Working Group has chosen\n                     to structure the requirement about CAPTCHA in a way that meets the needs of most people\n                     with disabilities, yet is also considered adoptable by sites. Requiring two different\n                     forms of CAPTCHA on a given site ensures that most people with disabilities will find\n                     a form they can use.\n                     \n                  \nBecause some users with disabilities will still not be able to access sites that meet\n                     the minimum requirements, the Working Group provides recommendations for additional\n                     steps. Organizations motivated to conform to WCAG should be aware of the importance\n                     of this topic and should go as far beyond the minimum requirements of the guidelines\n                     as possible. Additional recommended steps include:\n                     \n                  \n\nProviding more than two modalities of CAPTCHAs\nProviding access to a human customer service representative who can bypass CAPTCHA\nNot requiring CAPTCHAs for authorized users\n\n\n\nAdditional information\nNon-text content can take a number of forms, and this Success Criterion specifies\n                     how each is to be handled.\n                     \n                  \n\n\n                        For non-text content that is not covered by one of the other situations listed below,\n                        \n                     such as charts, diagrams, audio recordings, pictures, and animations, text alternatives\n                     can make the same information available in a form that can be rendered through any\n                     modality (for example, visual, auditory or tactile).  Short and long text alternatives\n                     can be used as needed to convey the information in the non-text content.  Note that\n                     \n                     \n                        prerecorded\n                        audio-only\n                         and \n                     \n                      prerecorded\n                        video-only\n                         files are covered here.  \n                     \n                        Live-audio-only\n                         and \n                     \n                        Live-video-only\n                         files are covered below (see 3rd paragraph following this one).  \n                     \n                  \n\n\n                        For non-text content that is a control or accepts user input\n                        , such as images used as submit buttons, image maps or complex animations, a name\n                     is provided to describe the purpose of the non-text content so that the person at\n                     least knows what the non-text content is and why it is there.\n                     \n                  \n\n\n                        Non-text content that is time-based media\n                        \n                     is made accessible through \n                     1.2: Time-Based Media.  However, it is important that users know what it is when they encounter it on a\n                     page so they can decide what action if any they want to take with it.  A text alternative\n                     that describes the time-based media and/or gives its title is therefore provided.\n                     \n                     \n                  \n\n\n                        For Live Audio-only and live video-only content\n                        , it can be much more difficult to provide text alternatives that provide equivalent\n                     information as live audio-only and live video-only content. For these types of non-text\n                     content, text alternatives provide a descriptive label.  \n                     \n                     \n                  \n\n\n                        Sometimes a test or exercise must be partially or completely presented in non-text\n                        format.\n                          Audio or visual information is provided that cannot be changed to text because the\n                     test or exercise must be conducted using that sense.  For example, a hearing test\n                     would be invalid if a text alternative were provided.  A visual skill development\n                     exercise would similarly make no sense in text form.  And a spelling test with text\n                     alternatives would not be very effective.  For these cases, text alternatives should\n                     be provided to describe the purpose of the non-text content; of course, the text alternatives\n                     would not provide the same information needed to pass the test. \n                     \n                  \n\n\n                        Sometimes content is primarily intended to create a specific sensory experience\n                         that words cannot fully capture. Examples include a symphony performance, works of\n                     visual art etc. For such content, text alternatives at least identify the non-text\n                     content with a descriptive label and where possible, additional descriptive text.\n                     If the reason for including the content in the page is known and can be described\n                     it is helpful to include that information. \n                     \n                  \n\nSometimes there are non-text exercises that are used to prove you are human. To avoid spam robots and other software from gaining access to a site a device called\n                     a CAPTCHA is used. These usually involve visual or auditory tasks that are beyond\n                     the current capabilities of Web robots. Providing a text alternative to them would\n                     however make them operable by Robots, thus defeating their purpose. In this case a\n                     text alternative would describe the purpose of the CAPTCHA, and alternate forms using\n                     different modalities would be provided to address the needs of people with different\n                     disabilities.\n                     \n                  \n\n\n                        Sometimes there is non-text content that really is not meant to be seen or understood\n                        by the user.\n                         Transparent images used to move text over on a page; an invisible image that is used\n                     to track usage statistics; and a swirl in the corner that conveys no information but\n                     just fills up a blank space to create an aesthetic effect are all examples of this.\n                     Putting alternative text on such items just distracts people using screen readers\n                     from the content on the page. Not marking the content in any way, though, leaves users\n                     guessing what the non-text content is and what information they may have missed (even\n                     though they have not missed anything in reality). This type of non-text content, therefore,\n                     is marked or implemented in a way that assistive technologies (AT) will ignore it\n                     and not present anything to the user.\n                     \n                  \n\n",
      "examples": "\nExamples\n\nA data chart\nA bar chart compares how many widgets were sold in June, July, and August. The short\n                     label says, \"Figure one - Sales in June, July and August.\" The longer description\n                     identifies the type of chart, provides a high-level summary of the data, trends and\n                     implications comparable to those available from the chart. Where possible and practical,\n                     the actual data is provided in a table.\n                  \nAn audio recording of a speech\nThe link to an audio clip says, \"Chairman's speech to the assembly.\" A link to a text\n                     transcript is provided immediately after the link to the audio clip.\n                  \nAn animation that illustrates how a car engine works\nAn animation shows how a car engine works. There is no audio and the animation is\n                     part of a tutorial that describes how an engine works. Since the text of the tutorial\n                     already provides a full explanation, the image is an alternative for text and the\n                     text alternative includes only a brief description of the animation and refers to\n                     the tutorial text for more information.\n                  \nA traffic Web camera\nA Web site allows users to select from a variety of Web cameras positioned throughout\n                     a major city. After a camera is selected, the image updates every two minutes. A short\n                     text alternative identifies the Web camera as \"traffic Web camera.\" The site also\n                     provides a table of travel times for each of the routes covered by the Web cameras.\n                     The table is also updated every two minutes.\n                  \nA photograph of an historic event in a news story\nA photograph of two world leaders shaking hands accompanies a news story about an\n                     international summit meeting. The text alternative says, \"President X of Country X\n                     shakes hands with Prime Minister Y of country Y.\"\n                  \nA photograph of a historic event in content discussing diplomatic relationships\nThe same image is used in a different context intended to explain nuances in diplomatic\n                     encounters. The image of the president shaking hands with the prime minister appears\n                     on a Web site discussing intricate diplomatic relationships. The first text alternative\n                     reads, \"President X of country X shakes hands with Prime Minister Y of country Y on\n                     January 2, 2009.\" An additional text alternative describes the room where the leaders\n                     are standing as well as the expressions on the leaders' faces, and identifies the\n                     other people in the room. The additional description might be included on the same\n                     page as the photograph or in a separate file associated with the image through a link\n                     or other standard programmatic mechanism.\n                  \nAn audio recording of a press conference \nA Web page includes a link to an audio recording of a press conference. The link text\n                     identifies the audio recording. The page also links to a text transcript of the press\n                     conference. The transcript includes a verbatim record of everything the speakers say.\n                     It identifies who is speaking as well as noting other significant sounds that are\n                     part of the recording, such as applause, laughter, questions from the audience, and\n                     so on.\n                  \nAn e-learning application\nAn e-learning application uses sound effects to indicate whether or not the answers\n                     are correct. The chime sound indicates that the answer is correct and the beep sound\n                     indicates that the answer is incorrect. A text description is also included so that\n                     people who can't hear or understand the sound understand whether the answer is correct\n                     or incorrect.\n                  \nA linked thumbnail image\nA thumbnail image of the front page of a newspaper links to the home page of the \"Smallville\n                     Times\". The text alternative says \"Smallville Times\".\n                  \nThe same image used on different sites\nDifferent alternatives for an image of the world: An image of the world that is used\n                     on a travel site as a link to the International Travel section has the text alternative\n                     \"International Travel\". The same image is used as a link on a university Web site\n                     with the text alternative \"International Campuses\".\n                  \nAn image map\nAn image of a building floor plan is interactive, allowing the user to select a\n                     particular room and navigate to a page containing information about that room.\n                     The short text alternative describes the image and its interactive purpose:\n                     \"Building floor plan. Select a room for more information.\"\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nImage accessible name is descriptive\nImage button has non-empty accessible name\nImage has non-empty accessible name\nLink has non-empty accessible name\nObject element rendering non-text content has non-empty accessible name\nSVG element with explicit role has non-empty accessible name\nImage filename is accessible name for image\nImage not in the accessibility tree is decorative\n\n"
    }
  },
  "wcag:1.2.2": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to enable people who are deaf or hard of hearing\n                  to watch synchronized media presentations. Captions provide the part of the content\n                  available via the audio track. Captions not only include dialogue, but identify who\n                  is speaking and include non-speech information conveyed through sound, including meaningful\n                  sound effects. \n                  \n               \nIt is acknowledged that at the present time there may be difficulty in creating captions\n                  for time-sensitive material and this may result in the author being faced with the\n                  choice of delaying the information until captions are available, or publishing time-sensitive\n                  content that is inaccessible to the deaf, at least for the interval until captions\n                  are available. Over time, the tools for captioning as well as building the captioning\n                  into the delivery process can shorten or eliminate such delays.\n                  \n                  \n               \nCaptions are not needed when the synchronized media is, itself, an alternate presentation\n                  of information that is also presented via text on the Web page. For example, if information\n                  on a page is accompanied by a synchronized media presentation that presents no more\n                  information than is already presented in text, but is easier for people with cognitive,\n                  language, or learning disabilities to understand, then it would not need to be captioned\n                  since the information is already presented on the page in text or in text alternatives\n                  (e.g., for images). \n                  \n                  \n               \nSee also \n                  1.2.4: Captions (Live).\n                  \n               \n",
      "examples": "\nExamples\n\n\nA captioned tutorial\nA video clip shows how to tie a knot. The captions read, \n\"(music) \nUsing rope to tie knots was an important skill\nfor the likes of sailors, soldiers and woodsmen..\" \nFrom Sample Transcript Formatting by Whit Anderson.\n\nA complex legal document contains synchronized media clips for different paragraphs\n                     that show a person speaking the contents of the paragraph. Each clip is associated\n                     with its corresponding paragraph. No captions are provided for the synchronized media.\n                  \nAn instruction manual containing a description of a part and its necessary orientation\n                     is accompanied by a synchronized media clip showing the part in its correct orientation.\n                     No captions are provided for the synchronized media clip.\n                  \n\nAn orchestra provides captions for videos of performances. In addition to capturing\n                        dialog and lyrics verbatim, captions identify non-vocal music by title, movement,\n                        composer, and any information that will help the user comprehend the nature of the\n                        audio. For instance captions read,\n                     \n\"[Orchestral Suite No. 3.2 in D major, BWV 1068, Air]\n[Johann Sebastian Bach, Composer] \n♪ Calm melody with a slow tempo ♪\"\n\nNote\n\nStyle guides for captions may differ among different languages.\n\n\n\n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nVideo element auditory content has accessible alternative\n\n"
    }
  },
  "wcag:1.2.3": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to provide people who are blind or visually\n                  impaired access to the visual information in a synchronized media presentation. This\n                  Success Criterion describes two approaches, either of which can be used.\n                  \n               \nOne approach is to provide audio description of the video content. The audio description\n                  augments the audio portion of the presentation with the information needed when the\n                  video portion is not available. During existing pauses in dialogue, audio description\n                  provides information about actions, characters, scene changes, and on-screen text\n                  that  are important and are not described or spoken in the main sound track.\n                  \n               \nThe second approach involves providing all of the information in the synchronized\n                  media (both visual and auditory) in text form. An alternative for time-based media\n                  provides a running description of all that is going on in the synchronized media content.\n                  The alternative for time-based media reads something like a screenplay or book. Unlike\n                  audio description, the description of the video portion is not constrained to just\n                  the pauses in the existing dialogue. Full descriptions are provided of all visual\n                  information, including visual context, actions and expressions of actors, and any\n                  other visual material. In addition, non-speech sounds (laughter, off-screen voices,\n                  etc.) are described, and transcripts of all dialogue are included. The sequence of\n                  description and dialogue transcripts are the same as the sequence in the synchronized\n                  media itself. As a result, the alternative for time-based media can provide a much\n                  more complete representation of the synchronized media content than audio description\n                  alone.\n                  \n               \nIf there is any interaction as part of the synchronized media presentation (e.g.,\n                  \"press now to answer the question\") then the alternative for time-based media would\n                  provide hyperlinks or whatever is needed to provide the same functionality.\n                  \n               \n\nNote\n\n\n                        For 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already\n                        provided in the audio track, no audio description is necessary. \n                        \n                        \n                        \n                     \n\n                        1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author\n                        some choice at the minimum conformance level, and to provide additional requirements\n                        at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice\n                        of providing either an audio description or a full text alternative. If they wish\n                        to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio\n                        description - a requirement already met if they chose that alternative for 1.2.3,\n                        otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they\n                        must provide an extended text description. This is an additional requirement if both\n                        1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met,\n                        however, by providing a text description, and the 1.2.5 requirement for an audio description\n                        was met, then 1.2.8 does not add new requirements.\n                        \n                     \n\n\nSee also\n                  1.2.5 Audio Description (Prerecorded),\n                  1.2.7 Extended Audio Description (Prerecorded) and\n                  1.2.8 Media Alternative (Prerecorded).\n                  \n               \n",
      "examples": "\nExamples\n\nA movie with audio description\n\n\nDescriber: A title, \"Teaching Evolution Case Studies. Bonnie Chen.\" A teacher shows photographs\n                        of birds with long, thin beaks.\n                        \n                     \n\nBonnie Chen: \"These photos were all taken at the Everglades.\"\n                        \n                     \n\nDescriber: The teacher hands each student two flat, thin wooden sticks.\n                        \n                     \n\nBonnie Chen: \"Today you will pretend to be a species of wading bird that has a beak like this.\"\n                        \n                     \n\nDescriber: The teacher holds two of the sticks to her mouth making the shape of a beak.\n                        \n                     \nTranscript of audio based on the first few minutes of \"Teaching Evolution Case Studies, Bonnie Chen\" (copyright WGBH and Clear Blue Sky Productions, Inc.)\n                     \n\nAn alternative for time-based media for a training video\nA company purchases a Training video for use by its employees and puts it on the companies\n                     intranet. The video involves explaining use of a new technology and has a person talking\n                     and showing things at the same time. Since there is no place to insert audio description\n                     of the visual demonstrations during gaps in dialogue, the company provides an alternative\n                     for time-based media that all employees, including those who cannot see the demonstrations,\n                     can use to better understand what is being presented.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nVideo element visual content has accessible alternative\n\n"
    }
  },
  "wcag:1.2.4": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to enable people who are deaf or hard of hearing\n                  to watch \n                  real-time presentations. Captions provide the part of the content available via the audio track.\n                  Captions not only include dialogue, but also identify who is speaking and notate sound\n                  effects and other significant audio.\n                  \n               \nThis success criterion was intended to apply to broadcast of synchronized media and\n                  is not intended to require that two-way multimedia calls between two or more individuals\n                  through web apps must be captioned regardless of the needs of users. Responsibility\n                  for providing captions would fall to the content providers (the callers) or the “host”\n                  caller, and not the application.\n                  \n               \n",
      "examples": "\nExamples\n\nA Web cast\nA news organization provides a live, captioned Web cast. \nA music Web cast\nAn orchestra provides Communication Access Realtime Translation (CART) captioning\n                     of each real-time Web performance. The CART service captures lyrics and dialog as\n                     well as identifies non-vocal music by title, movement, composer, and any information\n                     that will help the user comprehend the nature of the audio.\n                  \n\n"
    }
  },
  "wcag:1.2.5": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to provide people who are blind or visually\n                  impaired access to the visual information in a synchronized media presentation. The\n                  audio description augments the audio portion of the presentation with the information\n                  needed when the video portion is not available. During existing pauses in dialogue,\n                  audio description provides information about actions, characters, scene changes, and\n                  on-screen text that are important and are not described or spoken in the main sound\n                  track.\n                  \n               \n\nNote\n\n\n                        For 1.2.3, 1.2.5, and 1.2.7, if all of the information in the video track is already\n                        provided in the audio track, no audio description is necessary. \n                        \n                        \n                        \n                     \n\n                        1.2.3, 1.2.5, and 1.2.8 overlap somewhat with each other. This is to give the author\n                        some choice at the minimum conformance level, and to provide additional requirements\n                        at higher levels. At Level A in Success Criterion 1.2.3, authors do have the choice\n                        of providing either an audio description or a full text alternative. If they wish\n                        to conform at Level AA, under Success Criterion 1.2.5 authors must provide an audio\n                        description - a requirement already met if they chose that alternative for 1.2.3,\n                        otherwise an additional requirement. At Level AAA under Success Criterion 1.2.8 they\n                        must provide an extended text description. This is an additional requirement if both\n                        1.2.3 and 1.2.5 were met by providing an audio description only. If 1.2.3 was met,\n                        however, by providing a text description, and the 1.2.5 requirement for an audio description\n                        was met, then 1.2.8 does not add new requirements.\n                        \n                     \n\n\n",
      "examples": "\nExamples\n\nA movie with audio description\n\n\nDescriber: A title, \"Teaching Evolution Case Studies. Bonnie Chen.\" A teacher shows photographs\n                        of birds with long, thin beaks.\n                        \n                     \n\nBonnie Chen: \"These photos were all taken at the Everglades.\"\n                        \n                     \n\nDescriber: The teacher hands each student two flat, thin wooden sticks.\n                        \n                     \n\nBonnie Chen: \"Today you will pretend to be a species of wading bird that has a beak like this.\"\n                        \n                     \n\nDescriber: The teacher holds two of the sticks to her mouth making the shape of a beak.\n                        \n                     \nTranscript of audio based on the first few minutes of \"Teaching Evolution Case Studies, Bonnie Chen\" (copyright WGBH and Clear Blue Sky Productions, Inc.)\n                     \n\n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nVideo element visual content has accessible alternative\nVideo element visual content has strict accessible alternative\n\n"
    }
  },
  "wcag:1.3.1": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that information and relationships\n                  that are implied by visual or auditory formatting are preserved when the presentation\n                  format changes. For example, the presentation format changes when the content is read\n                  by a screen reader or when a user style sheet is substituted for the style sheet provided\n                  by the author.\n                  \n               \n\n                  \t\t\t\t\t\tSighted users perceive structure and relationships through various visual cues\n                  — headings are often in a larger, bold font separated from paragraphs by blank lines;\n                  list items are preceded by a bullet and perhaps indented; paragraphs are separated\n                  by a blank line; items that share a common characteristic are organized into tabular\n                  rows and columns; form fields may be positioned as groups that share text labels;\n                  a different background color may be used to indicate that several items are related\n                  to each other; words that have special status are indicated by changing the font family\n                  and /or bolding, italicizing, or underlining them; items that share a common characteristic\n                  are organized into a table where the relationship of cells sharing the same row or\n                  column and the relationship of each cell to its row and/or column header are necessary\n                  for understanding; and so on. Having these structures and these relationships programmatically\n                  determined or available in text ensures that information important for comprehension\n                  will be perceivable to all.\n                  \n                  \n               \nAuditory cues may be used as well. For example, a chime might indicate the beginning\n                  of a new section; a change in voice pitch or speech rate may be used to emphasize\n                  important information or to indicate quoted text; etc.\n                  \n               \n\n                  When such relationships are perceivable to one set of users, those relationships can\n                  be made to be perceivable to all. One method of determining whether or not information\n                  has been properly provided to all users is to access the information serially in different\n                  modalities.\n                  \n                  \n               \nIf links to glossary items are implemented using anchor elements (or the proper link\n                  element for the technology in use) and identified using a different font face, a screen\n                  reader user will hear that the item is a link when the glossary term is encountered\n                  even though they may not receive information about the change in font face. An on-line\n                  catalog may indicate prices using a larger font colored red. A screen reader or person\n                  who cannot perceive red, still has the information about the price as long as it is\n                  preceded by the currency symbol.\n                  \n               \nSome technologies do not provide a means to programmatically determine some types\n                  of information and relationships. In that case then there should be a text description\n                  of the information and relationships. For instance, \"all required fields are marked\n                  with an asterisk (*)\". The text description should be near the information it is describing\n                  (when the page is linearized), such as in the parent element or in the adjacent element.\n                  \n               \nThere may also be cases where it may be a judgment call as to whether the relationships\n                  should be programmatically determined or be presented in text. However, when technologies\n                  support programmatic relationships, it is strongly encouraged that information and\n                  relationships be programmatically determined rather than described in text.\n                  \n               \n\nNote\n\nIt is not required that color values be programmatically determined. The information\n                        conveyed by color cannot be adequately presented simply by exposing the value. Therefore,\n                        \n                        Success Criterion 1.4.1\n                           \n                            addresses the specific case of color, rather than Success Criterion 1.3.1.\n                        \n                        \n                     \n\n\n",
      "examples": "\nExamples\n\nA form with required fields\nA form contains several required fields. The labels for the required fields are displayed\n                     in red. In addition, at the end of each label is an asterisk character, *. The instructions\n                     for completing the form indicate that \"all required fields are displayed in red and\n                     marked with an asterisk *\", followed by an example.\n                  \nA form that uses color and text to indicate required fields\nA form contains both required and optional fields. Instructions at the top of the\n                     form explain that required fields are labeled with red text and also with an icon\n                     whose text alternative says, \"Required.\" Both the red text and the icon are programmatically\n                     associated with the appropriate form fields so that assistive technology users can\n                     determine the required fields.\n                  \nA bus schedule table where the headers for each cell can be programmatically determined\nA bus schedule consists of a table with the bus stops listed vertically in the first\n                     column and the different buses listed horizontally across the first row. Each cell\n                     contains the time when the bus will be at that bus stop. The bus stop and bus cells\n                     are identified as headers for their corresponding row or column so that assistive\n                     technology can programmatically determine which bus and which bus stop are associated\n                     with the time in each cell.\n                  \nA form where the labels for the checkboxes can be programmatically determined\nIn a form, the labels for each checkbox can be programmatically determined by assistive\n                     technology.\n                  \nA text document\nA simple text document is formatted with double blank lines before titles, asterisks\n                     to indicate list items and other standard formatting conventions so that its structure\n                     can be programmatically determined.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nARIA attribute is defined in WAI-ARIA\nARIA state or property has valid value\nHeaders attribute specified on a cell refers to cells in the same table element\nRole attribute has valid value\nARIA required context role\nARIA required ID references exist\nARIA required owned elements\nARIA state or property is permitted\nElement with role attribute has required states and properties\nTable header cell has assigned cells\n\n"
    }
  },
  "wcag:1.3.2": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to enable a user agent to provide an alternative\n                  presentation of content while preserving the reading order needed to understand the\n                  meaning. It is important that it be possible to programmatically determine at least\n                  one sequence of the content that makes sense. Content that does not meet this Success\n                  Criterion may confuse or disorient users when assistive technology reads the content\n                  in the wrong order, or when alternate style sheets or other formatting changes are\n                  applied.\n                  \n                  \n               \nA sequence is \n                  meaningful if the order of content in the sequence cannot be changed without affecting its meaning.\n                  \n                  For example, if a page contains two independent articles, the relative order of the\n                  articles may not affect their meaning, as long as they are not interleaved. In such\n                  a situation, the articles themselves may have meaningful sequence, but the container\n                  that contains the articles may not have a meaningful sequence.\n                  \n               \nThe semantics of some elements define whether or not their content is a meaningful\n                  sequence. For instance, in HTML, text is always a meaningful sequence. Tables and\n                  ordered lists are meaningful sequences, but unordered lists are not.\n                  \n               \nThe order of content in a sequence is not always meaningful. For example, the relative\n                  order of the main section of a Web page and a navigation section does not affect their\n                  meaning. They could occur in either order in the programmatically determined reading\n                  sequence. As another example, a magazine article contains several callout sidebars.\n                  The order of the article and the sidebars does not affect their meaning. In these\n                  cases there are a number of different reading orders for a Web page that can satisfy\n                  the Success Criterion. \n                  \n                  \n               \nFor clarity:\n\nProviding a particular linear order is only required where it affects meaning.\nThere may be more than one order that is \"correct\" (according to the WCAG 2.0 definition).\nOnly one correct order needs to be provided.\n\n",
      "examples": "\nExamples\n\n\nExample 1: In a multi-column document, the linear presentation of the content flows from the\n                     top of a column to the bottom of the column, then to the top of the next column.\n                     \n                  \n\nExample 2: CSS is used to position a navigation bar, the main story on a page, and a side story.\n                     The visual presentation of the sections does not match the programmatically determined\n                     order, but the meaning of the page does not depend on the order of the sections.\n                     \n                  \n\n"
    }
  },
  "wcag:1.3.3": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that all users can access instructions\n                  for using the content, even when they cannot perceive shape or size or use information\n                  about spatial location or orientation. \n                  Some content relies on knowledge of the shape or position of objects that are not\n                  available from the structure of the content (for example, \"round button\" or \"button\n                  to the right\"). \n                  Some users with disabilities are not able to perceive shape or position due to the\n                  nature of the assistive technologies they use. \n                  This Success Criterion requires that additional information be provided to clarify\n                  instructions that are dependent on this kind of information.         \n                  \n               \nProviding information using shape and/or location, however, is an effective method\n                  for many users including those with cognitive limitations.\n                  This provision should not discourage those types of cues as long as the information\n                  is also provided in other ways.\n                  \n               \nIn some languages, it is commonly understood that \"above\" refers to the content previous\n                  to that point in the content and \"below\" refers to the content after that point. In\n                  such languages, if the content being referenced is in the appropriate place in the\n                  reading order and the references are unambiguous, statements such as \"choose one of\n                  the links below\" or \"all of the above\" would conform to this Success Criterion. \n                  \n               \nWCAG was designed to apply only to controls that were displayed on a web page. The\n                  intent was to avoid describing controls solely via references to visual or auditory\n                  cues. When applying this to instructions for operating physical hardware controls\n                  (e.g. a web kiosk with dedicated content), tactile cues on the hardware might be described\n                  (e.g. the arrow shaped key, the round key on the right side). This success criterion\n                  is not intended to prevent the use of tactile cues in instructions.\n                  \n               \n",
      "examples": "\nExamples\n\nExample 1: Instructions for interpreting a schedule of competitive events references\n                     colored icons in different shapes to indicate the venue for each event\n                  \nA table presents a list of times across the top row and a list of events in the first\n                     vertical column and instructions are provided under the table: \"Events marked with\n                     a\n                     blue diamond are played on field A and events marked with a green circle are played\n                     on field B.\" The instructions rely on color and shape only and result in a failure\n                     of\n                     this criterion.\n                  \nExample 2: An online multi-page survey\nAn online multi-page survey uses a link implemented as a green arrow icon placed\n                     in the lower right hand corner of the content to move from one survey page to the\n                     next. The arrow is clearly labeled with \"Next\" and the instructions state, \"To move\n                     to the next section of the survey, select the green arrow icon labeled 'Next' in the\n                     lower right corner below the last survey question.\" \n                     The instruction uses positioning and color to help identify the icon; \n                     the instruction does not rely on these sensory characteristics since it also refers\n                     to\n                     the label, so it passes this criterion.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nContent has alternative for visual reference\n\n"
    }
  },
  "wcag:1.3.4": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that content displays in the orientation\n                  (portrait or landscape) preferred by the user. Some websites and applications automatically\n                  set and restrict the screen to a particular display orientation and expect\n                  \t\t\tthat users will respond by rotating their device to match, but this can create\n                  problems. Some users have their devices mounted\n                  \t\t\tin a fixed orientation (e.g. on the arm of a power wheelchair). Therefore, websites\n                  and applications need to support both orientations\n                  \t\t\tby not restricting the orientation. Changes in content or functionality due to\n                  the size of display are not covered by this criterion which is focused on restrictions\n                  of orientation.\n               \nHistorically, devices tended to have a fixed-orientation display, and all content\n                  was created to match that display orientation. Today, most handhelds and many other\n                  devices (e.g., monitors) have a hardware-level ability to dynamically adjust default\n                  display orientation based on sensor information. The goal of this Success Criterion\n                  is that authors should never restrict content's orientation, thus ensuring that it\n                  always match the device display orientation.\n               \nIt is important to distinguish between an author's responsibility not to restrict\n                  content to a specific orientation, and device-specific settings governing the locking\n                  of display orientation.\n               \nMany hand-held devices offer a mechanical switch or a system setting (or both) to\n                  allow the user to lock the device display to a specific orientation. Where a user\n                  decides to lock their entire device to an orientation, all applications are expected\n                  to pick up that setting and to display content accordingly.\n               \nThis Success Criterion complements device \"lock orientation\" settings. A web page\n                  that does not restrict its display orientation will always support the system-level\n                  orientation setting, since the system setting is picked up by the user agent. Alternatively,\n                  where a device-level orientation lock is not in place, the user agent should display\n                  the page according to the orientation of the device (either its default, or the current\n                  orientation determined by any device sensors).\n               \nThe exception for things considered essential is aimed at situations where the content\n                  would only be understood in a particular orientation, or where the technology restricts\n                  the possible orientations. If content is aimed at a specific environment which is\n                  only available in one orientation (such as a television) then the content can restrict\n                  the orientation. Technologies such as virtual reality use screens within goggles that\n                  cannot change orientation relative to the user's eyes.\n               \n",
      "examples": "\nExamples\n\nExample 1: Online video site\n                     \t\t\t\tA video is shown in either portrait or in landscape based on the user's chosen\n                     orientation.\n                  \nExample 2: Messaging website\n                     \t\t\t\tA messaging website can display messages in both portrait and landscape orientations.\n                     \n                  \nExample 3: eReader web app\n                     \t\t\t\tAn eReader web app can display the contents of a book in both portrait and landscape\n                     orientation.\n                  \nExample 4: Check deposit in banking app\n                     \t\t\t\tAn example where orientation is essential could be a banking app that requires\n                     the device be in landscape mode to easily and accurately capture an image of a check\n                     for deposit. These paper forms are typically about twice as wide as they are high.\n                  \nExample 5: Piano app\n                     \t\t\t\tAn example where orientation is essential could be a piano app that requires the\n                     device to be in landscape mode to allow room for enough of the piano keys to be functionally\n                     usable. Since a piano app is emulating a physical piano keyboard that needs to retain\n                     relative physical characteristics between keys, either too few keys would be available,\n                     or the keys would be much too narrow.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nOrientation of the page is not restricted using CSS transforms\n\n"
    }
  },
  "wcag:1.3.5": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that the purpose of a form input\n                  collecting information about the user can be programmatically determined, so that\n                  user agents can extract and present this purpose to users using different modalities.\n                  The ability to programmatically declare the specific kind of data expected in a particular\n                  field makes filling out forms easier, especially for people with certain cognitive\n                  disabilities.\n               \nAppropriate visible labels and instruction can help users understand the purpose of\n                  form input fields, but users may benefit from having fields that collect specific\n                  types of information be rendered in an unambiguous, consistent, and possibly customized\n                  way for different modalities - either through defaults in their user agent, or through\n                  the aid of assistive technologies.\n               \nFor some input fields, the type attribute already offers a way to broadly specify the intention of the input field,\n                  for example, <input type=\"tel\">, <input type=\"email\">, or <input type=\"password\">. However, these are only very broad categories, describing the type of input, but\n                  not necessarily its purpose, especially as it relates to user-specific input fields.\n                  As an example, type=\"email\" indicates that the field is for an e-mail address but does not clarify if the purpose\n                  is for entering the user's e-mail address or some other person's e-mail.\n               \nThis success criterion defines the types of user interface component input purposes,\n                  found in Section 7 of the WCAG 2.1 Recommendation, that must be programmatically identifiable. When these user input purposes are present,\n                  and if the technology supports doing so, the field purpose must be programmatically\n                  identifiable.\n               \nThe HTML autocomplete attribute only accepts a certain number of specific well-defined fixed values. This\n                  allows a more fine-grained definition or identification of purpose than the type attribute,\n                  for example, by allowing the author to specify a specific type of name: Name (autocomplete=\"name\"), Given Name (autocomplete=\"given-name\"), Family Name (autocomplete=\"family-name\"), as well as Username (autocomplete=\"username\"), and Nickname (autocomplete=\"nickname\").\n               \nBy adopting and repurposing this predefined taxonomy of definitions, user agents and\n                  assistive technologies can now present the purpose of the inputs to users in different\n                  modalities. For example, assistive technologies may display familiar icons next to\n                  input fields to help users who have difficulties reading. An icon of a birthday cake\n                  may be shown in front of an input field with autocomplete=\"bday\", or the icon of a telephone in front of an input field with autocomplete=\"tel\".\n               \nIn addition to repurposing this taxonomy, when the autocomplete attribute technique\n                  is used to meet this Success Criterion, browsers and other user-agents can suggest\n                  and 'autofill' the right content by autocompleting these fields based on past user\n                  input stored in the browser. By defining more granular definitions of common input\n                  purposes, for example “Birthday” (autocomplete=\"bday\"), browsers can store personalized values for each of these fields (the user's birthday\n                  date). The user is relieved of having to type the information and can instead confirm\n                  or, if needed, change the value of the field, a significant benefit for users with\n                  memory issues, dyslexia, and other disabilities. Because the autocomplete values are independent of language, users that may not be familiar with the text\n                  used to visually identify user input fields (the label) can still have that purpose\n                  consistently identified to them due to the fixed taxonomy of terms.\n               \nIf an input field accepts two different types of input purpose (as in combined user\n                  name/user email fields) and the technology used does not allow multiple purpose values\n                  to be defined, it is valid to provide either one or the other value or leave out the\n                  designation of input purpose altogether.\n               \nWhen the user agent and assistive technology support for other metadata formats matures,\n                  metadata schemes like the WAI-Adapt: Symbols Module may be used in addition or instead of the HTML autocomplete attribute to identify\n                  the purpose of input fields. They can also support automated adaptations that identify\n                  and match author-provided input labels to defined vocabularies or symbols that are\n                  used instead for labelling inputs.\n               \n",
      "examples": "\nExamples\n\nA contact form using autofill\nA contact form auto-fills in the fields for name, street, post code, city, telephone\n                     number and email address from autofill values stored in the user's browser. Assistive\n                     technology can offer a customized way of identifying particular input fields, for\n                     example drawing on a set of symbols / icons that is familiar to the user, to communicate\n                     the purpose of the fields visually.\n                  \nAn order form with separate billing and shipping address\nA product order form fills in the address fields for billing address and a separate\n                     set of address fields for the shipping address, using the autofill detail tokens 'billing'\n                     and 'shipping'\n                  \nA contact form using icons\nA browser plugin to add icons inserts icons representing the person's name, home address,\n                     telephone number and email address to  identify the input purpose visually.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nAutocomplete attribute has valid value\n\n"
    }
  },
  "wcag:1.4.1": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that all sighted users can access\n                  information\n                  that is conveyed by color differences, that is, by the use of color where each color\n                  has a meaning assigned to it. If the information is conveyed through color differences\n                  in an image (or other non-text format), the color may not be seen by users with color\n                  deficiencies. In this case, providing the information conveyed with color through\n                  another visual means ensures users who cannot see color can still perceive the information.\n                  \n               \nColor is an important asset in design of Web content, enhancing its aesthetic appeal,\n                  its usability, and its accessibility. However, some users have difficulty perceiving\n                  color. People with partial sight often experience limited color vision, and many older\n                  users do not see color well. In addition, people using limited-color or\n                  monochrome displays and browsers will be unable to access information that is presented\n                  only in color.\n                  \n               \nExamples of information conveyed by color differences: “required fields are red\",\n                  “error is shown in red\", and “Mary's sales are in red, Tom's are in blue\". Examples\n                  of indications of an action include: using color to indicate that a link will open\n                  in a new window or that a database entry has been updated successfully. An example\n                  of prompting a response would be: using highlighting on form fields to indicate that\n                  a required field had been left blank.\n                  \n               \n\nNote\n\nThis should not in any way discourage the use of color on a page, or even color coding\n                        if it is complemented by other visual indication.\n                        \n                     \n\n\n\nNote\n\nIf content is conveyed through the use of colors that differ not only in their hue,\n                        but that also have a significant difference in lightness, then this counts as an additional\n                        visual distinction, as long as the difference in relative luminance between the colors\n                        leads\n                        to a contrast ratio of 3:1 or greater.\n                        For example, a light green and a dark red differ both by color (hue)\n                        and by lightness, so they would pass if the contrast ratio is at least 3:1.\n                        Similarly, if content is distinguished by inverting an element's foreground and background\n                        colors,\n                        this would pass (again, assuming that the foreground and background colors have a\n                        sufficient contrast).\n                        \n                     \nHowever, if content relies on the user's ability to accurately perceive or differentiate\n                        a particular color\n                        an additional visual indicator will be required regardless of the contrast ratio between\n                        those colors. For example, \n                        knowing whether an outline is green for valid or red for invalid.\n                        \n                     \n\n\n\nNote\n\nThis criterion does not apply to situations where color has not been used to convey information, indicate an action,\n                        prompt a response or distinguish a visual element. For instance, a hyperlink which\n                        has been styled to appear no different than neighboring \n                        static text would not fail this success criterion, as there would be no color differentiation\n                        between the actionable hyperlink text \n                        and the adjacent static text. Such lack of styling differentiation could result in\n                        poor usability for anyone looking at the interface, regardless of disability.\n                        \n                     \n\n\n\nNote\n\nThis criterion does not directly address the needs of users with assistive technologies.\n                        It aims to ensure that sighted users who cannot distinguish between some colors can\n                        still\n                        understand content.\n                        How information is conveyed to assistive technology users is covered separately in\n                        other\n                        criteria, including (but not limited to)\n                        1.1.1 Non-text Content,\n                        1.3.1 Info and Relationships, and\n                        4.1.2 Name, Role, Value.\n                        \n                     \nConversely, even if information that is conveyed by color differences is appropriately\n                        conveyed\n                        to assistive technologies, it does not necessarily pass this criterion, as sighted\n                        users who cannot\n                        distinguish between certain color may not necessarily be using any assistive technologies.\n                        This\n                        criterion requires a visible alternative to color.\n                        \n                     \n\n\n\nNote\n\nMost user agents provide users with a color-only cue that a link has been previously\n                        activated by them (\"visited\"). However, several technical constraints result in authors\n                        having very limited control over these color-only indications of visited links.  The\n                        technical constraints are as follows:\n                     \n\n \n                           User agents constrain the exposure of a link's visited state due to privacy concerns. Author queries to user agents will indicate all links have not been visited.\n                           \n                        \n\n                           Any available information on the visited state of a link would be inaccurate since\n                           it is both user and browser-dependent. Even if an author could accurately get information\n                           on previously activated links by a certain user, the author would be constrained to\n                           the current browser's preserved history, and would be unable to determine if the user\n                           had visited the page using a different browser (or if the history was not preserved,\n                           either from cache clearing or use of private sessions).\n                           \n                        \n\n                           Authors can only use color to modify the :visited CSS pseudoclass style. The technology constrains any non-color styling. Due to palette\n                           limitations, an author cannot use color alone to achieve 3:1 contrast between link\n                           and non-link text as well as between visited and unvisited links while also achieving\n                           4.5:1 contrast for all link and non-link text.\n                           \n                        \n\n                           Authors also cannot set the visited state of links. The anchor element does not include\n                           a \"visited\" attribute; therefore the author has no ability to alter the state through\n                           an attribute setting. As such, authors cannot achieve 1.3.1 Info and Relationships or\n                           4.1.2 Name, Role, Value in regard to visited links.\n                           \n                        \n\nFor these reasons, setting or conveying a link's visited status is not an author responsibility.\n                        Where color alone distinguishes between visited and unvisited links, it does not result\n                        in a failure of this Success Criterion, even where the contrast between the two link\n                        colors is below 3:1. Note that authors must continue to ensure that all text links\n                        meet contrast minimums against the page background (SC 1.4.3).\n                     \n\n\n",
      "examples": "\nExamples\n\nA form that uses color and text to indicate required fields\nA form contains both required and optional fields. Instructions at the top of the\n                     form explain that required fields are labeled with red text and also with an icon.\n                     Users who cannot perceive the difference between the optional field labels and the\n                     red labels for the required fields will still be able to see the icon next to the\n                     red labels.\n                  \nAn examination\nStudents view an SVG image of a chemical compound and identify the chemical elements\n                     present based both on the colors used, as well as numbers next to each\n                     element. A legend shows the color and number for each type of element. Sighted users\n                     who\n                     cannot perceive all the color differences can still understand the image by relying\n                     on\n                     the numbers.\n                  \n\n"
    }
  },
  "wcag:1.4.2": {
    "understanding": {
      "intent": "\nIntent\nIndividuals who use screen reading software can find it hard to hear the speech output\n                  if there is other audio playing at the same time. This difficulty is exacerbated when\n                  the screen reader's speech output is software based (as most are today) and is controlled\n                  via the same volume control as the sound. Therefore, it is important that the user\n                  be able to turn off the background sound. \n                  \n               \nHaving control of the volume includes\n                  being able to reduce its volume to zero. Muting the system volume is not \"pausing\n                  or stopping\" the autoplay audio. Both the \"pause or stop\" and control of audio volume\n                  need to be independent of the overall system volume. \n                  \n               \n\nNote\n\nPlaying audio automatically when landing on a page may affect a screen reader user's\n                        ability to find the mechanism to stop it because they navigate by listening and automatically\n                        started sounds might interfere with that navigation. Therefore, we discourage the\n                        practice of automatically starting sounds (especially if they last more than 3 seconds),\n                        and encourage that the sound be \n                        started by an action initiated by the user after they reach the page, rather than requiring\n                        that the sound be \n                        stopped by an action of the user after they land on the page.\n                        \n                     \n\n\nSee also \n                  1.4.7: Low or No Background Audio.\n                  \n               \n",
      "examples": "\nExamples\n\nAn audio file begins playing automatically when a page is opened. However, the audio\n                     can be stopped by the user by selecting a \"silent\" link at the top of the page.\n                     \n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nAudio or video element avoids automatically playing audio\n\n"
    }
  },
  "wcag:1.4.3": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to provide enough contrast between text and\n                  its background, so that it can be read by people with moderately low vision or impaired\n                  contrast perception, without the use of contrast-enhancing assistive technology.\n                  \n               \nFor all consumers of visual content, adequate light-dark contrast is needed between\n                  the relative luminance of text and its background for good readability.\n                  Many different visual impairments can substantially impact contrast sensitivity, requiring\n                  more light-dark contrast, regardless of color (hue).\n                  For people who are not able to distinguish certain shades of color (often referred\n                  to as color blindness) hue and saturation have minimal or no effect on legibility as assessed by reading\n                  performance.\n                  Further, the inability to distinguish certain shades of color does not negatively\n                  affect light-dark contrast perception.\n                  Therefore, in the recommendation, contrast is calculated in such a way that color\n                  (hue) is not a key factor.\n                  \n               \nText that is decorative and conveys no information is excluded. For example, if random\n                  words are used to create a background and the words could be rearranged or substituted\n                  without changing meaning, then it would be decorative and would not need to meet this\n                  criterion. \n                  \n               \nText that is larger and has wider character strokes is easier to read at lower contrast.\n                  The contrast requirement for larger text is therefore lower. This allows authors to\n                  use a wider range of color choices for large text, which is helpful for design of\n                  pages, particularly titles. 18 point text or 14 point bold text is judged to be large\n                  enough to require a lower contrast ratio. (See The American Printing House for the\n                  Blind Guidelines for Large Printing and The Library of Congress Guidelines for Large\n                  Print under \n                  Resources). \"18 point\" and \"bold\" can both have different meanings in\n                  different fonts but, except for very thin or unusual fonts, they should be sufficient.\n                  Since there\n                  are so many different fonts, the general measures are used and a note regarding thin\n                  or unusual\n                  fonts is included in the definition for large-scale text.\n                  \n               \n\nNote\n\nWhen evaluating this Success Criterion, the font size in points should be obtained\n                        from the user agent or calculated on font metrics in the way that user agents do.\n                        Point sizes are based on the CSS pt size as defined in \n                        CSS3 Values. The ratio between\n                        sizes in points and CSS pixels is 1pt = 1.333px, therefore 14pt\n                        and 18pt are equivalent to approximately 18.5px and 24px.\n                        \n                     \nBecause different image editing applications default to different pixel densities\n                        (e.g., 72ppi or 96ppi), specifying point sizes for fonts from within an\n                        image editing application can be unreliable when it comes to presenting text at a\n                        specific size.\n                        When creating images of large-scale text, authors should ensure that the text in the\n                        resulting image is roughly equivalent to 1.2 and 1.5 em or to 120% or 150% of the\n                        default size for body text. For example, for a 72ppi image, an author would need\n                        to use approximately 19pt and 24pt font sizes in order to successfully present images\n                        of large-scale text to a user. \n                        \n                     \nThe 3:1 and 4.5:1 contrast ratios referenced in this Success Criterion are intended\n                        to be\n                        treated as threshold values. When comparing the computed contrast ratio to the Success\n                        Criterion\n                        ratio, the computed values should not be rounded (e.g., 4.499:1 would not meet the\n                        4.5:1 threshold).\n                     \n\n\n\nNote\n\nBecause authors do not have control over user settings for font smoothing/anti-aliasing,\n                        when evaluating this\n                        Success Criterion, refer to the foreground and background colors obtained from the\n                        user agent, or the underlying\n                        markup and stylesheets, rather than the text as presented on screen.\n                     \nDue to anti-aliasing, particularly thin or unusual fonts may be rendered by user agents\n                        with a much fainter\n                        color than the actual text color defined in the underlying CSS. This can lead to situations\n                        where text has\n                        a contrast ratio that nominally passes the Success Criterion, but has a much lower\n                        contrast in practice.\n                        In these cases, best practice would be for authors to choose a font with stronger/thicker\n                        lines,\n                        or to aim for a foreground/background color combination that exceeds the normative\n                        requirements\n                        of this Success Criterion.\n                        \n                     \n\n\nThe contrast requirements for text also apply to images of text\n                  (text that has been rendered into pixels and then stored in an image format) - see\n                  Success Criterion 1.4.5: Images of Text.\n                  \n               \nThis requirement applies to situations in which images of text were intended to be\n                  understood as text. Incidental text, such as in photographs that happen to include\n                  a street sign, are not included. Nor is text that for some reason is designed to be\n                  invisible to all viewers. Stylized text, such as in corporate logos, should be treated\n                  in terms of its function on the page, which may or may not warrant including the content\n                  in the text alternative. Corporate visual guidelines beyond logo and logotype are\n                  not included in the exception.\n                  \n                  \n               \nIn this provision there is an exception that reads \"that are part of a picture that\n                  contains significant other visual content,\". This exception is intended to separate\n                  pictures that have text in them from images of text that are done to replace text\n                  in order to get a particular look. \n                  \n               \n\nNote\n\nImages of text do not scale as well as text because they tend to pixelate. It is also\n                        harder to change foreground and background contrast and color combinations for images\n                        of text, which is necessary for some users. Therefore, we suggest using text wherever\n                        possible, and when not, consider supplying an image of higher resolution.\n                        \n                        \n                     \n\n\nThis Success Criterion applies to text in the page, including\n                  placeholder text and text that is shown when a pointer is hovering over an object\n                  or when an object has keyboard focus. If any of these are used in a page, the text\n                  needs to provide sufficient contrast.\n                  \n               \nAlthough this Success Criterion only applies to text, similar issues occur for content\n                  presented\n                  in charts, graphs, diagrams, and other non-text-based information, which is covered\n                  by\n                  Success Criterion 1.4.11 Non-Text Contrast.         \n                  \n               \nSee also \n                  1.4.6: Contrast (Enhanced).\n                  \n               \n\nRationale for the Ratios Chosen\nA contrast ratio of 3:1 is the minimum level recommended by [[ISO-9241-3]] and [[ANSI-HFES-100-1988]]\n                     for standard text and vision. The 4.5:1 ratio is used in this Success Criterion to\n                     account\n                     for the loss in contrast that results from moderately low visual acuity, congenital\n                     or acquired color deficiencies, or the loss of contrast sensitivity that typically\n                     accompanies aging.\n                     \n                  \nThe rationale is based on a) adoption of the 3:1 contrast ratio for minimum acceptable\n                     contrast for normal observers, in the ANSI standard, and b) the empirical finding\n                     that in the population, visual acuity of 20/40 is associated with a contrast sensitivity\n                     loss of roughly 1.5 [[ARDITI-FAYE]]. A user with 20/40 would thus require a contrast\n                     ratio of\n                     3 * 1.5 = 4.5 to 1. Following analogous empirical findings and the same logic,\n                     the user with 20/80 visual acuity would require contrast of about 7:1. This ratio\n                     is used in\n                     Success Criterion 1.4.6.\n                     \n                  \nHues are perceived differently by users with color vision deficiencies (both congenital\n                     and acquired) resulting in different colors and relative luminance contrasts than\n                     for normally sighted users. Because of this, effective contrast and readability are\n                     different for this population. However, color deficiencies are so diverse that prescribing\n                     effective general use color pairs (for contrast) based on quantitative data is not\n                     feasible. Requiring good luminance contrast accommodates this by requiring contrast\n                     that is independent of color perception. Fortunately, most of the luminance contribution\n                     is from the mid and long wave receptors which largely overlap in their spectral responses.\n                     The result is that effective luminance contrast can generally be computed without\n                     regard to specific color deficiency, except for the use of predominantly long wavelength\n                     colors against darker colors (generally appearing black) for those who have protanopia.\n                     (We provide an advisory technique on avoiding red on black for that reason). For more\n                     information see [[ARDITI-KNOBLAUCH-1994]] \n                     [[ARDITI-KNOBLAUCH-1996]] \n                     [[ARDITI]].\n                     \n                  \n\nNote\n\nSome people with cognitive disabilities require color combinations or hues that have\n                           low contrast, and therefore we allow and encourage authors to provide mechanisms to\n                           adjust the foreground and background colors of the content. Some of the combinations\n                           that could be chosen may have contrast levels that will be lower than those those\n                           specified here. This is not a violation of this Success Criterion, provided\n                           there is a mechanism that will return to the required values set out here.\n                           \n                        \n\n\nThe contrast ratio of 4.5:1 was chosen for level AA because it compensated for the\n                     loss in contrast sensitivity usually experienced by users with vision loss equivalent\n                     to approximately 20/40 vision. (20/40 calculates to approximately 4.5:1.) 20/40 is\n                     commonly reported as typical visual acuity of elders at roughly age 80. [[GITTINGS-FOZARD]]\n                     \n                     \n                  \nThe contrast ratio of 7:1 was chosen for level AAA because it compensated for the\n                     loss in contrast sensitivity usually experienced by users with vision loss equivalent\n                     to approximately 20/80 vision. People with more than this degree of vision loss usually\n                     use assistive technologies to access their content (and the assistive technologies\n                     usually have contrast enhancing, as well as magnification capability built into them).\n                     The 7:1 level therefore generally provides compensation for the loss in contrast sensitivity\n                     experienced by users with low vision who do not use assistive technology and provides\n                     contrast enhancement for color deficiency as well.\n                     \n                  \n\nNote\n\nCalculations in [[ISO-9241-3]] and [[ANSI-HFES-100-1988]] are for body text. A relaxed\n                           contrast\n                           ratio is provided for text that is much larger.\n                        \n\n\n\n\nNotes on formula\nConversion from nonlinear to linear RGB values is based on IEC/4WD 61966-2-1 [[IEC-4WD]].\nThe formula (L1/L2) for contrast is based on [[ISO-9241-3]] and [[ANSI-HFES-100-1988]] standards.\n                  \nThe ANSI/HFS 100-1988 standard calls for the contribution from ambient light to be\n                     included in the calculation of L1 and L2. The .05 value used is based on Typical Viewing\n                     Flare from [[IEC-4WD]].\n                     \n                  \nThis Success Criterion and its definitions use the terms \"contrast ratio\" and \"relative\n                     luminance\" rather than \"luminance\" to reflect the fact that Web content does not emit\n                     light itself. The contrast ratio gives a measure of the relative luminance that would\n                     result when displayed. (Because it is a ratio, it is dimensionless.)\n                     \n                  \n\nNote\n\n\n                           Refer to \n                           related resources for a list of tools that utilize the contrast ratio\n                           to analyze the contrast of Web content.\n                           \n                        \nSee also \n                           2.4.7: Focus Visible for techniques for indicating keyboard focus.\n                           \n                        \n\n\n\n\nInactive User Interface Components\nUser Interface Components that are not available for user interaction (e.g., a disabled\n                     control in HTML) are not required to meet contrast requirements. An inactive user\n                     interface component is visible but not currently operable. An example would be a submit\n                     button at the bottom of a form that is visible but cannot be activated until all the\n                     required fields in the form are completed.\n                  \n\n\nFigure 1  An inactive button using default browser styles\n\n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nText has enhanced contrast\nText has minimum contrast\n\n"
    }
  },
  "wcag:1.4.4": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that visually rendered text, including\n                  text-based controls (text characters that have been displayed so that they can be\n                  seen [vs. text characters that are still in data form such as ASCII]) can be scaled\n                  successfully so that it can be read directly by people with mild visual disabilities,\n                  without requiring the use of assistive technology such as a screen magnifier. Users\n                  may benefit from scaling all content on the Web page, but text is most critical. \n                  \n               \nThe scaling of content is primarily a user agent responsibility. User agents that\n                  satisfy \n                  UAAG 1.0 Checkpoint 4.1 allow users to configure text scale. The author's responsibility is to create Web\n                  content that does not prevent the user agent from scaling the content effectively.\n                  Authors may satisfy this Success Criterion by verifying that content does not interfere\n                  with user agent support for resizing text, including text-based controls, or by providing\n                  direct support for resizing text or changing the layout. An example of direct support\n                  might be via server-side script that can be used to assign different style sheets.\n                  \n               \nIf the author is using a technology whose user agents do not provide zoom support,\n                  the author is responsible for providing this type of functionality directly or for\n                  providing content that works with the type of functionality available in the user\n                  agent.\n                  If the user agent doesn't provide zoom functionality but does let the user change\n                  the\n                  text size, the author is responsible for ensuring that the content remains usable\n                  when the text is resized. \n                  \n               \nSome user interface components that function as a label and require activation by\n                  the user to access content are not wide enough to accommodate the label's content.\n                  For example, in Web mail applications the subject column may not be wide enough to\n                  accommodate every possible subject header, but activating the subject header takes\n                  the user to the full message with the full subject header. In Web-based spreadsheets,\n                  cell content that is too long to be displayed in a column can be truncated, and the\n                  full content of the cell is available to the user when the cell receives focus. The\n                  content of a user interface component may also become too wide in user interfaces\n                  where the user can resize the column width. In this type of user interface component,\n                  line wrapping is not required; truncation is acceptable if the component's full content\n                  is available on focus or after user activation and an indication that this information\n                  can be accessed, is provided to the user in some way besides the fact that it is truncated.\n                  \n               \nContent satisfies the Success Criterion if it can be scaled up to 200%, that is, up\n                  to twice the width and height. Authors may support scaling beyond that limit, however,\n                  as scaling becomes more extreme, adaptive layouts may introduce usability problems.\n                  For example, words may be too wide to fit into the horizontal space available to them,\n                  causing them to be truncated; layout constraints may cause text to overlap with other\n                  content when it is scaled larger; or only one word of a sentence may fit on each line,\n                  causing the sentence to be displayed as a vertical column of text that is difficult\n                  to read. \n                  \n               \nThe working group feels that 200% is a reasonable accommodation that can support a\n                  wide range of designs and layouts, and complements older screen magnifiers that provide\n                  a minimum magnification of 200%. Above 200%, zoom (which resizes text, images, and\n                  layout regions and creates a larger canvas that may require both horizontal and vertical\n                  scrolling) may be more effective than text resizing. Assistive technology dedicated\n                  to zoom support would usually be used in such a situation and may provide better accessibility\n                  than attempts by the author to support the user directly.\n                  \n               \n\nNote\n\nImages of text do not scale as well as text because they tend to pixelate, and therefore\n                        we suggest using text wherever possible. It is also harder to change foreground and\n                        background contrast and color combinations for images of text, which are necessary\n                        for some users.\n                        \n                        \n                     \n\n\nSee also \n                  1.4.3: Visual Presentation.\n                  \n               \n",
      "examples": "\nExamples\n\n\n                     A user with vision impairments increases the text size on a Web page in a browser\n                     from 1 em to 1.2 ems. While the user could not read the text at the smaller size,\n                     she can read the larger text. All the information on the page is still displayed when\n                     the larger font is used for the text.\n                     \n                     \n                  \n\n                     A Web page contains a control for changing the scale of the page. Selecting different\n                     settings changes the layout of the page to use the best design for that scale.\n                     \n                     \n                  \n\n                     A user uses a zoom function in his user agent to change the scale of the content.\n                     All the content scales uniformly, and the user agent provides scroll bars, if necessary.\n                     \n                     \n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nMeta viewport allows for zoom\nZoomed text node is not clipped with CSS overflow\n\n"
    }
  },
  "wcag:1.4.5": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to encourage authors, who are using technologies\n                  which are capable of achieving their desired default visual presentation, to enable\n                  people who require a particular visual presentation of text to be able to adjust the\n                  text presentation as needed. This includes people who require the text in a particular\n                  font size, foreground and background color, font family, line spacing or alignment.\n                  \n               \nIf an author can use text to achieve the same visual effect, he or she should present\n                  the information as text rather than using an image. If for any reason, the author\n                  cannot format the text to get the same effect, the effect won't be reliably presented\n                  on the commonly available user agents, or using a technology to meet this criterion\n                  would interfere with meeting other criteria such as 1.4.4, then an image of text can\n                  be used. This includes instances where a particular presentation of text is essential\n                  to the information being conveyed, such as type samples, logotypes, branding, etc.\n                  Images of text may also be used in order to use a particular font that is either not\n                  widely deployed or which the author doesn't have the right to redistribute, or to\n                  ensure that the text would be anti-aliased on all user agents.\n                  \n               \nImages of text can also be used where it is possible for users to customize the image\n                  of text to match their requirements.\n                  \n               \nThe definition of image of text contains the note: Note: This does not include text\n                  that is part of a picture that contains significant\n                  other visual content. Examples of such pictures include graphs, screenshots, and diagrams\n                  which visually\n                  convey important information through more than just text.\n                  \n               \nTechniques for satisfying this Success Criterion are the same as those for Success\n                  Criterion 1.4.9, except that they only need to apply if the visual presentation can\n                  be achieved with the technologies that the author is using. For Success Criterion\n                  1.4.9, the sufficient techniques would be applied only when the user can customize\n                  the output. \n                  \n               \nSee also \n                  1.4.9: Images of Text (No Exception).\n                  \n               \n",
      "examples": "\nExamples\n\nStyled Headings\nRather than using bitmap images to present headings in a specific font and size, an\n                     author uses CSS to achieve the same result.\n                  \nDynamically Generated Images\nA Web page uses server-side scripting to present text as an an image. The page includes\n                     controls that allow the user to adjust the font size and foreground and background\n                     colors of the generated image.\n                  \nA quote\nA Web page contains a quote. The quote itself is presented as italicized text, indented\n                     from the left margin. The name of the person to whom the quote is attributed is below\n                     the quote with 1.5x the line space and further indented from the left margin. CSS\n                     is used to position the text; set the spacing between lines; as well as display the\n                     text's font family, size, color and decoration.\n                  \nNavigation items\nA Web page contains a menu of navigation links that have both an icon and text to\n                     describe their target. CSS is used to display the text's font family, size and foreground\n                     and background colors; as well as the spacing between the navigation links.\n                  \nA logo containing text\nA Web site contains the organization's logo in the top left corner of each Web page.\n                     The logo contains logotype (text as part, or all, of the logo). The visual presentation\n                     of the text is essential to the identity of the logo and is included as a gif image\n                     which does not allow the text characteristics to be changed. The image has a text\n                     alternative.\n                  \nRepresentation of a font family\nA Web page contains information about a particular font family. Substituting the font\n                     family with another font would defeat the purpose of the representation. The representation\n                     is included as a jpeg image which does not allow the text characteristics to be changed.\n                     The image has a text alternative.\n                  \nA representation of a letter\nA Web page contains a representation of an original letter. The depiction of the letter\n                     in its original format is essential to information being conveyed about the time period\n                     in which it was written. The letter is included as a gif image which does not allow\n                     the text characteristics to be changed. The image has a text alternative.\n                  \nSymbolic text characters\nA form allows users to enter blocks of text. The form provides a number of buttons,\n                     including functions to style the text and check spelling. Some of the buttons use\n                     text characters that do not form a sequence that expresses something in human language.\n                     For example \"B\" to increase font weight, \"I\" to italicize the text and \"ABC\" to check\n                     the spelling. The symbolic text characters are included as gif images which do not\n                     allow the text characteristics to be changed. The buttons have text alternatives.\n                  \nCustomizable font settings in images of text\nA Web site allows users to specify font settings and all images of text on the site\n                     are then provided based on those settings.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nHTML images contain no text\n\n"
    }
  },
  "wcag:1.4.10": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to support people with low vision who need\n                  to enlarge text and read it in a single column.  When the browser zoom is used to\n                  scale content to 400%, it reflows - i.e., it is presented in one column so that scrolling\n                  in more than one direction is not necessary.\n               \nFor people with low vision, both enlarging and reflowing text are critical to reading.\n                  Enlarging text enables the perception of characters. Reflowing text enables users\n                  to track from the end of one line to the beginning of the next line.\n               \nAvoiding the need to scroll in the direction of reading in order to reveal lines that\n                  are cut off by the viewport is important, because such scrolling significantly increases\n                  the effort required to read. It is also important that content is not hidden off-screen.\n                  For example, zooming into a vertically scrolling page should not cause content to\n                  be hidden to one side.\n               \n\nHow reflow works\nUser agents for technologies such as HTML/CSS, PDF, and ePub have methods for reflowing\n                     content to fit the width of the window (viewport). When appropriately authored, page\n                     content can reflow (wrap) to stay within the window's boundaries (viewport) when users\n                     zoom in to enlarge the size of content. Spatial relationships of content may change\n                     when users zoom, but all information and functionality should continue to be available.\n                  \nSupporting the reflow of content is also known as 'Responsive Web Design'. It is enabled\n                     by CSS media queries which reformat the web content for different viewport widths\n                     (at particular break points) in order to provide optimised layouts for mobile devices\n                     such as tablets or smartphones. Importantly, these breakpoints are not only triggered\n                     by narrower viewports, but also when users employ the browser zoom function to zoom\n                     into the page.\n                  \nIn a desktop browser at 100% (default) scale, typical web pages that support reflow\n                     display content in two, three or more columns. Zooming in will at some point trigger\n                     a change of layout, so content will now be displayed in fewer columns. At a higher\n                     magnification scale of 200% or more, content will usually be rendered in a single\n                     column. Parts of content that were in the marginal columns, like a navigation menu\n                     or supplementary content, will now typically appear on top of or below the main content.\n                  \n\n\nViewing distance and display resolution\nThe value of 320 CSS pixels was chosen as a reasonable minimum size that authors can\n                     achieve. This value lines up with the reported viewport width of small displays of\n                     common mobile devices. The width of 320 CSS pixels exactly corresponds to a desktop\n                     browser window set to a width of 1280px and zoomed in to 400%. It should be noted\n                     that 400% applies to the dimension, not the area. It means four times the default\n                     width and four times the default height.\n                  \n\nFigure 1 A letter of the same CSS pixel size on different displays with different resolutions\n\nWhen we read, the size of the print is not as important as the image it projects on\n                     the retina of our eye. Phones are designed for close viewing while desktops are designed\n                     for viewing farther away. As a consequence 16px print on a phone is physically smaller\n                     than 16px print on a desktop. This is not a problem because both print sizes cast\n                     the same image on our retina if they are viewed at their intended distance.\n                  \n\n\nVisibility and availability of content\nHow much of the content is visible may change at different scales. For example, navigation\n                     menus that are fully visible in the desktop layout are often collapsed into fewer\n                     items, or even into a single menu button (the 'hamburger' icon pattern) so they take\n                     up less screen space.\n                  \nThe Success Criterion is met as long as all content and functionality are still fully\n                     available -  either directly, or revealed via accessible controls, or accessible via\n                     direct links.\n                  \n\n\nContent exceptions for reflow\nContent which requires two-dimensional layout for usage or meaning cannot reflow without\n                     loss of meaning, and is therefore excepted from the need to be presented without two-dimensional\n                     scrolling. For example, graphics and video are by their nature two-dimensional. Cutting\n                     up an image and stacking the blocks would render the content unusable. However, it\n                     is possible to have these elements stay within the bounds of viewport even as other\n                     content zooms to 400% (see advisory techniques).\n                  \nData tables have a two-dimensional relationship between the headings and data cells.\n                     This relationship is essential to convey the content. This Success Criterion therefore\n                     exempts data tables from needing to display without scrolling in the direction of\n                     text (e.g., horizontally in a vertically scrolling page). However, cells within data\n                     tables are not excepted unless the cell contains types of content that also requires\n                     two-dimensional layout for usage or meaning.\n                  \nInterfaces which provide toolbars to edit content need to show both the content and\n                     the toolbar in the viewport. Depending on the number of toolbar buttons, the toolbar\n                     may need to scroll in the direction of text.\n                  \n\n\nResponsive web design and other ways to meet this Success Criterion\nUsing the responsive web design approach is the most effective method of achieving\n                     the goal of allowing people to zoom in to 400%. Each variation (CSS break point) of\n                     the page at the same URL should conform (compare Conformance for WCAG 2.1).\n                  \nFor organisations which are using legacy systems or are not able to update their layout\n                     methods for some reason, an alternative conforming version could be a mobile site\n                     which has a fixed 320px wide layout. The user should be able to find that version\n                     from the default website.\n                  \n\n\nAvoiding scrolling in horizontally and vertically written languages\nThe success Criterion applies to both horizontally and vertically written languages.\n                     Zooming the page for horizontally written languages where pages scroll vertically\n                     by default (e.g. English) should not require horizontal scrolling. Zooming the page\n                     for vertically written languages which scroll horizontally by default should not require\n                     vertical scrolling.\n                  \n\n\nThe relation of Reflow to the Success Criterion 1.4.4 Resize Text\nThe focus of the Reflow Success Criterion is to enable users to zoom in without having\n                     to scroll in two directions. Success Criterion 1.4.4 Resize Text also applies, so it should be possible to increase the size of all text to at least\n                     200% while simultaneously meeting the reflow requirement. For most implementations,\n                     the text is expected to continue to enlarge as the magnification increases, so that\n                     users can magnify text up to (and beyond) 400%. In an implementation where text does\n                     not consistently increase its size as people zoom in (such as when it is transformed\n                     based on a media query to adapt to small-screen usage), it must still be possible\n                     to get to 200% enlargement in order to satisfy the Resize Text criterion.\n                  \nFor example, if at the default browser setting of 100% zoom, text is set at 20px when\n                     the window is 1280px wide, the same 20px at 200% zoom would mean a text size of 200%.\n                     At 400% zoom, the author may decide to set the text size to 10px: the text would now\n                     still be enlarged to 200% compared to the default browser setting of 100% zoom. It\n                     is not required to achieve 200% text enlargement at every breakpoint, but it should\n                     be possible to get 200% text enlargement in some way.\n                  \n\n\nBrowsers on mobile operating systems\nMost browsers on mobile operating systems do not combine reflow and zoom in the same\n                     way as on desktop browsers. These mobile browsers normally support reflow when changing\n                     the orientation of the device -- content will be adjusted to the new viewport width.\n                     However, these mobile browsers can only magnify content to achieve 1.4.4. Resize Text\n                     in manners which do not constrain reflow to a single dimension, for example by using\n                     a pinch gesture to scale up content or a double tap on a particular column to make\n                     it fill the viewport width. This means that zoomed content in most mobile browsers\n                     involves two-dimensional scrolling regardless of what an author does.\n                  \nMobile user agents can offer reflow when users zoom into content, as evidenced by the Dolphin browser for\n                     Android. The lack of magnified reflow support in browsers on mobile operating systems\n                     can therefore be regarded as a user agent support issue.\n                  \n\n",
      "examples": "\nExamples\n\n\nOne column view in responsive design\n\n\n\nAnimation of zooming in on a responsive site. The content reflows to fit the screen.\n                        \n\nNote that as the zoom percentage increases, the navigation changes first to hide options\n                        behind a \"More\" dropdown menu. As zooming continues, most navigation options are eventually\n                        behind a \"hamburger\" menu button. All the information and functionality is still available\n                        from this web page. There is no horizontal scrolling.\n                     \n\n\nPDF offering reflow\nIn a PDF created to conform to PDF/Universal Accessibility (ISO 14289), the content\n                        can be reflowed and zoomed in to make reading possible for someone with low-vision.\n                     \n\n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nMeta viewport allows for zoom\n\n"
    }
  },
  "wcag:1.4.11": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that user interface components (i.e.,\n                  controls) and meaningful graphics are distinguishable by people with moderately low\n                  vision. The requirements and rationale are similar to those for large text in 1.4.3 Contrast (Minimum). Note that this requirement does not apply to inactive user interface components.\n               \nLow contrast controls are more difficult to perceive, and may be completely missed\n                  by people with a visual impairment. Similarly, if a graphic is needed to understand\n                  the content or functionality of the webpage then it should be perceivable by people\n                  with low vision or other impairments without the need for contrast-enhancing assistive\n                  technology.\n               \n\nNote\n\nThe 3:1 contrast ratios referenced in this Success Criterion is intended to be treated\n                        as threshold values. When comparing the computed contrast ratio to the Success Criterion\n                        ratio, the computed values should not be rounded (e.g. 2.999:1 would not meet the\n                        3:1 threshold).\n                     \n\n\n\nNote\n\nBecause authors do not have control over user settings for font smoothing and anti-aliasing,\n                        when evaluating this\n                        \t\t\t\t\t Success Criterion, refer to the colors obtained from the user agent, or the\n                        underlying\n                        \t\t\t\t\t markup and stylesheets, rather than the non-text elements as presented on screen.\n                     \nDue to anti-aliasing, particularly thin lines and shapes of non-text elements may\n                        be rendered by user agents with\n                        \t\t\t\t\t a much fainter color than the actual color defined in the underlying CSS. This\n                        can lead to situations where\n                        \t\t\t\t\t non-text elements have a contrast ratio that nominally passes the Success Criterion,\n                        but have a much lower contrast\n                        \t\t\t\t\t in practice. In these cases, best practice would be for authors to avoid particularly\n                        thin lines and shapes,\n                        \t\t\t\t\t or to use a combination of colors that exceeds the normative requirements of\n                        this Success Criterion.\n                        \t\t\t\t\n                     \n\n\n\nUser Interface Components\nUnless the control is inactive, any visual information provided that is necessary for a user to identify that a\n                     control is present and how to operate it must have a minimum 3:1 contrast ratio with\n                     the adjacent colors. Also, any visual information necessary to indicate state, such\n                     as whether a component is selected or focused must also ensure that the information\n                     used to identify the control in that state has a minimum 3:1 contrast ratio.\n                  \nThis Success Criterion does not require that changes in color that differentiate between\n                     states of an individual component meet the 3:1 contrast ratio when they do not appear\n                     next to each other. For example, there is not a new requirement that visited links\n                     contrast with the default color, or that mouse hover indicators contrast with the\n                     default state. However, the component must not lose contrast with the adjacent colors,\n                     and non-text indicators such as the check in a checkbox, or an arrow graphic indicating\n                     a menu is selected or open must have sufficient contrast to the adjacent colors.\n                  \nBoundaries\nThis success criterion does not require that controls have a visual boundary indicating\n                     the hit area, but if the visual indicator of the control is the only way to identify\n                     the control, then that indicator must have sufficient contrast. If text (or an icon)\n                     within a button or placeholder text inside a text input is visible and there is no\n                     visual indication of the hit area then the Success Criterion is passed. If a button\n                     with text also has a colored border, since the border does not provide the only indication\n                     there is no contrast requirement beyond the text contrast (1.4.3 Contrast (Minimum)). Note that for people with cognitive disabilities it is recommended to delineate\n                     the boundary of controls to aid in the recognition of controls and therefore the completion\n                     of activities.\n                  \n\n\nFigure 1 A button without a visual boundary, and the same button with a focus indicator that\n                        is a defined visual boundary of grey (#949494) adjacent to white.\n                     \n\nAdjacent colors\nFor user interface components 'adjacent colors' means the colors adjacent to the component.\n                     For example, if an input has a white internal background, dark border, and white external\n                     background the 'adjacent color' to the component would be the white external background.\n                  \n\n\nFigure 2 A standard text input with a grey border (#767676) and white adjacent color outside\n                        the component\n                     \n\nIf components use several colors, any color which does not interfere with identifying\n                     the component can be ignored for the purpose of measuring contrast ratio. For example,\n                     a 3D drop-shadow on an input, or a dark border line between contrasting backgrounds\n                     is considered to be subsumed into the color closest in brightness (perceived luminance).\n                  \nThe following example shows an input that has a light background on the inside and\n                     a dark background around it. The input also has a dark grey border which is considered\n                     to be subsumed into the dark background. The border does not interfere with identifying\n                     the component, so the contrast ratio is taken between the white background and dark\n                     blue background.\n                  \n\n\nFigure 3  The contrast of the input background (white) and color adjacent to the control (dark\n                        blue #003366) is sufficient. There is also a border (silver) on the component that\n                        is not required to contrast with either.\n                     \n\nFor visual information required to identify a state, such as the check in a checkbox\n                     or the thumb of a slider, that part might be within the component so the adjacent\n                     color might be another part of the component.\n                  \n\n\nFigure 4  A customized checkbox with light grey check (#E5E5E5), which has a contrast ratio\n                        of 5.6:1 with the purple box (#6221EA).\n                     \n\nIt is possible to use a flat design where the status indicator fills the component\n                     and does not contrast with the component, but does contrast with the colors adjacent\n                     to the component.\n                  \n\n\nFigure 5 The first radio button shows the default state with a grey (#949494) circle. The second\n                        and third show the radio button selected and filled with a color that contrasts with\n                        the color adjacent to the component. The last example shows the state indicator contrasting\n                        with the component colors.\n                     \n\nRelationship with Use of Color\nThe Use of Color success criterion addresses changing only the color (hue) of an object or text without otherwise altering the object's form. The principle\n                     is that contrast ratio (the difference in brightness) can be used to distinguish text\n                     or graphics. For example, G183: Using a contrast ratio of 3:1 with surrounding text and providing additional visual\n                        cues on hover for links or controls where color alone is used to identify them is a technique to use a contrast ratio of 3:1 with surrounding text to distinguish\n                     links and controls. In that case the Working Group regards a link color that meets\n                     the 3:1 contrast ratio relative to the non-linked text color as satisfying the Success\n                     Criterion 1.4.1 Use of color since it is relying on contrast ratio as well as color (hue) to convey that the text\n                     is a link.\n                  \nNon-text information within controls that uses a change of hue alone to convey the\n                     value or state of an input, such as a 1-5 star indicator with a black outline for\n                     each star filled with either yellow (full) or white (empty) is likely to fail the\n                     Use of color criterion rather than this one.\n                  \n\n\nFigure 6 \n                        \t\t\t\t\t\tTwo examples which pass this success criterion, using either a solid fill to\n                        indicate a checked-state that has contrast, or a thicker border as well as yellow\n                        fill.\n                        \t\t\t\t\t\n                     \n\n\n\nFigure 7 \n                        \t\t\t\t\t\tTwo examples which fail a success criterion, the first fails the Use of color\n                        criterion due to relying on yellow and white hues. The second example fails the Non-text\n                        contrast criterion due to the yellow (#FFF000) to white contrast ratio of 1.2:1.\n                        \t\t\t\t\t\n                     \n\nUsing a change of contrast for focus and other states is a technique to differentiate\n                     the states. This is the basis for G195: Using an author-supplied, visible focus indicator, and more techniques are being added.\n                  \nRelationship with Focus Visible\nIn combination with 2.4.7 Focus Visible, the visual focus indicator for a component must have sufficient contrast against the adjacent background when the component is focused,\n                     except where the appearance of the component is determined by the user agent and not\n                     modified by the author.\n                  \nMost focus indicators appear outside the component - in that case it needs to contrast\n                     with the background that the component is on. Other cases include focus indicators\n                     which are:\n                  \n\nonly inside the component and need to contrast with the adjacent color(s) within the\n                        component.\n                     \nthe border of the component (inside the component and adjacent to the outside) and\n                        need to contrast with both adjacent colours. \n                     \npartly inside and partly outside, where either part of the focus indicator can contrast\n                        with the adjacent colors.\n                     \n\n\n\nFigure 8 \n                        \t\t\t\t\t\tThe internal yellow indicator (#FFFF00) contrasts with the blue button background\n                        (#4189B9), passing the criterion.\n                        \t\t\t\t\t\n                     \n\n\n\nFigure 9 \n                        \t\t\t\t\t\tThe external yellow indicator (#FFFF00) does not contrast with the white background\n                        (#FFF) which the component is on, failing the criterion.\n                        \t\t\t\t\t\n                     \n\n\n\nFigure 10 \n                        \t\t\t\t\t\tThe external green indicator (#008000) does contrast with the white background\n                        (#FFF) which the component is on, passing the criterion. It does not need to contrast with both the component background and\n                        the component, as visually the effect is that the button is noticeably larger, and\n                        it's not necessary for a user to be able to discern this extra border in isolation.\n                        Although this passes non-text contrast, it is not a good indicator unless it is very\n                        thick.  New in WCAG 22: There is a AAA criterion in WCAG 2.2 that addresses this aspect, Focus Appearance.\n                        \t\t\t\t\t\n                     \n\nAlthough the figure above with a dark outline passes non-text contrast, it is not\n                     a good indicator unless it is very thick.  New in WCAG 22: There is a criterion in WCAG 2.2 that addresses this aspect, Focus Appearance.\nIf an indicator is partly inside and partly outside the component, either part of\n                     the indicator could provide contrast.\n                  \n\n\nFigure 11 \n                        \t\t\t\t\t\tThe focus indicator is partially inside, partially outside the button. The internal\n                        part of the yellow indicator (#FFFF00) contrasts with the blue button background (#4189B9),\n                        passing the criterion.\n                        \t\t\t\t\t\n                     \n\nIf the focus indicator changes the border of the component within the visible boundary\n                     it must contrast with the component. Typically an outline goes around (outside) the\n                     visible boundary of the component, in this case changing the border is just inside\n                     the visible edge of the component.\n                  \n\n\nFigure 12 \n                        \t\t\t\t\t\tThe border of the control changes from blue (#4189B9) to green (#4B933A). This\n                        is within the component and does not contrast with the inside background of the component\n                        therefore fails non-text contrast.\n                        \t\t\t\t\t\n                     \n\n\n\nFigure 13 \n                        \t\t\t\t\t\tAn inner border of dark green (#008000) does contrast with the black border,\n                        but does not contrast with the blue component background, therefore fails non-text contrast.\n                        \t\t\t\t\t\n                     \n\n\n\nFigure 14 \n                        \t\t\t\t\t\tAn inner border of white contrasts with the black border and the blue component\n                        background, therefore passes non-text contrast.\n                        \t\t\t\t\t\n                     \n\nNote that this Success Criterion does not directly compare the focused and unfocused\n                     states of a control - if the focus state relies on a change of color (e.g., changing\n                     only the background color of a button), this Success Criterion does not define any requirement\n                     for the difference in contrast between the two states.\n                  \n\n\nFigure 15 \n                        \t\t\t\t\t\tThe change of background within the component is not in scope of non-text contrast.\n                        However, this would not pass Use of color.\n                        \t\t\t\t\t\n                     \n\n\nUser Interface Component Examples\nFor designing focus indicators, selection indicators and user interface components\n                        that need to be perceived clearly, the following are examples that have sufficient\n                        contrast.\n                     \n\n\n                           \t\t\t\t\t\t\tUser Interface Component Examples\n                           \t\t\t\t\t\t\n                        \n\nType\nDescription\nExamples\n\n\nLink Text\nDefault link text is in the scope of 1.4.3 Contrast (Minimum), and the underline is sufficient to indicate the link.\n                           \n\n\n\nDefault focus style\nLinks are required to have a visible focus indicator by 2.4.7 Focus Visible. Where the focus style of the user-agent is not adjusted on interactive controls\n                              (such as links, form fields or buttons) by the website (author), the default focus\n                              style is exempt from contrast requirements (but must still be visible).\n                           \n\n\n\nButtons\nA button which has a distinguishing indicator such as position, text style, or context\n                              does not need a contrasting visual indicator to show that it is a button, although some users are likely to identify\n                              a button with an outline that meets contrast requirements more easily.\n                           \n\n\n\nText input (minimal)\nWhere a text-input has a visual indicator to show it is an input, such as a bottom\n                              border (#767676), that indicator must meet 3:1 contrast ratio.\n                           \n\n\n\n\n\nText input\nWhere a text-input has an indicator such as a complete border (#767676), that indicator\n                              must meet 3:1 contrast ratio.\n                           \n\n\n\n\n\nText input focus style\nA focus indicator is required. While in this case the additional gray (#CCC) outline\n                              has an insufficient contrast of 1.6:1 against the white (#FFF) background, the cursor/caret\n                              which is displayed when the input receives focus does provide a sufficiently strong visual indication.\n                           \n\n\n\n\n\nText input using background color\nText inputs that have no border and are differentiated only by a background color\n                              must have a 3:1 contrast ratio to the adjacent background (#043464).\n                           \n\n\n\n\n\nToggle button\nThe toggle button's internal background (#070CD5) has a good contrast with the external\n                              white background. Also, the round toggle within (#7AC2FF) contrasts with the internal\n                              background.\n                           \n\n\n\nDropdown indicator\nThe down-arrow is required to understand that there is drop-down functionality, it\n                              has a contrast of 4.7:1 for the white icon on dark gray (#6E747B).\n                           \n\n\n\nDropdown indicator\nThe down-arrow is required to understand that there is drop-down functionality, it\n                              has a contrast of 21:1 for the black icon on white.\n                           \n\n\n\nCheckbox - empty\nA black border on a white background indicates the checkbox.\n\n\n\nCheckbox - checked\nA black border on a white background indicates the checkbox, the black tick shape\n                              indicates the state of checked.\n                           \n\n\n\nCheckbox - Fail\nThe grey border color of the checkbox (#9D9D9D) has a contrast ratio of 2.7:1 with\n                              the white background, which is not sufficient for the visual information required\n                              to identify the checkbox.\n                           \n\n\n\nCheckbox - Subtle hover style\nA black border on a white background indicates the checkbox, when the mouse pointer\n                              activates the subtle hover state adds a grey background (#DEDEDE). The black border\n                              has a 15:1 contrast ratio with the grey background.\n                           \n\n\n\nCheckbox - Subtle focus style - fail\nA focus indicator is required. If the focus indicator is styled by the author, it\n                              must meet the 3:1 contrast ratio with adjacent colors. In this case, the gray (#AAA)\n                              indicator has an insufficient ratio of 2.3:1 with the white (#FFF) adjacent background.\n                           \n\n\n\n\n\n\n\nInactive User Interface Components\nUser Interface Components that are not available for user interaction (e.g., a disabled\n                        control in HTML) are not required to meet contrast requirements. An inactive user\n                        interface component is visible but not currently operable. An example would be a submit\n                        button at the bottom of a form that is visible but cannot be activated until all the\n                        required fields in the form are completed.\n                     \n\n\nFigure 16  An inactive button using default browser styles\n\nInactive components, such as disabled controls in HTML, are not available for user\n                        interaction. The decision to exempt inactive controls from the contrast requirements\n                        was based on a number of considerations. Although it would be beneficial to some people\n                        to discern inactive controls, a one-size-fits-all solution has been very difficult\n                        to establish. A method of varying the presentation of disabled controls, such as adding\n                        an icon for disabled controls, based on user preferences is anticipated as an advancement\n                        in the future.\n                     \n\n\n\nGraphical Objects\nThe term \"graphical object\" applies to stand-alone icons such as a print icon (with\n                     no text), and the important parts of a more complex diagram such as each line in a\n                     graph. For simple graphics such as single-color icons the entire image is a graphical\n                     object. Images made up of multiple lines, colors and shapes will be made of multiple\n                     graphical objects, some of which are required for understanding.\n                  \nNot every graphical object needs to contrast with its surroundings - only those that\n                     are required for a user to understand what the graphic is conveying. Gestalt principles such as the \"law of continuity\" can be used to ignore minor overlaps with other graphical\n                     objects or colors.\n                  \n\n\n\nImage\nNotes\n\n\n\n\n\n\nThe phone icon is a simple shape within the orange (#E3660E) circle. The meaning can\n                                 be understood from that icon alone, the background behind the circle is irrelevant.\n                                 The orange background and the white icon have a contrast ration greater than 3:1,\n                                 which passes.\n                              \nThe graphical object is the white phone icon.\n\n\n\n\n\nA magnet can be understood by the \"U\" shape with lighter colored tips. Therefore to\n                                 understand this graphic you should be able to discern the overall shape (against the\n                                 background) and the lighter colored tips (against the rest of the U shape and the\n                                 background).\n                              \nThe graphical objects are the \"U\" shape (by outline or by the solid red color #D0021B),\n                                 and each tip of the magnet.\n                              \n\n\n\n\n\nThe symbol to show a currency (the £) going down can be understood with recognition\n                                 of the shape (down arrow) and the currency symbol (pound icon with the shape which\n                                 is part of the graphic). To understand this graphic you need to discern the arrow\n                                 shape against the white background, and the pound icon against the yellow background\n                                 (#F5A623).\n                              \nThe graphical objects are the shape and the currency symbol.\n\n\n\n\n\n\n\nIn order to understand the graph you need to discern the lines and shapes for each\n                                 condition. To perceive the values of each line along the chart you need to discern\n                                 the grey lines marking the graduated 100 value increments.\n                              \nThe graphical objects are the lines in the graph, including the background lines for\n                                 the values, and the colored lines with shapes.\n                              \nThe lines should have 3:1 contrast against their background, but as there is little\n                                 overlap with other lines they do not need to contrast with each other or the graduated\n                                 lines. (See the testing principles below.)\n                              \n\n\n\n\n\nTo understand the pie chart you have to discern each slice of the pie chart from the\n                                 others.\n                              \nThe graphical objects are the slices of the pie (chart).\nNote: If the values of the pie chart slices were also presented in a conforming manner\n                                 (see the Pie Charts example for details), the slices would not be required for understanding.\n                              \n\n\n\n\nTaking the magnet image above as an example, the process for establishing the graphical\n                     object(s) is to:\n                  \n\nAssess what part of each image is needed to understand what it represents.\n                        \t\t\t\t\t\tThe magnet's \"U\" shape can be conveyed by the outline or by the red background\n                        (either is acceptable). The white tips are also important (otherwise it would be a\n                        horseshoe), which needs to contrast with the red background.\n                     \nAssume that the user could only see those aspects. Do they contrast with the adjacent\n                        colors?\n                        \t\t\t\t\t\tThe outline of the magnet contrasts with the surrounding text (black/white),\n                        and the red and white between the tips also has sufficient contrast.\n                     \n\nDue to the strong contrast of the red and white, it would also be possible to only\n                     put the outline around the white tips of the magnet and it would still conform.\n                  \n\nRequired for Understanding\nThe term \"required for understanding\" is used in the Success Criterion as many graphics\n                        do not need to meet the contrast requirements. If a person needs to perceive a graphic,\n                        or part of a graphic (a graphical object) in order to understand the content it should\n                        have sufficient contrast. However, that is not a requirement when:\n                     \n\n\nA graphic with text embedded or overlayed conveys the same information, such as labels\n                              and values on a chart.\n                           \n\nNote\nText within a graphic must meet 1.4.3 Contrast (Minimum).\n                              \n\n\n The graphic is for aesthetic purposes that does not require the user to see or understand\n                           it to understand the content or use the functionality.\n                        \n The information is available in another form, such as in a table that follows the\n                           graph, which becomes visible when a \"Long Description\" button is pressed.\n                        \n The graphic is part of a logo or brand name (which is considered \"essential\" to its\n                           presentation).\n                        \n\n\n\nGradients\nGradients can reduce the apparent contrast between areas, and make it more difficult\n                        to test. The general principles is to identify the graphical object(s) required for\n                        understanding, and take the central color of that area. If you remove the adjacent\n                        color which does not have sufficient contrast, can you still identify and understand\n                        the graphical object?\n                     \n\n\nFigure 17 Removing the background which does not have sufficient contrast highlights that the\n                           graphical object (the \"i\") is not then understandable.\n                        \n\n\n\nDynamic Examples\nSome graphics may have interactions that either vary the contrast, or display the\n                        information as text when you mouseover/tap/focus each graphical object. In order for\n                        someone to discern the graphics exist at all, the unfocused default version must already\n                        have sufficiently contrasting colors or text. For the area that receives focus, information\n                        can then be made available dynamically as pop-up text, or be foregrounded dynamically\n                        by increasing the contrast.\n                     \n\n\n\nFigure 18 A dynamic chart where the current 'slice' is hovered or focused, which activates the\n                           associated text display of the values and highlights the series\n                        \n\n\n\nInfographics\nInfographics can mean any graphic conveying data, such as a chart or diagram. On the\n                        web it is often used to indicate a large graphic with lots of statements, pictures,\n                        charts or other ways of conveying data. In the context of graphics contrast, each\n                        item within such an infographic should be treated as a set of graphical objects, regardless\n                        of whether it is in one file or separate files.\n                     \nInfographics often fail to meet several WCAG level AA criteria including:\n\n1.1.1 Non-text Content\n1.4.1 Use of Color\n1.4.3 (Text) Contrast\n1.4.5 Images of Text\n\nAn infographic can use text which meets the other criteria to minimise the number\n                        of graphical objects required for understanding. For example, using text with sufficient\n                        contrast to provide the values in a chart. A long description would also be sufficient\n                        because then the infograph is not relied upon for understanding.\n                     \n\n\nSymbolic text characters\nWhen text characters are used as symbols – used for their visual appearance, rather\n                        than expressing something in human language – they fall under the definition of non-text content.\n                     \n\n\nFigure 19 Even though the two buttons use text characters — an uppercase X, often used for \"Close\" buttons, and a > character, to act as a right-pointing arrow — they count as non-text characters/symbols.\n                           Their contrast ratio of just above 3:1 passes this Success Criterion.\n                        \n\n\n\nEssential Exception\nGraphical objects do not have to meet the contrast requirements when \"a particular\n                        presentation of graphics is essential to the information being conveyed\". The Essential\n                        exception is intended to apply when there is no way of presenting the graphic with\n                        sufficient contrast without undermining the meaning. For example:\n                     \n\nLogotypes and flags: The brand logo of an organization or product is the representation of that organization\n                           and therefore exempt. Flags may not be identifiable if the colors are changed to have\n                           sufficient contrast.\n                        \nSensory: There is no requirement to change pictures of real life scenes such as photos of\n                           people or scenery.\n                        \nRepresenting other things: If you cannot represent the graphic in any other way, it is essential. Examples\n                           include: \n                           \t\t\t\t\t\t\t\n                           \nScreenshots to demonstrate how a website appeared.\nDiagrams of medical information that use the colors found in biology (example medical schematic from Wikipedia).\n                              \ncolor gradients that represent a measurement, such as heat maps (example heatmap from Wikipedia).\n                              \n\n\n\n\n\nTesting Principles\nA summary of the high-level process for finding and assessing non-text graphics on\n                        a web page:\n                     \n\nIdentify each user-interface component (link, button, form control) on the page and:\n                           \t\t\t\t\t\t\t\n                           \nIdentify the visual (non-text) indicators of the component that are required to identify\n                                 that a control exists, and indicate the current state. In the default (on page load)\n                                 state, test the contrast ratio against the adjacent colors.\n                              \nTest those contrast indicators in each state.\n\n\nIdentify each graphic on the page that includes information required for understanding\n                           the content (i.e. excluding graphics which have visible text for the same information,\n                           or are decorative) and:\n                           \t\t\t\t\t\t\t\n                           \nCheck the contrast of the graphical object against its adjacent colors;\nIf there are multiple colors and/or a gradient, choose the least contrasting area\n                                 to test;\n                              \nIf it passes, move to the next graphical object;\nIf the least-contrasting area is less than 3:1, assume that area is invisible, is\n                                 the graphical object still understandable?\n                              \nIf there is enough of the graphical object to understand, it passes, else fail.\n\n\n\nThe techniques below each have testing criteria, and the related criteria for Focus visible (2.4.7), Use of color (1.4.1), and Contrast minimum also have techniques.\n                     \n\n\n",
      "examples": "\nExamples\n\nStatus icons on an application's dashboard (without associated text) have a 3:1 minimum\n                     contrast ratio.\n                  \nA text input has a dark border around the white editable area.\nA graph uses a light background and ensures that the colors for each line have a 3:1\n                     contrast ratio against the background.\n                  \n\n\nPie Charts\nPie charts make a good case study for the graphical objects part of this success criterion,\n                     the following pie charts are intended to convey the proportion of market share each\n                     browser has. Please Note: The actual figures are made up, these are not actual market\n                     shares. \n                  \n\n\nFigure 20 \n                        \t\t\t\t\t\t\n                        Fail: The pie chart has labels for each slice (so passes 1.4.1 Use of Color), but in order\n                           to understand the proportions of the slices you must discern the edges of the slices\n                           (the graphical objects conveying essential information), and the contrast between\n                           the slices is not  3:1 or greater. \n                        \n\n\n\n\nFigure 21 \n                        \t\t\t\t\t\t\n                        Not applicable: The pie chart has visible labels and values that convey equivalent information to the graphical objects (the pie slices).\n                           \n                        \n\n\n\n\nFigure 22 \n                        \t\t\t\t\t\t\n                        Pass: The pie chart has visible labels, and sufficient contrast around and between the\n                           slices of the pie chart (the graphical objects). A darker border has been added around\n                           the yellow slice in order to achieve the contrast level.\n                        \n\n\n\n\nInfographics\n\n\nFigure 23 \n                        \t\t\t\t\t\t\n                        Fail: Discerning the circles is required to understand the size of network and discerning\n                           the icons in each circle is required to identify which network it shows.\n                        \n\n\nThe graphical objects are the circles (measured against the background) and the icons\n                     in each circle (measured against the circle's background).\n                  \n\n\nFigure 24 \n                        \t\t\t\t\t\t\n                        Pass: The circles have contrasting borders and the icons are a contrasting dark color against\n                           the light circle backgrounds.\n                        \n\n\nThere are many possible solutions to ensuring contrast, the example shows the use\n                     of borders. Other techniques are to use darker colors for the circle backgrounds,\n                     or to add text labels & values for each item.\n                  \n\n"
    }
  },
  "wcag:1.4.12": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion (SC) is to ensure that when people override author\n                  specified text spacing to improve their reading experience, content is still readable\n                  and operable. Each of the requirements stipulated in the SC's four bullets helps ensure\n                  text styling can be adapted by the user to suit their needs.\n               \nThe specified metrics set a minimum baseline. The values in between the author's metrics\n                  and the metrics specified in this SC should not have loss of content or functionality.\n               \nThis SC focuses on the adaptability of content to an increase in spacing between lines,\n                  words, letters, and paragraphs. Any combination of these may assist a user with effectively\n                  reading text. As well, ensuring that content correctly adapts when users override\n                  author settings for spacing also significantly increases the likelihood other style\n                  preferences can be set by the user. For example, a user may need to change to a wider\n                  font family than the author has set in order to effectively read text. \n               \n\nAuthor Responsibility \nThis SC does not dictate that authors must set all their content to the specified\n                     metrics, nor does the SC intend to imply that all users will adjust the specified\n                     metrics. Rather, it specifies that should a user choose to set any of these metrics\n                     they can do so without any loss of content or functionality. The author requirement\n                     is both to not interfere with a user's ability to override the author settings, and\n                     to ensure that content thus modified does not break content in the manners shown in\n                     figures 1 through 3 in Effects of Not Allowing for Spacing Override.\n                  \nIn some human languages and scripts, some of the metrics specified by the SC are inapplicable.\n                     For example, languages such as Japanese do not use spacing following paragraphs, meaning\n                     that users are unlikely to make any paragraph spacing changes in practice. The exception\n                     in this SC allows authors to ignore text style properties which are inapplicable to\n                     the combination of language and script being used.\n                  \nIt is beneficial for users if authors use any locally available guidance for improving\n                     readability in the local language or writing system. If the user chooses to go beyond\n                     the metrics specified, any resulting loss of content or functionality is the user's\n                     responsibility.\n                  \nFurther, this SC is not concerned with how users change the line height and spacing metrics. It does not require that content\n                     implement its own mechanisms to allow users to do this. It is not a failure of the\n                     content if a user agent or platform does not provide a way for users to do this. Content\n                     does not fail this SC if the method chosen by the user - for instance, the use of\n                     an extension or bookmarklet - fails to correctly set the line height and spacing text\n                     properties on the content (provided that the content is not actively and purposely\n                     preventing the properties from being added).\n                  \n\nApplicability\nIf the markup-based technologies being used are capable of overriding text to the\n                        Success Criterion's metrics, then this SC is applicable. For instance Cascading Style\n                        Sheet/HTML technologies are quite able to allow for the specified spacing metrics.\n                        Plugin technologies would need to have a built-in ability to modify styles to the\n                        specified metrics. Currently, this SC does not apply to PDF as it is not implemented\n                        using markup.\n                     \nExamples of text that are typically not affected by style properties and not expected to adapt are:\n                     \n\nVideo captions embedded directly into the video frames and not provided as an associated\n                           caption file\n                        \nImages of text\n\nFor this SC, canvas implementations of text are considered to be images of text.\n                     \n\n\nUse of ellipses\nThere may be regions of a page where text containers cannot expand due to design constraints\n                        (such as a maximum width for the left navigation or table column headers). A common\n                        convention if text exceeds its space is to replace truncated text with an ellipsis.\n                        Where ellipses appear as a result of modifying text style properties, the page can\n                        still meet the Text Spacing requirements, so long as the content is still available.\n                        For example:\n                     \n\na mechanism is provided to reveal the truncated text on the page (for instance, the\n                           text appears on focus or on activation)\n                        \nwhere the ellipsis is part of a section of \n                           content which includes a link, the truncated text is revealed on the linked page\n                        \n\nWhere text is not truncated but it is when text is spaced, if there is no mechanism\n                        to show the truncated text, it fails this Success Criterion.\n                     \n\n\n\nUser Responsibility\nThe ability to read and derive meaning from the overridden spacing rests with the\n                     user. The user may choose to exceed the spacing adjustments in the SC. If the increased\n                     spacing causes loss of content or functionality, the user will adjust or return to\n                     the author’s original spacing or spacing within the bounds of the SC. Regardless,\n                     the user needs the flexibility to adjust spacing within the bounds set in the SC without\n                     loss of content or functionality. Such changes may be achieved via user stylesheet,\n                     bookmarklet, extension, or application.\n                  \n\n\nEffects of Not Allowing for Spacing Override\nThe following images show some types of  failures when authors do not take into consideration\n                     that users may override spacing to the metrics specified in this Success Criterion.\n                  \n\nText Cut Off\nThe bottom portion of the words \"Your Needs\" is cut off in a heading making that text\n                        unreadable in Figure 1. It should read  \"We Provide a Mobile Application Service to\n                        Meet Your Needs.\"\n                     \n\nFigure 1 Vertical text cut off is a failure.\n\n\nIn Figure 2 the last portion of text is cut off in 3 side-by-side  headings. The 1st\n                        heading should read \"A cog in the wheel.\" But it reads \"A cog in the whe\". Only half\n                        of the second \"e\" is visible and the letter \"l\" is completely missing. The  2nd heading\n                        should read \"A penny for your thoughts\". But it reads \"A penny for your\". The 3rd\n                        should read \"Back to the drawing board.\" But it reads \"Back to the drawi\". \n                     \n\nFigure 2 Horizontal text cut off is a failure.\n\n\n\n\nText Overlap\nIn Figure 3 the last 3 words \"Groups and Programs\" of the heading \"Technologists Seeking\n                        Input from Groups and Programs\" overlap the following sentence. That sentence should\n                        read, \"You are invited to share  ideas and areas of interest related to the  integration\n                        of technology from a group or program perspective.\" But the words \"You are invited\n                        to share  ideas\" are obscured and unreadable.\n                     \n\nFigure 3 Overlapping text is a failure.\n\n\n\n\n",
      "examples": "\nExamples\nWhen spacing is being overridden to the SC's metrics:\n\nText fits within the bounds of its containing box without being cut off.\nText fits within the bounds of its containing box without overlapping other boxes.\n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nImportant letter spacing in style attributes is wide enough\nImportant line height in style attributes is wide enough\nImportant word spacing in style attributes is wide enough\n\n"
    }
  },
  "wcag:1.4.13": {
    "understanding": {
      "intent": "\nIntent\nAdditional content that appears and disappears in coordination with keyboard focus\n                  or pointer hover often leads to accessibility issues. Reasons for such issues include:\n               \n\nthe user may not have intended to trigger the interaction\nthe user may not know new content has appeared\nthe new content may intefere with a user's ability to do a task\n\nExamples of such interactions can include custom tooltips, sub-menus and other nonmodal\n                  popups which display on hover and focus. The intent of this success criterion is to\n                  ensure that authors who cause additional content to appear and disappear in this manner\n                  must design the interaction in such a way that users can:\n               \n\nperceive the additional content AND\ndismiss it without disrupting their page experience.\n\nThere are usually more predictable and accessible means of adding content to the page,\n                  which authors are recommended to employ. If an author does choose to make additional content appear and disappear in coordination with hover\n                  and keyboard focus, this success criterion specifies three conditions that must be\n                  met:\n               \n\ndismissable\nhoverable\npersistent\n\nEach of these is discussed in a separate section.\n\nDismissable\nThe intent of this condition is to ensure that the additional content does not interfere\n                     with viewing or operating the page's original content. When magnified, the portion\n                     of the page visible in the viewport can be significantly reduced. Mouse users frequently\n                     move the pointer to pan the magnified viewport and display another portion of the\n                     screen. However, almost the entire portion of the page visible in this restricted\n                     viewport may trigger the additional content, making it difficult for a user to pan\n                     without re-triggering the content. A keyboard means of dismissing the additional content\n                     provides a workaround.\n                  \nAlternatively, low vision users who can only navigate via the keyboard do not want\n                     the small area of their magnified viewport cluttered with hover text. They need a\n                     keyboard method of dismissing something that is obscuring the current focal area.\n                  \nTwo methods may be used to satisfy this condition and prevent such interference:\n\nPosition the additional content so that it does not obscure any other content including\n                        the trigger, with the exception of white space and purely decorative content, such\n                        as a background graphic which provides no information.\n                     \nProvide a mechanism to easily dismiss the additional content, such as by pressing\n                        Escape.\n                     \n\nFor most triggers of relatively small size, it is desirable for both methods to be\n                     implemented.  If the trigger is large, noticing the additional content may be of concern\n                     if it appears away from the trigger.  In those cases, only the second method may be\n                     appropriate.\n                  \nThe success criterion allows for input error messages to persist as there are cases\n                     that require attention, explicit confirmation or remedial action.\n                  \n\n\nHoverable\nThe intent of this condition is to ensure that additional content which may appear\n                     on hover of a target may also be hovered itself.  Content which appears on hover can\n                     be difficult or impossible to perceive if a user is required to keep their mouse pointer\n                     over the trigger. When the added content is large, magnified views may mean that the\n                     user needs to scroll or pan to completely view it, which is impossible unless the\n                     user is able to move their pointer off the trigger without the additional content\n                     disappearing.\n                  \nAnother common situation is when large pointers have been selected via platform settings\n                     or assistive technology. Here, the pointer can obscure a significant area of the additional\n                     content. A technique to view the content fully in both situations is to move the mouse\n                     pointer directly from the trigger onto the new content.  This capability also offers\n                     significant advantages for users who utilize screen reader feedback on mouse interactions.\n                     This condition generally implies that the additional content overlaps or is positioned\n                     adjacent to the target.\n                  \n\n\nPersistent\nThe intent of this condition is to ensure users have adequate time to perceive the\n                     additional content after it becomes visible.  Users with disabilities may require\n                     more time for many reasons, such as to change magnification, move the pointer, or\n                     simply to bring the new content into their visual field.  Once it appears, the content\n                     should remain visible until:\n                  \n\nThe user removes hover or focus from the trigger and the additional content, consistent\n                        with the typical user experience;\n                     \nThe user dismisses the additional content via the mechanism provided to satisfy the\n                        Dismissable condition; or\n                     \nThe information conveyed by the additional content becomes invalid, such as a 'busy'\n                        message that is no longer valid.\n                     \n\n\n\nAdditional Notes\n\nThis criterion does not attempt to solve such issues when the appearance of the additional\n                        content is completely controlled by the user agent. A prominent example is the common\n                        behavior of browsers to display the title  attribute in HTML as a small tooltip.\n                     \nModal dialogs are out of scope for this criterion because they must take keyboard\n                        focus  and thus should not appear on hover or focus.  Refer to Success Criterion 3.2.1, On Focus.\n                     \nContent which can be triggered via pointer hover should also be able to be triggered\n                        by keyboard focus.  Refer to Success Criterion 2.1.1, Keyboard.\n                     \n\n\n",
      "examples": "\nExamples\n\nExample 1: Dismissable Tooltip\n\n\n\nFigure 1 A tooltip is displayed below a LVTF button on hover so as not to obscure the button\n                        itself. It does however obscure content below the button (the next red button, called\n                        ~comment-zoom-content). To meet the Dismissible requirement, a user can press the\n                        Escape key to clear the tooltip without moving the mouse, as demonstrated in the second\n                        image.\n                     \n\n\n\nFigure 2 The button's tooltip also appears on focus and can be removed with the Escape key.\n                        The screen shot shows the same LVTF button with focus, but the tooltip has been dismissed\n                        and is no longer visible.\n                     \n\n\n\nExample 2: Hoverable Tooltip\n\n\n\nFigure 3 A button's tooltip is displayed directly below it on mouse hover which can easily\n                        be obscured by a large pointer.  The tooltip itself is able to be hovered so the mouse\n                        pointer can be moved down to its bottom edge in order to view the tooltip text.\n                     \n\n\n"
    }
  },
  "wcag:2.1.1": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that, wherever possible, content\n                  can be operated through a keyboard or keyboard interface (so an alternate keyboard\n                  can be used). When content can be operated through a keyboard or alternate keyboard,\n                  it is operable by people with no vision (who cannot use devices such as mice that\n                  require eye-hand coordination) as well as by people who must use alternate keyboards\n                  or input devices that act as keyboard emulators. Keyboard emulators include speech\n                  input software, sip-and-puff software, on-screen keyboards, scanning software and\n                  a variety of assistive technologies and alternate keyboards. Individuals with low\n                  vision also may have trouble tracking a pointer and find the use of software much\n                  easier (or only possible) if they can control it from the keyboard.\n                  \n               \nExamples of \"specific timings for individual keystrokes\" include situations where\n                  a user would be required to repeat or execute multiple keystrokes within a short period\n                  of time or where a key must be held down for an extended period before the keystroke\n                  is registered. \n                  \n                  \n               \nThe phrase \"except where the underlying function requires input that depends on the\n                  path of the user's movement and not just the endpoints\" is included to separate those\n                  things that cannot reasonably be controlled from a keyboard.\n                  \n               \nMost actions carried out by a pointing device can also be done from the keyboard (for\n                  example, clicking, selecting, moving, sizing). However, there is a small class of\n                  input that is done with a pointing device that cannot be done from the keyboard in\n                  any known fashion without requiring an inordinate number of keystrokes. Free hand\n                  drawing, or watercolor painting require path dependent input. Drawing straight lines,\n                  regular geometric shapes, re-sizing windows and dragging objects to a location (when\n                  the path to that location is not relevant) do not require path dependent input.\n                  \n                  \n               \nThe use of MouseKeys would not satisfy this Success Criterion because it is not a\n                  keyboard equivalent to the application; it is a mouse equivalent (i.e., it looks like\n                  a mouse to the application).\n                  \n               \nIt is assumed that the design of user input features takes into account that operating\n                  system keyboard accessibility features may be in use. For example, modifier key locking\n                  may be turned on. Content continues to function in such an environment, not sending\n                  events that would collide with the modifier key lock to produce unexpected results.\n                  \n                  \n               \n\nNote\n\nPlatforms and user agents usually have conventions for how web content or\n                        applications are controlled with a keyboard interface. If content does not follow\n                        the platform/user agent conventions it may be difficult to use, as users will need\n                        to learn different interaction methods. As a best practice, content\n                        should follow the platform/user agent conventions. However, deviating from these\n                        conventions does not fail the normative requirement of this Success Criterion.\n                     \n\n                        For instance, buttons that have focus can generally be activated using both the\n                        Enter key and the Space bar. If a custom button control\n                        in a web application instead only reacts to Enter\n                        (or even a completely custom key or key combination), this still\n                        satisfies the requirements of this Success Criterion.\n                        \n                     \n\n\n\nNote\n\nThis Success Criterion does not require that every visible control that can be activated\n                        using a mouse or touch screen must also be focusable and actionable using the keyboard.\n                        The normative requirement is only that there must be a way for keyboard interface\n                        users to perform\n                        the same, or comparable, actions and to operate the content. Generally, the easiest\n                        way\n                        to achieve this is to provide controls that can be operated with all possible input\n                        devices;\n                        however, if a web application implements a separate mode of operation for keyboard\n                        interface users,\n                        it will not fail the Success Criterion.\n                        \n                     \n\n\n",
      "examples": "\nExamples\n\nExample 1: A drawing Program\nA drawing program allows users to create, size, position and rotate objects from the\n                     keyboard.\n                  \nExample 2: A drag and Drop Feature\nAn application that uses drag and drop also supports \"cut\" and \"paste\" or form controls\n                     to move objects.\n                  \nExample 3: Moving between and connecting discrete points\nA connect-the-dots program allows the user to move between dots on a screen and use\n                     the spacebar to connect the current dot to the previous one.\n                  \nExample 4: Exception - Painting Program\nA watercolor painting program passes as an exception because the brush strokes vary\n                     depending on the speed and duration of the movements.\n                  \nExample 5: Exception - Model helicopter flight training simulator\nA model helicopter flight training simulator passes as an exception because the nature\n                     of the simulator is to teach real-time behavior of a model helicopter.\n                  \nExample 6: A PDA with an optional keyboard\nA PDA device that is usually operated via a stylus has an optional keyboard that can\n                     be attached.  The keyboard allows full Web browsing in standard fashion.  The Web\n                     content is operable because it was designed to work with keyboard-only access.\n                  \nExample 7: Simple search form with pointer-operable submit button\nA search form includes a text input field followed by a submit button. The submit\n                     button itself\n                     has been coded so that it does not receive focus, and can only be activated using a pointer input.\n                     However, since keyboard users can submit the search by pressing Enter in the text input\n                     after typing their search terms, the form passes this Success Criterion.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nIframe with interactive elements is not excluded from tab-order\nScrollable content can be reached with sequential focus navigation\n\n"
    }
  },
  "wcag:2.1.2": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that that content does not \"trap\"\n                  keyboard focus within subsections of content on a Web page. This is a common problem\n                  when multiple formats are combined within a page and rendered using plug-ins or embedded\n                  applications.\n                  \n               \nThere may be times when the functionality of the Web page restricts the focus to a\n                  subsection of the content, as long as the user knows how to leave that state and \"untrap\"\n                  the focus.\n                  \n               \n",
      "examples": "\nExamples\n\nA calendar widget\nA calendar widget allows users to add, remove or update items in their calendar using\n                     the keyboard. The controls in the widget are part of the tab order within the Web\n                     page, allowing users to tab through the controls in the widget as well as to any links\n                     or controls that follow.\n                  \nA puzzle applet\nOnce a user tabs into an applet, further tabs and other keystrokes are handled by\n                     the applet. Instructions describing the keystroke used to exit the applet are provided\n                     prior to the applet as well as within the applet itself.\n                  \nA modal dialog box\nA Web application brings up a dialog box. At the bottom of the dialog are two buttons,\n                     Cancel and OK. When the dialog has been opened, focus is trapped within the dialog;\n                     tabbing from the last control in the dialog takes focus to the first control in the\n                     dialog. The dialog is dismissed by activating the Cancel button or the OK button.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nFocusable element has no keyboard trap\n\n"
    }
  },
  "wcag:2.1.4": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to reduce accidental activation of keyboard\n                  shortcuts. Character key shortcuts work well for many keyboard users, but are inappropriate\n                  and frustrating for speech input users — whose means of input is strings of letters\n                  — and for keyboard users who are prone to accidentally hit keys.\n                  To rectify this issue, authors need to allow users to turn off or reconfigure shortcuts\n                  that are made up of only character keys.\n                  \n               \nNote that this success criterion doesn't affect components such as listboxes and drop-down\n                  menus. Although these components contain values (words) that may be selected by one\n                  or more character keys, the shortcuts are only active when the components have focus.\n                  Other components such as menus may be accessed or opened with a single non-character\n                  shortcut (e.g., Alt or Alt+F) before pressing a single character key to select an\n                  item. This makes the full path to invoking a menu a two-step shortcut that includes\n                  a non-printable key. Accesskeys are also not affected because they include modifier keys.\n               \nSpeech Input users generally work in a single mode where they can use a mix of dictation\n                  and speech commands. This works well because the user knows to pause before and after\n                  commands, and commands are usually at least two words long. So, for instance, a user\n                  might say a bit of dictation, such as \"the small boat\", then pause, and say a command\n                  to delete that dictation, such as \"Delete Line\". In contrast, if the user were to\n                  say the two phrases together without a pause, the whole phrase would come out as dictation\n                  (i.e., \"the small boat delete line\"). Although speech input programs often include\n                  modes that listen only for dictation or only for commands, most speech users use the\n                  all-encompassing mode all the time because it is a much more efficient workflow. It\n                  could decrease command efficiency significantly if users were to change to command\n                  mode and back before and after issuing each command.\n               \nSpeech users can also speak most keyboard commands (e.g., \"press Control Foxtrot\")\n                  without any problems. If the website or app is keyboard enabled, the speech user can\n                  also write a native speech macro that calls the keyboard command, such as \"This Print\"\n                  to carry out Ctrl+P.\n               \nSingle-key shortcuts are the exception. While using single letter keys as controls\n                  might be appropriate and efficient for many keyboard users, single-key shortcuts are\n                  disastrous for speech users. The reason for this is that when only a single key is\n                  used to trip a command, a spoken word can become a barrage of single-key commands\n                  if the cursor focus happens to be in the wrong place.\n               \nFor example, a speech-input user named Kim has her cursor focus in the main window\n                  of a web mail application that uses common keyboard shortcuts to navigate (\"k\"), archive\n                  (\"y\") and mute messages (\"m\"). A coworker named Mike enters her office and says \"Hey\n                  Kim\" and her microphone picks that up. The Y of \"hey\" archives the current message.\n                  K in \"Kim\" moves down one conversation and M mutes a message or thread. And, if Kim\n                  looks up and says \"Hey Mike\" without remembering to turn off the microphone, the same\n                  three things happen in a different sequence.\n               \nA user interacting with a webpage or web app that doesn't use single-character shortcuts\n                  doesn't have this problem. Inadvertent strings of characters from the speech application\n                  are not interpreted as shortcuts if a modifier key is required. A speech user filling\n                  in a text input form may find that a phrase that is accidentally picked up by the\n                  speech microphone results in stray text being entered into the field, but that is\n                  easily seen and undone. The Resources section of this page contains links to videos\n                  demonstrating these types of issues.\n               \n",
      "examples": "\nExamples\n\nDisable Shortcuts\nA mechanism is provided to allow users to disable character-key shortcuts. The character\n                     key shortcuts are not the only way to carry out these commands. A speech user disables\n                     the shortcuts and can prevent words that are picked up by the microphone from triggering\n                     single-key shortcuts.\n                  \n\n\nAlternate Control\nA keyboard-only user is in a long issues thread. While reading the thread she accidentally\n                     hits the S key, which moves focus to the search bar at the top of the document. This\n                     causes her to lose her place and her train of thought. However, a mechanism is provided\n                     to allow users to change character-key shortcuts. She changes the shortcut to include\n                     another key so she can avoid future interruptions.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nNo keyboard shortcut uses only printable characters\n\n"
    }
  },
  "wcag:2.2.1": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to reduce accidental activation of keyboard\n                  shortcuts. Character key shortcuts work well for many keyboard users, but are inappropriate\n                  and frustrating for speech input users — whose means of input is strings of letters\n                  — and for keyboard users who are prone to accidentally hit keys.\n                  To rectify this issue, authors need to allow users to turn off or reconfigure shortcuts\n                  that are made up of only character keys.\n                  \n               \nNote that this success criterion doesn't affect components such as listboxes and drop-down\n                  menus. Although these components contain values (words) that may be selected by one\n                  or more character keys, the shortcuts are only active when the components have focus.\n                  Other components such as menus may be accessed or opened with a single non-character\n                  shortcut (e.g., Alt or Alt+F) before pressing a single character key to select an\n                  item. This makes the full path to invoking a menu a two-step shortcut that includes\n                  a non-printable key. Accesskeys are also not affected because they include modifier keys.\n               \nSpeech Input users generally work in a single mode where they can use a mix of dictation\n                  and speech commands. This works well because the user knows to pause before and after\n                  commands, and commands are usually at least two words long. So, for instance, a user\n                  might say a bit of dictation, such as \"the small boat\", then pause, and say a command\n                  to delete that dictation, such as \"Delete Line\". In contrast, if the user were to\n                  say the two phrases together without a pause, the whole phrase would come out as dictation\n                  (i.e., \"the small boat delete line\"). Although speech input programs often include\n                  modes that listen only for dictation or only for commands, most speech users use the\n                  all-encompassing mode all the time because it is a much more efficient workflow. It\n                  could decrease command efficiency significantly if users were to change to command\n                  mode and back before and after issuing each command.\n               \nSpeech users can also speak most keyboard commands (e.g., \"press Control Foxtrot\")\n                  without any problems. If the website or app is keyboard enabled, the speech user can\n                  also write a native speech macro that calls the keyboard command, such as \"This Print\"\n                  to carry out Ctrl+P.\n               \nSingle-key shortcuts are the exception. While using single letter keys as controls\n                  might be appropriate and efficient for many keyboard users, single-key shortcuts are\n                  disastrous for speech users. The reason for this is that when only a single key is\n                  used to trip a command, a spoken word can become a barrage of single-key commands\n                  if the cursor focus happens to be in the wrong place.\n               \nFor example, a speech-input user named Kim has her cursor focus in the main window\n                  of a web mail application that uses common keyboard shortcuts to navigate (\"k\"), archive\n                  (\"y\") and mute messages (\"m\"). A coworker named Mike enters her office and says \"Hey\n                  Kim\" and her microphone picks that up. The Y of \"hey\" archives the current message.\n                  K in \"Kim\" moves down one conversation and M mutes a message or thread. And, if Kim\n                  looks up and says \"Hey Mike\" without remembering to turn off the microphone, the same\n                  three things happen in a different sequence.\n               \nA user interacting with a webpage or web app that doesn't use single-character shortcuts\n                  doesn't have this problem. Inadvertent strings of characters from the speech application\n                  are not interpreted as shortcuts if a modifier key is required. A speech user filling\n                  in a text input form may find that a phrase that is accidentally picked up by the\n                  speech microphone results in stray text being entered into the field, but that is\n                  easily seen and undone. The Resources section of this page contains links to videos\n                  demonstrating these types of issues.\n               \n",
      "examples": "\nExamples\n\nDisable Shortcuts\nA mechanism is provided to allow users to disable character-key shortcuts. The character\n                     key shortcuts are not the only way to carry out these commands. A speech user disables\n                     the shortcuts and can prevent words that are picked up by the microphone from triggering\n                     single-key shortcuts.\n                  \n\n\nAlternate Control\nA keyboard-only user is in a long issues thread. While reading the thread she accidentally\n                     hits the S key, which moves focus to the search bar at the top of the document. This\n                     causes her to lose her place and her train of thought. However, a mechanism is provided\n                     to allow users to change character-key shortcuts. She changes the shortcut to include\n                     another key so she can avoid future interruptions.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nNo keyboard shortcut uses only printable characters\n\n"
    }
  },
  "wcag:2.2.2": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to avoid distracting users during their interaction\n                  with a Web page.\n                  \n               \n\"Moving, blinking and scrolling\" refers to content in which the visible content conveys\n                  a sense of motion. Common examples include motion pictures, synchronized media presentations,\n                  animations, real-time games, and scrolling stock tickers. \"Auto-updating\" refers to\n                  content that updates or disappears based on a preset time interval. Common time-based\n                  content includes audio, automatically updated weather information, news, stock price\n                  updates, and auto-advancing presentations and messages. The requirements for moving,\n                  blinking and scrolling content and for auto-updating content are the same except that:\n                  \n               \n\nauthors have the option of providing the user with a means to control the frequency\n                     of updates when content is auto-updating and\n                     \n                  \nthere is no five second exception for auto-updating since it makes little sense to\n                     auto-update for a few seconds and then stop\n                     \n                  \n\nContent that moves or auto-updates can be a barrier to anyone who has trouble reading\n                  stationary text quickly as well as anyone who has trouble tracking moving objects.\n                  It can also cause problems for screen readers.\n                  \n               \nMoving content can also be a severe distraction for some people. Certain groups, particularly\n                  those with attention deficit disorders, find blinking content distracting, making\n                  it difficult for them to concentrate on other parts of the Web page. Five seconds\n                  was chosen because it is long enough to get a user's attention, but not so long that\n                  a user cannot wait out the distraction if necessary to use the page.\n                  \n               \nContent that is paused can either resume in real-time or continue playing from the\n                  point in the presentation where the user left off.\n                  \n               \n\n\nPausing and resuming where the user left off is best for users who want to pause to\n                        read content and works best when the content is not associated with a real-time event\n                        or status.\n                        \n                     \n\nNote\n\nSee \n                              2.2.1: Timing Adjustable for additional requirements related to time-limits for reading.\n                              \n                           \n\n\n\n\nPausing and jumping to current display (when pause is released) is better for information\n                        that is real-time or \"status\" in nature. For example, weather radar, a stock ticker,\n                        a traffic camera, or an auction timer, would present misleading information if a pause\n                        caused it to display old information when the content was restarted.\n                        \n                     \n\nNote\n\nHiding content would have the same result as pausing and jumping to current display\n                              (when pause is released).\n                              \n                           \n\n\n\n\nFor a mechanism to be considered \"a mechanism for the user to pause,\" it must provide\n                  the user with a means to pause that does not tie up the user or the focus so that\n                  the page cannot be used.  The word \"pause\" here is meant in the sense of a \"pause\n                  button\" although other mechanisms than a button can be used.   Having an animation\n                  stop only so long as a user has focus on it (where it restarts as soon as the user\n                  moves the focus away) would not be considered a \"mechanism for the user to pause\"\n                  because it makes the page unusable in the process and would not meet this SC.\n                  \n               \nIt is important to note that the terms \"blinking\" and \"flashing\" can sometimes refer\n                  to the same content.\n                  \n               \n\n\"Blinking\" refers to content that causes a distraction problem. Blinking can be allowed\n                     for a short time as long as it stops (or can be stopped)\n                     \n                  \n\"Flashing\" refers to content that can trigger a seizure (if it is more than 3 per\n                     second and large and bright enough). This cannot be allowed even for a second or it\n                     could cause a seizure. And turning the flash off is also not an option since the seizure\n                     could occur faster than most users could turn it off.\n                     \n                  \nBlinking usually does not occur at speeds of 3 per second or more, but it can. If\n                     blinking occurs faster than 3 per second, it would also be considered a flash.\n                     \n                  \n\n",
      "examples": "\nExamples\n\nAn essential animation can be paused without affecting the activity\nA Web site helps users understand 'how things work' through animations that demonstrate\n                     processes. Animations have \"pause\" and \"restart\" buttons.\n                  \nA stock ticker\nA stock ticker has \"pause\" and \"restart\" buttons. Pausing the ticker causes it to\n                     pause on the currently displayed stock. Restarting causes the ticker to resume from\n                     the stopped point but with a notice that the display is delayed. Since the intent\n                     of the stock ticker is usually to provide realtime information, there might also be\n                     a button that would advance the ticker to the most recently traded stock.\n                  \nA game is designed so that users take turns rather than competing in real-time\nOne party can pause the game without invalidating the competitive aspect of it.\nA Web advertisement\nAn advertisement blinks to get viewers attention but stops after 5 seconds\nA form prompt\nA form blinks an arrow near the submit button if a user finishes filling out the form\n                     but does not activate the submit button. The blinking stops after 5 seconds.\n                  \nAn animation\nAn animation runs in the upper portion of the page but has a \"freeze animation\" button\n                     near the bottom of the animation.\n                  \nA \"loading\" animation\nA preloader animation is shown on a page which requires a certain percentage of a\n                     large file to be downloaded before playback can begin. The animation is the only content\n                     on the page and instructs the user to please wait while the video loads. Because the\n                     moving content is not presented in parallel with other content, no mechanism to pause,\n                     stop or hide it needs to be provided, even though the animation may run for more than\n                     5 seconds for users with slower connections.\n                  \nA full-page advertisement\nA site requires that all users view a 15 second advertisement before they can access\n                     free content available from their site. Because viewing the advertisement is a requirement\n                     for all users and because it is not presented in parallel with other content, no mechanism\n                     to pause, stop or hide it needs to be provided.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nText content that changes automatically can be paused, stopped or hidden\n\n"
    }
  },
  "wcag:2.3.1": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to allow users to access the full content\n                  of a site without inducing seizures due to photosensitivity.\n                  \n               \nIndividuals who have photosensitive seizure disorders can have a seizure triggered\n                  by content that flashes at certain frequencies for more than a few flashes. People\n                  are even more sensitive to red flashing than to other colors, so a special test is\n                  provided for saturated red flashing. These guidelines were originally based on guidelines\n                  for\n                  the broadcasting industry as adapted for desktop monitors, where content is viewed\n                  from a closer distance (using a larger angle of vision).\n                  \n               \nFlashing can be caused by the display, the computer rendering the image or by the\n                  content being rendered. The author has no control of the first two. They can be addressed\n                  by the design and speed of the display and computer. The intent of this criterion\n                  is to ensure that flicker that violates the flash thresholds is not caused by the\n                  content itself. For example, the content could contain a video clip or animated image\n                  of a series of strobe flashes, or close-ups of rapid-fire explosions.\n                  \n                  \n               \nThis Success Criterion replaces a much more restrictive criterion in WCAG 1.0 that\n                  did not allow any flashing (even of a single pixel) within a broad frequency range\n                  (3 to 50 Hz). This Success Criterion is based on existing specifications in use in\n                  the UK and by others for television broadcast and has been adapted for computer display\n                  viewing. In WCAG 2.0, a 1024 x 768 screen was used as the reference screen resolution\n                  for the\n                  evaluation. The 341 x 256 pixel block represents a 10 degree viewport at a typical\n                  viewing distance. (The 10 degree field is taken from the original specifications and\n                  represents the central vision portion of the eye, where people are most susceptible\n                  to photo stimuli.)\n                  \n               \nWith the proliferation of devices of varying screen sizes (from small hand-helds to\n                  large living room displays), as well as the adoption of CSS pixels as a density-independent unit of measurement, the prior assessment criteria may seem\n                  outdated. However, an image of a consistent size uses up relatively the same percentage\n                  of a user's visual field on any device. On a large screen, the image takes up less\n                  size, but the large screen takes up a larger part of the visual field. On a mobile\n                  screen, the image may take up most or all of the screen; however, the mobile screen\n                  itself takes up a smaller portion of the user's visual field. So the same dimension\n                  of the flashing content, represented in CSS pixels can still provide a consistent\n                  means of assessment. Substituting CSS pixels for the original pixel block means that\n                  the combined area of flashing becomes 341 x 256 CSS pixels, or a flashing area of\n                  87,296 CSS pixels.\n               \nContent should be analyzed at the largest scale at which a user may view the content,\n                  and at the standard zoom level of the user agent. For example, with a video that may\n                  play in an area of a web page and also at full screen, the video should be analyzed\n                  for risks at full screen.\n               \nWhere video content is provided in color spaces other than sRGB, the version provided\n                  with the highest dynamic range should be tested. In such cases the industry standard\n                  definition of a general flash is a change in luminance of 20 cd/m2 or more where the\n                  darker image is below 160 cd/m2. (ITU-R BT.1702.) This is applicable for standard dynamic range (SDR) and high dynamic range (HDR)\n                  content. For HDR content when the darker state is 160 cd/m2 or more, a general flash\n                  is one where the Michelson contrast is 1/17 or greater — where the Michelson contrast\n                  is calculated as (LHigh - LLow) / (LHigh + LLow), and where LHigh and LLow are the\n                  luminance of the high and low luminance states, respectively.\n               \nFor short clips that might be looped (such as GIF animations), the content should\n                  be analyzed while looping. \n               \n\nNote\nThe specification cannot account for the actual viewing distance that a person chooses.\n                     Users that are closer to their screens than the idealized viewing distance will be\n                     affected by flashing areas that normatively pass. The same problem applies to users\n                     who rely on zoom or screen magnification. Conversely, users who are further away from\n                     the screen than the idealized distance should be able to tolerate flashing areas that\n                     are larger than the threshold.\n                  \n\nThe combined area of flashes occurring concurrently and contiguously means the total\n                  area that is actually flashing at the same time. It is calculated by adding up the\n                  contiguous area that is flashing simultaneously within any 10 degree angle of view.\n                  \n               \n\nNote\n\nThe terms \"blinking\" and \"flashing\" can sometimes refer to the same content.\n\n\"Blinking\" refers to content that causes a distraction problem. Blinking can be allowed\n                           for a short time as long as it stops (or can be stopped)\n                           \n                        \n\"Flashing\" refers to content that can trigger a seizure (if it is more than 3 per\n                           second and large and bright enough). This cannot be allowed even for a second or it\n                           could cause a seizure. And turning the flash off is also not an option since the seizure\n                           could occur faster than most users could turn it off.\n                           \n                        \nBlinking usually does not occur at speeds of 3 per second or more, but it can. If\n                           blinking occurs faster than 3 per second, it would also be considered a flash.\n                           \n                        \n\n\n\n\nNote\n\nThe new (in WCAG 2.2) working definition in the field for \"pair of opposing transitions involving a saturated red\" is a pair of opposing transitions where, one transition is either to or from a state\n                        with a value R/(R + G + B) that is greater than or equal to 0.8, and the difference\n                        between states is more than 0.2 (unitless) in the CIE 1976 UCS chromaticity diagram.\n                        [ISO 9241-391] \n                     \nThe chromaticity difference is calculated as:\n\nSQRT( (u'1 - u'2)^2 + (v'1 - v'2)^2 )\n\nwhere u'1 and v'1 are chromaticity coordinates of State 1 and u'2 and v'2 are chromaticity\n                        coordinates of State 2. The 1976 UCS chromaticity coordinates of u' and v' are calculated\n                        as:\n                     \n\nu' = 4 * X / (X + 15 * Y + 3 * Z)\nv' = 9 * Y / (X + 15 * Y + 3 * Z)\n\nwhere X, Y, and Z are the tristimulus values of a color in the CIE XYZ colorspace,\n                        which can be calculated as:\n                     \n\nX = 0.4124564 * R + 0.3575761 * G + 0.1804375 * B\nY = 0.2126729 * R + 0.7151522 * G + 0.0721750 * B\nZ = 0.0193339 * R + 0.1191920 * G + 0.9503041 * B\n\nwhere R, G, & B are values that range from 0-1 as specified in “relative luminance”\n                        definition. \n                     \n\n\n",
      "examples": "\nExamples\n\n\n                     A Web site has video of muzzle flash of machine gun fire, but limits the size of the\n                     flashing image to a small portion of the screen below the flash threshold size.\n                     \n                     \n                     \n                  \nA movie with a scene involving very bright lightning flashes is edited so that the\n                     lightning only flashes three times in any one second period. \n                     \n                     \n                     \n                  \n\n"
    }
  },
  "wcag:2.4.1": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to allow people who navigate sequentially\n                  through content more direct access to the primary content of the Web page. Web pages\n                  and applications often have content that appears on other pages or screens. Examples\n                  of repeated blocks of content include but are not limited to navigation links, header\n                  content, and advertising frames. Small repeated sections such as individual words,\n                  phrases or single links are not considered blocks for the purposes of this provision.\n                  \n               \nUsers who navigate sequentially through content will generally have to navigate through\n                  repeated content on each page. This is in contrast to a sighted user's ability to\n                  ignore\n                  the repeated material either by focusing on the center of the screen (where main content\n                  usually appears) or a mouse user's ability to select a link with a single mouse click\n                  rather than encountering every link or form control that comes before the item they\n                  want.\n                  \n               \nIt is not the intent of this Success Criterion to require authors to provide methods\n                  that are redundant to functionality provided by the user agent. Most web browsers\n                  provide keyboard shortcuts to move the user focus to the top of the page, so if a\n                  set of navigation links is provided at the bottom of a web page providing a \"skip\"\n                  link may be unnecessary.\n                  \n               \n\nNote\n\nAlthough this Success Criterion deals with blocks of content that are repeated on\n                        multiple pages, we also strongly promote structural markup on individual pages as\n                        per Success Criteria 1.3.1.\n                        \n                        \n                     \n\n\nAlthough the success criterion does not specifically use the term “within a set of\n                  web pages”, the concept of the pages belonging to a set is implied.  An author would\n                  not be expected to avoid any possible duplication of content in any two pages that\n                  are not in some way related to each other, and are not \"Web pages that share a common\n                  purpose and that are created by the same author, group or organization” (the definition\n                  of set of web pages).\n                  \n               \n\nNote\n\nEven for web pages that are not in a set, if a web page has blocks of text that are\n                        repeated within the page it may be helpful (but not required) to provide a means to\n                        skip over them.\n                        \n                     \n\n\n",
      "examples": "\nExamples\n\nA news organization's home page contains a main story in the middle of the page, surrounded\n                     by many blocks and sidebars for advertising, searching, and other services. There\n                     is a link at the top of the page that jumps to the main story. Without using this\n                     link, a keyboard user needs to tab through approximately 40 links to reach the main\n                     story; the screen reader user has to listen to 200 words; and the screen magnifier\n                     user must search around for the location of the main body.\n                     \n                  \nAn e-commerce website includes a long list of filters prior to the search results\n                     listing. \n                     A link above the list enables users to skip the filters and get to the product results\n                     quickly.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nBypass Blocks of Repeated Content\n\n"
    }
  },
  "wcag:2.4.2": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to help users find content and orient themselves\n                  within it by ensuring that each Web page has a descriptive title. Titles identify\n                  the current location without requiring users to read or interpret page content. When\n                  titles appear in site maps or lists of search results, users can more quickly identify\n                  the content they need. User agents make the title of the page easily available to\n                  the user for identifying the page. For instance, a user agent may display the page\n                  title in the  window title bar or as the name of the tab containing the page.\n                  \n               \nIn cases where the page is a document or a web application, the name of the document\n                  or web application would be sufficient to describe the purpose of the page. Note that\n                  it is not required to use the name of the document or web application; other things\n                  may also describe the purpose or the topic of the page. \n                  \n               \nIn cases such as Single Page Applications (SPAs), where various distinct pages/views\n                  are\n                  all nominally served from the same URI and the content of the page is changed dynamically,\n                  the title of the page should also be changed dynamically to reflect the content or\n                  topic of\n                  the current view.\n                  \n               \n\nSuccess Criteria 2.4.4 and \n                  2.4.9 deal with the purpose of links, many of which are links to web pages. Here also,\n                  the name of a document or web application being linked to would be sufficient to describe\n                  the purpose of the link. Having the link and the title agree, or be very similar,\n                  is good practice and provides continuity between the link 'clicked on' and the web\n                  page that the user lands on. \n                  \n               \n",
      "examples": "\nExamples\n\nAn HTML Web page\nThe descriptive title of an HTML Web page is marked up with the <title> element so\n                     that it will be displayed in the title bar of the user agent.\n                  \nA document collection\n\nThe title of Understanding WCAG 2.1 \n                        is \"Understanding WCAG 2.1.\"\n                     \n\nThe introduction page has the title \"Introduction to Understanding WCAG 2.0.\"\nMajor sections of the document are pages titled \"Understanding Guideline X\" and \"Understanding\n                           Success Criterion X.\" \n                           \n                        \nAppendix A has the title \"Glossary.\"\nAppendix B has the title \"Acknowledgements.\"\nAppendix C has the title \"References.\"\n\n\nA Web application\nA banking application lets users inspect their bank accounts, view past statements,\n                     and perform transactions. The Web application dynamically generates titles for each\n                     Web page, e.g., \"Bank XYZ, accounts for Alex Smith\" \"Bank XYZ, December 2005 statement\n                     for Account 1234-5678\".\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nHTML page has non-empty title\nHTML page title is descriptive\n\n"
    }
  },
  "wcag:2.4.3": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that when users navigate sequentially\n                  through content, they encounter information in an order that is consistent with the\n                  meaning of the content and can be operated from the keyboard. This reduces confusion\n                  by letting users form a consistent mental model of the content. There may be different\n                  orders that reflect logical relationships in the content. For example, moving through\n                  components in a table one row at a time or one column at a time both reflect the logical\n                  relationships in the content. Either order may satisfy this Success Criterion.\n                  \n               \nThe way that sequential navigation order is determined in Web content is defined by\n                  the technology of the content. For example, simple HTML defines sequential navigation\n                  via the notion of tabbing order. Dynamic HTML may modify the navigation sequence using\n                  scripting along with the addition of a tabindex attribute to allow focus to additional\n                  elements. If no scripting or tabindex attributes are used, the navigation order is\n                  the order that components appear in the content stream. (See HTML 4.01 Specification,\n                  section 17.11, \"Giving focus to an element\").\n                  \n               \nAn example of keyboard navigation that is not the sequential navigation addressed\n                  by this Success Criterion is using arrow key navigation to traverse a tree component.\n                  The user can use the up and down arrow keys to move from tree node to tree node. Pressing\n                  the right arrow key may expand a node, then using the down arrow key, will move into\n                  the newly expanded nodes. This navigation sequence follows the expected sequence for\n                  a tree control - as additional items get expanded or collapsed, they are added or\n                  removed from the navigation sequence.\n                  \n               \nThe focus order may not be identical to the programmatically determined reading order\n                  (see Success Criterion 1.3.2) as long as the user can still understand and operate\n                  the Web page. Since there may be several possible logical reading orders for the content,\n                  the focus order may match any of them. However, when the order of a particular presentation\n                  differs from the programmatically determined reading order, users of one of these\n                  presentations may find it difficult to understand or operate the Web page. Authors\n                  should carefully consider all these users as they design their Web pages.\n                  \n               \nFor example, a screen reader user interacts with the programmatically determined reading\n                  order, while a sighted keyboard user interacts with the visual presentation of the\n                  Web page. Care should be taken so that the focus order makes sense to both of these\n                  sets of users and does not appear to either of them to jump around randomly. \n                  \n               \nFor clarity:\n\nFocusable components need to receive focus in an order that preserves meaning and\n                     operability only when navigation sequences affect meaning and operability.\n                     \n                  \nIn those cases where it is required, there may be more than one order that will preserve\n                     meaning and operability.\n                     \n                  \nIf there is more than one order that preserves meaning and operability, only one of\n                     them needs to be provided.\n                     \n                  \n\n",
      "examples": "\nExamples\n\nOn a web page that contains a tree of interactive controls, the user can use the up\n                     and down arrow keys to move from tree node to tree node. Pressing the right arrow\n                     key expands a node, then using the down arrow key moves into the newly expanded nodes.\n                     \n                  \nA Web page implements modeless dialogs via scripting. When the trigger button is activated,\n                     a dialog opens. The interactive elements in the dialog are inserted in the focus order\n                     immediately after the button. When the dialog is open, the focus order goes from the\n                     button to the elements of the dialog, then to the interactive element following the\n                     button. When the dialog is closed, the focus order goes from the button to the following\n                     element.\n                     \n                  \nA Web page implements modal dialogs via scripting. When the trigger button is activated,\n                     a dialog opens and focus is set within the dialog. As\n                     long as the dialog is open, focus is limited to the elements of the dialog. When the\n                     dialog is dismissed, focus returns to the button or the element following the button.\n                     \n                  \n\nAn HTML Web page is created with the left hand navigation occurring in the HTML after\n                        the main body content, and styled with CSS to appear on the left hand side of the\n                        page. This is done to allow focus to move to the main body content first without requiring\n                        tabIndex attributes or JavaScript.\n                        \n                     \n\nNote\n\nWhile this example passes the Success Criterion, it is not necessarily true that all\n                              CSS positioning would. More complex positioning examples may or may not preserve meaning\n                              and operability\n                              \n                           \n\n\n\n\nThe following example fails to meet the Success Criterion:\n                     \nA company's Web site includes a form that collects marketing data and allows users\n                        to subscribe to several newsletters published by the company. The section of the form\n                        for collecting marketing data includes fields such as name, street address, city,\n                        state or province, and postal code. Another section of the form includes several checkboxes\n                        so that users can indicate newsletters they want to receive. However, the tab order\n                        for the form skips between fields in different sections of the form, so that focus\n                        moves from the name field to a checkbox, then to the street address, then to another\n                        checkbox.\n                     \n\n\n"
    }
  },
  "wcag:2.4.4": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to help users understand the purpose of each\n                  link so they can decide whether they want to follow the link. Whenever possible, provide\n                  link text that identifies the purpose of the link without needing additional context.\n                  Assistive technology has the ability to provide users with a list of links that are\n                  on the Web page. Link text that is as meaningful as possible will aid users who want\n                  to choose from this list of links. Meaningful link text also helps those who wish\n                  to tab from link to link. Meaningful links help users choose which links to follow\n                  without requiring complicated strategies to understand the page.\n                  \n               \nThe text of, or associated with, the link is intended to describe the purpose of the\n                  link. In cases where the link takes one to a document or a web application, the name\n                  of the document or web application would be sufficient to describe the purpose of\n                  the link (which is to take you to the document or web application). Note that it is\n                  not required to use the name of the document or web application; other things may\n                  also describe the purpose of the link. \n                  \n               \n\nSuccess Criterion 2.4.2 deals with the titles of pages. Here also, the name of a document or web application\n                  being presented on the page would be sufficient to describe the purpose of the page.\n                  Having the link and the title agree, or be very similar, is good practice and provides\n                  continuity between the link 'clicked on' and the web page that the user lands on.\n                  \n                  \n               \nIn some situations, authors may want to provide part of the description of the link\n                  in logically related text that provides the context for the link. In this case the\n                  user should be able to identify the purpose of the link without moving focus from\n                  the link. In other words, they can arrive on a link and find out more about it without\n                  losing their place. This can be achieved by putting the description of the link in\n                  the same sentence, paragraph, list item, or table cell as the link, or in the table\n                  header cell for a link in a data table, because these are directly associated with\n                  the link itself. Alternatively, authors may choose to use an ARIA technique to associate\n                  additional\n                  text on the page with the link.\n                  \n               \nThis context will be most usable if it precedes the link. (For instance, if you must\n                  use ambiguous link text, it is better to put it at the end of the sentence that describes\n                  its destination, rather than putting the ambiguous phrase at the beginning of the\n                  sentence.) If the description follows the link, there can be confusion and difficulty\n                  for screen reader users who are reading through the page in order (top to bottom).\n                  \n                  \n               \nIt is a best practice for links with the same destination to have consistent text\n                  (and this is a requirement per \n                  Success Criterion 3.2.4 for pages in a set). It is also a best practice for links with different purposes\n                  and destinations to have different link text.\n                  \n               \nA best practice for links to conforming alternate versions is to ensure that the link text to the conforming alternate version indicates in\n                  link text that the page it leads to represents the more accessible version. This information\n                  may also be provided in text - the goal is to ensure that the end user knows what\n                  the purpose of the link is. \n               \nThe Success Criterion includes an exception for links for which the purpose of the\n                  link cannot be determined from the information on the Web page. In this situation,\n                  the person with the disability is not at a disadvantage; there is no additional context\n                  available to understand the link purpose. However, whatever amount of context is available\n                  on the Web page that can be used to interpret the purpose of the link must be made\n                  available in the link text or programmatically associated with the link to satisfy\n                  the Success Criterion.\n                  \n               \n\nNote\n\nThere may be situations where the purpose of the link is is supposed to be unknown\n                        or obscured. For instance, a game may have links identified only as door #1, door\n                        #2, and door #3. This link text would be sufficient because the purpose of the links\n                        is to create suspense for all users.\n                        \n                     \n\n\nSee also \n                  2.4.9: Link Purpose (Link Only).\n                  \n               \n",
      "examples": "\nExamples\n\nA link contains text that gives a description of the information at that URI\nA page contains the sentence \"There was much bloodshed during the Medieval period\n                     of history.\" Where \"Medieval period of history\" is a link.\n                  \nA link is preceded by a text description of the information at that URI\nA page contains the sentence \"Learn more about the Government of Ireland's Commission\n                     on Electronic Voting at Go Vote!\" where \"Go Vote!\" is a link.\n                  \nBoth an icon and text are included in the same link\nAn icon of a voting machine and the text \"Government of Ireland's Commission of Electronic\n                     Voting\" are combined to make a single link. The alt text for the icon is null, since\n                     the purpose of the link is already described by the text of the link next to the icon.\n                  \nA list of book titles\nA list of books is available in three formats: HTML, PDF, and mp3 (a recording of\n                     a person reading the book). To avoid hearing the title of each book three times (once\n                     for each format), the first link for each book is the title of the book, the second\n                     link says \"PDF\" and the third says, \"mp3.\"\n                  \nNews article summaries\nA Web page contains a collection of news articles. The main page lists the first few\n                     sentences of each article, followed by a \"Read more\" link. A screen reader command\n                     to read the current paragraph provides the context to interpret the purpose of the\n                     link.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nLink has non-empty accessible name\nLink in context is descriptive\nLinks with identical accessible names and same context serve equivalent purpose\n\n"
    }
  },
  "wcag:2.4.5": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to make it possible for users to locate content\n                  in a manner that best meets their needs. Users may find one technique easier or more\n                  comprehensible to use than another.\n                  \n               \nEven small sites should provide users some means of orientation. For a three or four\n                  page site, with all pages linked from the home page, it may be sufficient simply to\n                  provide links from and to the home page where the links on the home page can also\n                  serve as a site map.\n                  \n               \n",
      "examples": "\nExamples\n\nA search mechanism\nA large food processing company provides a site containing recipes created using its\n                     products. The site provides a search mechanism to search for recipes using a particular\n                     ingredient. In addition, it provides a list box that lists several categories of foods.\n                     A user may type \"soup\" in to the search engine or may select \"soup\" from the list\n                     box to go to a page with a list of recipes made from the company's soup products.\n                  \nLinks between Web pages\nA local hair salon has created a Web site to promote its services. The site contains\n                     only five Web pages. There are links on each Web page to sequentially move forward\n                     or backward through the Web pages. In addition, each Web page contains a list of links\n                     to reach each of the other Web pages.\n                  \nWhere content is a result of a process or task - Funds transfer confirmation\nAn on-line banking site allows fund transfer between accounts via the Web. There is\n                     no other way to locate the confirmation of fund transfer until the account owner completes\n                     the transfer.\n                  \nWhere content is a result of a process or task - Search engine results\nA search engine provides the search results based on user input. There is no other\n                     way to locate the search results except to perform the search process itself.\n                  \n\n"
    }
  },
  "wcag:2.4.6": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to help users understand what information\n                  is contained in Web pages and how that information is organized. When headings are\n                  clear and descriptive, users can find the information they seek more easily, and they\n                  can understand the relationships between different parts of the content more easily.\n                  Descriptive labels help users identify specific components within the content.\n                  \n               \nLabels and headings do not need to be lengthy. A word, or even a single character,\n                  may suffice if it provides an appropriate cue to finding and navigating content.\n                  \n               \nThis Success Criterion does not require headings or labels. This Success Criterion\n                  requires that if headings or labels are provided, they be descriptive. This Success\n                  Criterion also\n                  does not require that content acting as a heading or label be correctly marked up\n                  or\n                  identified – this aspect is covered separately by\n                  1.3.1: Info and Relationships. It is possible for content\n                  to pass this Success Criterion (providing descriptive content that acts as headings\n                  or labels) while failing\n                  Success Criterion 1.3.1 (if the headings or labels aren't correctly marked up/identified).\n                  Conversely,\n                  it is also possible for content to pass Success Criterion 1.3.1 (with headings or\n                  labels correctly\n                  marked up or identified), while failing this Success Criterion (if those headings\n                  or labels are not\n                  sufficiently clear or descriptive).\n                  \n               \nFurther, in the case of labels, this Success Criterion does not take into consideration\n                  whether or not\n                  alternative methods of providing an accessible name for form controls and inputs has\n                  been\n                  used – this aspect is covered separately by 4.1.2: Name, Role and Value. It is possible\n                  for controls and inputs to have an appropriate accessible name (e.g. using aria-label=\"…\")\n                  and therefore pass Success Criterion 4.1.2, but to still fail this Success Criterion\n                  (if the label is not\n                  sufficiently clear or descriptive).\n                  \n               \nThis success criterion does not require the use of labels; however, it does require\n                  that if labels are present, they must be sufficiently clear or descriptive. Please\n                  see 3.3.2: Labels or Instructions for more information on the use of labels.\n                  \n               \n",
      "examples": "\nExamples\n\nA news site\nThe home page of a news site lists the headlines for the top stories of the hour.\n                     Under each heading are the first 35 words of the story and a link to the full article.\n                     Each headline gives a clear idea of the article's subject.\n                  \nA guide on how to write well\nA guide on writing contains the following section titles: How To Write Well,\n                     Cut Out Useless Words, Identify Unnecessary Words, and so on.\n                     The section headings are clear and concise and the structure of the information is\n                     reflected in the structure of the headings.\n                  \nConsistent headings in different articles\nA Web site contains papers from a conference. Submissions to the conference are required\n                     to have the following organization: Summary, Introduction, [other sections unique\n                     to this article], Conclusion, Author Biography, Glossary, and Bibliography.\n                     The title of each Web page clearly identifies the article it contains, creating a\n                     useful balance\n                     between the uniqueness of the articles and the consistency of the section headings.\n                  \nA form asking for the name of the user\nA form asks for the name of the user. It consists of two input fields to ask for the\n                     first\n                     and last name. The first field is labeled First name, the second is labeled Last name.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nForm field label is descriptive\nHeading is descriptive\n\n"
    }
  },
  "wcag:2.4.7": {
    "understanding": {
      "intent": "\nIntent\nThe purpose of this success criterion is to help a person know which element has the\n                  keyboard focus.\n                  \n               \n“Mode of operation” accounts for user agents which may not always show a focus indicator,\n                  or only show the focus indicator when the keyboard is used. User agents may optimise\n                  when the focus indicator is shown, such as only showing it when a keyboard is used.\n                  Authors are responsible for providing at least one mode of operation where the focus\n                  is visible. In most cases there is only one mode of operation so this success criterion\n                  applies. The focus indicator must not be time limited, when the keyboard focus is\n                  shown it must remain.\n               \nNote that a keyboard focus indicator can take different forms. New in WCAG 22:  While Focus Visible does not specify what that form is, 2.4.13 Focus Appearance (Level AAA) provides guidance on creating a consistent, visible indicator.\n",
      "examples": "\nExamples\n\nWhen text fields receive focus, a vertical bar is displayed in the field, indicating\n                     that the user can insert text, OR all of the text is highlighted, indicating that\n                     the user can type over the text.\n                     \n                  \nWhen a user interface control receives focus, a visible border is displayed around\n                     it.\n                     \n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nElement in sequential focus order has visible focus\n\n"
    }
  },
  "wcag:2.4.11": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that the item receiving keyboard\n                  focus is always partially visible in the user's viewport. For sighted people who rely\n                  on a keyboard (or on a device that operates through the keyboard interface, such as\n                  a switch or voice input), knowing the current point of focus is critical. The component\n                  with focus signals the interaction point on the page. Where users cannot see the item\n                  with focus, they may not know how to proceed, or may even think the system has become\n                  unresponsive.\n               \nIn recognition of the complex responsive designs common today, this AA criterion allows\n                  for the component receiving focus to be partially obscured by other author-created content. A partly obscured component can still be\n                  very visible, although the more of it that is obscured, the less easy it is to see.\n                  For that reason, authors should attempt to design interactions to reduce the degree\n                  and frequency with which the item receiving focus is partly obscured. For best visibility,\n                  none of the component receiving focus should be obscured. This preferred outcome is covered\n                  by the AAA criterion Focus Not Obscured (Enhanced).\n               \nTypical types of content that can overlap focused items are sticky footers, sticky\n                  headers, and non-modal dialogs. As a user tabs through the page, these layers of content\n                  can obscure the item receiving focus, along with its focus indicator.\n               \nA notification implemented as sticky content, such as a cookie banner, will fail this\n                  Success Criterion if it entirely obscures a component receiving focus. Ways of passing\n                  include making the banner modal so the user has to dismiss the banner before navigating\n                  through the page, or using scroll padding so the banner does not overlap other content. Notifications that do not require user\n                  action could also meet this criterion by closing on loss of focus.\n               \nAnother form of obscuring can occur where light boxes or other semi-opaque effects\n                  overlap the item with focus. While less than 100 percent opacity is not causing the\n                  component to be entirely obscured, such semi-opaque overlaps may cause a failure of 1.4.11 Non-text Contrast. When a focus indicator can be covered by a semi-opaque component, the ability of\n                  the focus indicator to pass 1.4.11 should be evaluated (and pass) while the focus\n                  indicator is under the semi-opaque component. The intention in both situations is\n                  that the component receiving focus should never be obscured to the point a user cannot\n                  tell which item has focus.\n               \n\nUser-movable content\nThis SC contains a note regarding content that can be repositioned. If users can move\n                     content regions, then they can potentially position the movable content such that\n                     it obscures other content that may receive focus. In such a case, the author is only\n                     responsible for ensuring that the movable content in its initial position does not obscure the item receiving focus.\n                  \nThis note is intended to accommodate a common interaction in complex applications\n                     such as authoring tools, where the main editing region (also called a canvas) can\n                     be enhanced by displaying toolbars or other panels, which can be repositioned around\n                     the canvas. It is possible to design such toolbars so they do not obscure focus. Authors are encouraged to do so, as well as pursue techniques which\n                     ensure equitable keyboard use of such toolbars. However, in recognition of the complexities\n                     involved in responsive design as well as in supporting the ability to transform the\n                     text size and spacing of content, only the starting position of such movable panels\n                     is assessed.\n                  \n\n\n\nUser-opened content\nThis SC contains a note regarding content that is opened or disclosed by the user.\n                     One example of such content is a menu button opened by a user that opens a list of\n                     choices over pre-existing content on the screen. Such content can obscure other information\n                     on the screen, but it does not obscure an item receiving keyboard focus, because the\n                     new content doesn't stay open through a change of focus. However, authors may create\n                     user-opened content that is intentionally designed to persist until closed by the\n                     user, such as a chat window. Such persistent content has the potential to fail Focus\n                     Not Obscured (Minimum). Various types are described in this section. All can be designed\n                     so that they pass this Success Criterion.\n                  \nThis section only applies to content that the user actively discloses. Content pre-positioned\n                     by the author (such as a sticky footer), or content that appears without direct user\n                     initiation, such as system warnings, must not prevent the item receiving focus from\n                     being immediately visible in the viewport. Also, this note is not intended to apply\n                     to disclosures that are by convention non-persistent. As discussed in the following\n                     sub-section, an open dropdown that does not close when no longer focused is not following\n                     this convention.\n                  \n\nNon-persistent opened information\nA number of components on the web open (or disclose) additional content (on activation\n                        or on focus) intended for immediate user interaction or information. This new content\n                        is often on top of other content, obscuring it. Examples of such components are menu\n                        items, select element items, combobox lists (and other dropdown items), date picker\n                        calendars, and tooltips. The common trait of all these components is that they are\n                        not expected to persist after being acted on or once they are no longer the primary\n                        point of user interaction. Such non-persistent disclosures do not fail this SC since\n                        they do not obscure the item with focus. However, if an author allows such components\n                        to persist after the user has 1) activated one of the opened items or 2) moved the focus away\n                        from the triggering item and the additional content, it is at risk of failing this\n                        criterion by obscuring the item with focus.\n                     \n\n\n\nUser openable, persistent disclosures\nSome disclosure patterns provide a mechanism for the user to open additional content\n                        that remains open until intentionally closed by the user. Accordions are a simple\n                        example of such a pattern. Chatbots and expandable side navigation are more complex\n                        examples. All of these patterns can be implemented so they are not at risk of failing\n                        this SC. Some possible approaches are:\n                     \n\nWhen the additional content appears, it displaces existing content. An accordion is an example of this. When an accordion is opened, the disclosed content\n                           shifts existing content further down the page. Since the new content does not obscure\n                           existing content, it cannot obscure the item with focus.\n                           \n                           \n\nWhen the additional content appears, existing content reflows. The popout sidebar on the WCAG standard is an example of this pattern. When the side menu is activated, it opens a new section\n                           of information along the left side of the page. The main content area is reduced horizontally\n                           to accommodate the new content, and the existing content reflows to fit in the thinner\n                           space. As a result, there is no overlapping content between the two sections; the\n                           item receiving focus, whether in the left navigation or in the main content, will\n                           not be obscured by the other section.\n                           \n                           \n\n\nWhen the additional content is opened, it takes focus and the tab ring is constrained\n                              to the new content until it is dismissed. This modality is somewhat like a dialog, in that a user cannot navigate beyond the\n                           opened content by keyboard without dismissing it first (typically by pressing Esc).\n                           However, unlike in a modal dialog, in some implementations a pointer user may be able\n                           to interact with content outside the opened section without dismissing it. Since this\n                           pattern potentially creates an inequitable experience between keyboard and pointer\n                           users, it should be used cautiously. That said, it does prevent the opened content\n                           from obscuring the keyboard focus in the main content, and thus should pass this SC.\n                           This is described and demonstrated in a short video in the Knowbility article in the\n                           reference section, under the section heading Keep keyboard focus in the slide-out navigation until it's closed.\n                           \n                           \n\n\nThe disclosure expands into an area of the page containing no other content. Many pages are designed with wide margins, providing significant white space into\n                           which new content can be opened. Many chatbots and toast notifications are designed\n                           to 'slide up' into the right unpopulated side of a page. Where authors are careful\n                           to ensure content is not obscured at each breakpoint in a responsive design, no obscuring\n                           of other operable content need occur.\n                           \n                           \n\n\nWhen focus leaves the additional content, the additional content is automatically\n                              hidden or collapsed, or the content can be hidden or collapsed by use of a dedicated\n                              keyboard command (for example, the Escape key.) This is very similar to patterns discussed previously under Non-persistent opened\n                           information. A distinguishing factor can be that the user's last point of interaction\n                           in the disclosure is preserved (it persists) even though it may be hidden until a\n                           user returns. Some trees and left navigation patterns behave this way.\n                           \n                           \n\n\nIn recognition of more complex interfaces and user needs there is a note: Content opened by the user may obscure the component receiving focus. If the user can bring the item with focus into view using a method without having\n                        to navigate back to the user-opened content to dismiss it, this criterion would be\n                        passed. For example, keyboard actions that may allow the item with focus to be revealed\n                        include:\n                        \n                     \n\nusing the Escape key to dismiss the obscuring content;\n                        \nusing keys to scroll the content in the viewport to reveal the item with focus;\nissuing a key to move between overlays.\n\nFor example:\n\nA user opens a chat interface, which is a popover non-modal dialog. This results in\n                           some content of the underlying page being fully obscured. The user navigates away\n                           from the chat interface by use of the tab key, focusing onto a link that has been fully obscured by the dialog. The user presses\n                           the Escape key to close the chat interface, which un-obscures the link.\n                        \nA user expands a fixed-position page feedback component at the bottom of a Web page.\n                           They then use their keyboard to navigate to a link that's fully obscured by the expanded\n                           component and press the down arrow or space key on their keyboard to scroll the content on the page, un-obscuring the link.\n                        \nA user opens a web-based multi-user authoring application. An overlay appears displaying\n                           a list of people who have contributed to the document. The user tabs through the list\n                           of contributors and activates one of them. The application displays a new overlay,\n                           which obscures the first one, that displays that person's recent contributions. The\n                           user presses the F6 key to toggle the stacking order of the two overlays.\n                        \n\n\n\n\nModal dialogs\nA properly constructed modal dialog will always pass this SC. Even if it appears directly\n                     on top of an item with focus, the dialog takes focus on appearance, and thus the item\n                     receiving focus -- the dialog or one of its components -- is visible. A properly constructed\n                     modal maintains that focus and prevents interaction outside the modal until it is\n                     dismissed.\n                  \nA dialog-like overlay that does not take focus on appearance and does not either constrain\n                     interaction to the overlay or dismiss itself on loss of focus (thus allowing focus\n                     to exit into the content behind it) will be at risk of failing this SC, where it is\n                     positioned such that it can obscure other focusable items.\n                  \n\n",
      "examples": "\nExamples\n\nA page has a sticky footer (attached to the bottom of the viewport). When tabbing\n                     down the page the focused item is not completely visually obscured by the footer because\n                     content in the viewport scrolls up to always display the item with keyboard focus\n                     using scroll padding.\n                  \nA page has a full-width cookie approval dialog. The dialog is modal, preventing access\n                     to the other controls in the page until it has been dismissed. Focus is not obscured\n                     because the major portion of the cookie approval dialog remains on screen (until selections\n                     are made and submitted),  and so the major portion of the keyboard focus indicator\n                     remains visible.\n                  \nA notification is implemented as a sticky header and the keyboard focus is moved to\n                     the notification so at least part of the focus indicator is in view. The notification\n                     disappears when it loses focus so it does not obscure any other controls, and part\n                     of the prior keyboard focus indicator is visible.\n                  \n\n"
    }
  },
  "wcag:2.5.1": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that content can be controlled with\n                  a range of pointing devices, abilities, and assistive technologies. Some people  cannot\n                  perform gestures in a precise manner, or they may use a specialized or adapted input\n                  device such as a head pointer, eye-gaze system, or speech-controlled mouse emulator.\n                  Some pointing methods lack the capability or accuracy to perform multipoint or path-based\n                  gestures.\n               \nA path-based gesture involves an interaction where not just the endpoints matter, but how the pointer\n                  moves between these points.\n               \nIf the gesture is only recognised if the user moves in a (mostly) straight line from\n                  the start point to the end point, it is an example of a path-based gesture.\n               \n\n\nFigure 1 A path-based gesture where pointer movement is only allowed in a straight line from the start-point to\n                     the end-point. If the user strays from the straight directional path, the gesture\n                     is not recognised, has no effect, or is aborted.\n                  \n\nIf going through an intermediate point (usually near the start of the gesture) affects\n                  its meaning, then it is a path-based gesture. The user engages a pointer (starting point), carries out a movement that goes through\n                  at least one intermediate-point before disengaging the pointer (end point). The intermediate\n                  point defines the gesture as requiring a specific path, even if the complete path\n                  is not defined.\n               \n\n\nFigure 2 A path-based gesture involves starting a pointer movement that goes through at least one intermediate\n                     point before the end-point. The end-point may be a continuation, or allow for various\n                     movements.\n                  \n\nExamples of path-based gestures include swiping, sliders and carousels dependent on\n                  the direction of interaction, and other gestures which trace a prescribed path such\n                  as drawing a specific shape. Such paths may be drawn with a finger or stylus on a\n                  touchscreen, graphics tablet, or trackpad, or with a mouse, joystick, or similar pointer\n                  device.\n               \nDragging is a movement where the user picks up an object with a pointer (such as mouse\n                  cursor or a finger) and moves it to some other position. This movement from start\n                  point to end point does not require the user to follow any particular path or direction.\n                  Dragging is therefore not path-based. In contrast, a path-based pointer gesture requires\n                  the traversal of an intermediate point, which is a technical way of expressing that\n                  the directionality and possibly speed of the gesture communicates a particular command\n                  to the system. Dragging motions are covered in Success Criterion 2.5.7: Dragging.\n               \n\n\nFigure 3 A free-form gesture does not require any particular path before the end-point, only the start and (optionally)\n                     the end point matter. This is not path-based\n\n\nNote\nAny movement of a pointer could be difficult or impossible to use for someone who\n                     cannot perform precise movements, therefore alternative forms of interaction are always\n                     recommended. This success criterion is scoped to path-based gestures as it may be difficult or impossible to provide an alternative for free-form gestures.\n                  \n\nExamples of multipoint gestures include a two-finger pinch zoom, a split tap where one finger rests on the\n                  screen and a second finger taps, or a two- or three-finger tap or swipe. Users may\n                  find it difficult or impossible to accomplish these if they type and point with a\n                  single finger or stick.\n               \nAuthors must ensure that their content can be operated without multipoint or path-based\n                  gestures. Multipoint or path-based gestures can be used so long as the functionality\n                  can also be operated by another method, such as a tap, click, double tap, double click,\n                  long press, or click & hold. \n               \nThis Success Criterion applies to gestures in the author-provided content, not gestures\n                  defined by the operating system, user agent, or assistive technology. Examples of\n                  operating system gestures would be swiping down to see system notifications and gestures\n                  for built-in assistive technologies (AT). Examples of user agent-implemented gestures\n                  would be horizontal swiping implemented by browsers for navigating within the page\n                  history, or vertical swiping to scroll page content.\n               \nThere are times when a component requires a path-based gesture for touch screen devices\n                  but not with a mouse. Taking an example of a generic slider:\n               \n\nUsing a mouse: If the user clicks on the thumb control of the slider and moves vertically, the slider\n                     will respond by moving to the right or left, even if the movement is mostly upwards.\n                     There will be no page scrolling as a result of the vertical movement as long as they\n                     drag with focus on the slider. Therefore, the slider does not require a path-based\n                     gesture with mouse pointer.\n                  \nUsing a touch-screen: If the user puts their finger on the thumb control of the slider and moves upwards\n                     more than sideways, the slider may not respond because the browser takes control of\n                     the swipe and interprets it as a scroll, and will move the page up and down. Moving\n                     left or right on the slider thumb engages the slider and then the user can vary their\n                     vertical movement. This implementation has the 3-point requirement to work with a\n                     finger on a touch screen device so is a path-based gesture.\n                  \n\nAs touch screen devices can apply default gestures it is important to test with them\n                  if you are unsure whether a particular component does require a path-based gesture.\n               \nBrowsers on a touch screen device generally provide some default gestures that impact\n                  whether a path-based gesture is needed. For example, a web browser on a touch-screen\n                  devices might detect a vertical gesture and scroll the page. If a user places their\n                  finger on a slider thumb and moves up (to scroll down) that might not activate the\n                  slider (depending on implementation). If the user moves horizontally first then the\n                  slider could capture that gesture and ignore vertical movement, resulting in a path-based\n                  gesture. If you include touch-screen devices as accessibility supported then these\n                  types of interaction need testing with a touch screen as using a mouse in a similar\n                  way would not trigger the same browser behavior.\n               \nThis Success Criterion does not require all functionality to be available through\n                  pointing devices, but if it is available to pointer devices then it should not require\n                  path-based gestures. While content authors generally need to provide keyboard commands\n                  or other non-pointer mechanisms that perform actions equivalent to complex gestures\n                  (see Success Criterion 2.1.1 Keyboard), this is not sufficient to conform to this\n                  Success Criterion. That is because some users rely entirely on pointing devices, or\n                  find simple pointer inputs much easier to perform and understand than alternatives.\n                  For example, a user relying on a head-pointer would find clicking a control to be\n                  much more convenient than activating an on-screen keyboard to emulate a keyboard shortcut,\n                  and a person who has difficulty memorizing a series of keys (or gestures) may find\n                  it much easier to simply click on a labeled control. Therefore, if one or more pointer-based\n                  mechanisms are supported, then their benefits should be afforded to users through\n                  simple, single-point actions alone.\n               \nSingle pointer operations include taps and clicks, double-taps and double-clicks,\n                  long presses, swiping, dragging, and path-based gestures. Gestures such as \"pinch\n                  to zoom\" or two-finger swipes are multipoint gestures, as they require two or more pointer inputs - in this case, two fingers\n                  on a touchscreen.\n               \nAn exception is made for functionality that is inherently and necessarily based on\n                  complex paths or multipoint gestures. For example, entering your signature may be\n                  inherently path-based (although acknowledging something or confirming your identity\n                  need not be).\n               \nThis Success Criterion does not apply to gestures that involve dragging in any direction because only the start and end\n                  points matter in a dragging operation. However, such gestures do require fine motor\n                  control. Authors are encouraged to provide non-dragging methods, for instance, a drag\n                  and drop operation could also be achieved by selecting an item (with a tap or keyboard\n                  interaction) and then selecting its destination as a second step.\n               \n",
      "examples": "\nExamples\n\n\nA web site includes a map view that supports the pinch gesture to zoom into the map\n                        content. User interface controls offer the operation using plus and minus buttons\n                        to zoom in and out.\n                     \n\n\nA web site includes a map view that supports the pinch gesture to zoom into the map\n                        content. As an single-pointer alternative, the map also allows users to double-tap,\n                        hold, and then move the pointer up or down to zoom in or out.\n                     \n\n\nA news site has a horizontal content slider with hidden news teasers that can moved\n                        into the viewport via a fast horizontal swipe/flicking motion. It also offers forward\n                        and backward arrow buttons for single-point activation to navigate to adjacent slider\n                        content.\n                     \n\n\nA kanban widget with several vertical areas representing states in a defined process\n                        allows the user to right- or left-swipe elements to move them to an adjacent silo.\n                        The user can also accomplish this by selecting the element with a single tap or click,\n                        and then activating an arrow button to move the selected element.\n                     \n\n\nA custom slider requires movement in a strict left/right direction when operated by\n                        dragging the thumb control. Buttons on both sides of the slider increment and decrement\n                        the selected value and update the thumb position.\n                     \n\n\n"
    }
  },
  "wcag:2.5.2": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this success criterion is to make it easier for users to prevent accidental\n                  or erroneous pointer input. People with various disabilities can inadvertently initiate\n                  touch or mouse events with unwanted results. Each of the following subsections roughly\n                  aligns with the bullets of this Success Criterion, and outlines a means of allowing\n                  users to cancel pointer operations.\n               \n\nUp-Event activation or completion\nThe most accessible way to incorporate pointer cancellation is to make activation\n                     occur on the up-event.\n                  \nUp-event activation refers to the activation of a target when the pointer is released.\n                     In a touchscreen interaction, when the finger touches a target, the up-event activation\n                     only occurs when the finger is lifted while still being within the target boundary.\n                     Similarly in mouse interaction, the up-event occurs when the mouse button is released\n                     while the cursor is still within the boundary of the initial target set when the mouse\n                     button was pressed.\n                  \nAuthors can reduce the problem of users inadvertently triggering an action by using\n                     generic platform activation/click events that activate functionality on the up-event.\n                     For example, the click event in JavaScript triggers on release of the primary mouse button, and is an example\n                     of an implicit up-event. Despite its name, the click event is device-independent and also works for touch and keyboard interaction.\n                  \nThe preference for up-events is implicit in the Success Criterion wording of the first\n                     bullet: The down-event of the pointer is not used to execute any part of the function. Authors meet the first bullet by using only the up-event.\n                  \n\n\nUp-Event Abort or Undo\nWhere the interaction is equivalent to a simple \"click\", up-event activation has a\n                     built-in ability to cancel. There is a distinction between when someone touches a\n                     screen and when they remove their finger. Similarly, in mouse interaction, there is\n                     a difference between pressing and releasing the mouse button. When activation occurs\n                     only as the pointer is released, users have the opportunity to Abort (cancel) the\n                     activation. Users who have difficulty accurately using a mouse or touchscreen benefit\n                     greatly from this basic behaviour. They normally receive visual feedback when an item\n                     is pressed. If they discover they have selected the wrong item, they can cancel the\n                     action by moving their pointer or finger away from the target before releasing.\n                  \nFor more complex interactions, such as drag and drop, the down- and up-events may\n                     initiate and end a series of actions to complete a process. For example, with drag\n                     and drop, the item may be:\n                  \n\nselected with a press (down-event),\nmoved to a new location, while still being depressed, and\nreleased (up-event) to conclude the drop action.\n\nIn such a complex action, the need for an Abort or Undo function increases. Designers\n                     may elect to confirm the move through something like a confirmation dialog or an undo\n                     button, giving the user the ability to Undo the process just completed. Alternatively,\n                     the ability to Abort the action can be achieved if, before completing step 3, the\n                     user returns the selected item to its original location and concludes the process\n                     there. If other parts of the screen disallow a move, the user can conclude the drag\n                     and drop there, effectively nullifying the operation.\n                  \n\n\nUp Reversal\nIn other interactions, the down-event may trigger a behaviour which can be reversed\n                     when the up-event concludes. Examples of this include press-and-hold actions such\n                     as where a transient popup appears (or a video plays) when the user presses on an\n                     object (down-event), but the popup (or video) disappears as soon as the user releases\n                     the pointer (up-event). Since the up-event reverses the preceding down event, the\n                     user is returned to their prior point, and has effectively cancelled the operation.\n                  \n\n\nDown-Event\nCompleting the function on the down-event is only permitted when it is essential that\n                     the up-event not be used.\n                  \nThe most prevalent essential down-event activation occurs in keyboard emulation. On\n                     a physical keyboard, keys by default activate on the down-event -- a letter appears\n                     when the key is pressed. If a software keyboard emulator tried to override this expected\n                     behaviour by making letters appear when the key is released, the behaviour would be\n                     unexpected and would adversely affect expected interaction.\n                  \nNote that a keyboard has a built-in Backspace or Delete button, which effectively\n                     provides an Undo option. Undo is not a requirement of the down-event Essential exception;\n                     however, providing an easy way for users to undo any action is a recommended practice\n                     (and may be a functional necessity), even where it is not a requirement of this Success\n                     Criterion.\n                  \nOther examples where the timing of an activation is essential and requires the down-event\n                     would be:\n                  \n\nAn activity that emulates a physical on-press trigger, such as when playing an on-screen\n                        piano keyboard. Activation on the up-event would significantly alter the desired behaviour.\n                     \nA program for shooting skeets where waiting for the \"up\" event would invalidate the\n                        precise timing necessary for the activation.\n                     \n\n\n",
      "examples": "\nExamples\n\nFor interface elements that have a single tap or long press as input, the corresponding\n                     event is triggered when the finger is lifted inside that element.\n                  \nA drag-and-drop interface allows users to sort vertically stacked cards by picking\n                     up one card with the pointer (down-event), move it to a new position, and insert it\n                     at the new location when the pointer is released (up-event). Releasing the pointer\n                     outside the drop target area reverts the action, i.e., it moves the card back to the\n                     old position before the interaction started.\n                  \n\n"
    }
  },
  "wcag:2.5.3": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that the words which visually label\n                  a component are also the words associated with the component programmatically. This\n                  helps ensure that people with disabilities can rely on visible labels as a means to\n                  interact with the components.\n               \nMost controls are accompanied by a visible text label. Those same controls have a programmatic name, also known as the Accessible Name. Users typically have a much better experience if the words and characters in the\n                  visible label of a control match or are contained within the accessible name. When\n                  these match, speech-input users (i.e., users of speech recognition applications) can\n                  navigate by speaking the visible text labels of components, such as menus, links,\n                  and buttons, that appear on the screen. Sighted users who use text-to-speech (e.g.,\n                  screen readers) will also have a better experience if the text they hear matches the\n                  text they see on the screen.\n               \nNote that where a visible text label does not exist for a component, this Success\n                  Criterion does not apply to that component.\n               \nWhere text labels exist and are properly linked to the user interface components through\n                  established authoring practices, the label and name will normally match. When they\n                  don't match, speech-input users who attempt to use the visible text label as a means\n                  of navigation or selection (e.g., \"move to Password\") will be unsuccessful.  The speech-based\n                  navigation fails because the visible label spoken by the users does not match (or\n                  is not part of) the accessible name that is enabled as a speech-input command. In\n                  addition, when the accessible name is different from the visible label, it may function\n                  as a hidden command that can be accidentally activated by speech-input users.\n               \nMismatches between visible labels and programmatic names for controls are even more\n                  of an issue for speech-input and text-to-speech users who also have cognitive challenges.\n                  Mismatches create an extra cognitive load for speech-input users, who must remember\n                  to say a speech command that is different from the visible label they see on a control.\n                  It also creates extra cognitive load for a text-to-speech user to absorb and understand\n                  speech output that does not match the visible label.\n               \nIn order for the label text and accessible name to be matched, it is first necessary\n                  to determine which text on the screen should be considered a label for any given control.\n                  There are often multiple text strings in a user interface that may be relevant to\n                  a control. However, there are reasons why it is best to conservatively interpret the\n                  label as being only the text in close proximity.\n               \nConventionally the label for user interface components is the adjacent text string.\n                  The typical positioning for left to right languages is:\n               \n\nimmediately to the left of comboboxes, dropdown lists, text inputs, and other widgets\n                     (or in the absence of left-side labels, immediately above and aligned with the left\n                     edge of each input)\n                  \nimmediately to the right of checkboxes and radio buttons\ninside buttons and tabs or immediately below icons serving as buttons\n\nThe rationale for some of these conventions is explained in G162: Positioning labels to maximize predictability of relationships.\n                  \n               \nIt is important to bias towards treating only the adjacent text as a label because\n                  liberal interpretations of what constitutes a text label can jeopardize the value\n                  of this Success Criterion (SC) by lessening predictability. Isolating the label to\n                  the single string in close proximity to the component makes it easier for developers,\n                  testers, and end users to identify the label targeted for evaluation in this SC. Predictable\n                  interpretation of labeling allows users of speech recognition technologies to interact\n                  with the element via its conventionally positioned label, and allows users of screen\n                  reading technologies to enjoy consistency between the nearby visible label and the\n                  announced name of the component.\n               \nNote that placeholder text within an input field is not considered an appropriate\n                  means of providing a label. The HTML5 specification states The placeholder attribute should not be used as an alternative to a <label>. However, it is worth noting that \"label\" in that HTML5 statement is in code brackets\n                  and links to the label element. For the purposes of this Label in Name Success Criterion, \"label\" is not\n                  used in such a programmatic sense but is simply referring to a text string in close\n                  visual proximity to a component. As such, in the absence of any other nearby text\n                  string (as described in the preceding list), if an input contains placeholder text,\n                  such text may be a candidate for Label in Name. This is supported both through the\n                  accessible name calculation (discussed later) and from the practical sense that where\n                  a visible label is not otherwise provided, it is likely that a speech-input user may\n                  attempt to use the placeholder text value as a means of interacting with the input.\n               \n\nText labels \"express something in human language\"\n\nSymbolic text characters\nFor the purposes of this SC, text should not be considered a visible label if it is\n                        used in a symbolic manner, rather than directly expressing something in human language as per the definition of text in WCAG. For example, 1.4.5 Images of Text describes considerations for \"symbolic text characters.\" In the images of text example\n                        \"B\", \"I\", and \"ABC\" appear on icons in a text editor, where they are meant to symbolize\n                        the functions for Bold, Italics, and Spelling, respectively. In such a case, the accessible\n                        name should be the function the button serves (e.g., \"Spell check\" or \"Check spelling\"),\n                        not the visible symbolic characters. A similar text editor is shown in the figure\n                        below.\n                     \n\n\nFigure 1 A detail of the rich text editor in Github, showing a variety of unlabeled icons,\n                           including icons resembling text characters.\n                        \n\nLikewise, where an author has used a greater-than symbol (\">\") to mimic the appearance\n                        of the right-facing arrow, the text does not convey something in human language. It\n                        is a symbol, in this scenario likely meant to mimic the icons used for a \"Play\" button\n                        or a \"Next\" arrow.\n                     \nPunctuation and capitalization\n\n\nThe use of punctuation and capitalization in labels may also be considered optional for the same reason. For example, the colon conventionally\n                        added at the end of input labels does not express something in human language, and\n                        capitals on the first letter of each word in a label do not normally alter the words'\n                        meaning. This is particularly relevant in the context of this SC, since it is primarily\n                        aimed at users of speech recognition; capitals and most punctuation are frequently\n                        ignored when a user speaks a label as a means of interacting with a control.\n                     \nWhile it is certainly not an error to include the colon and capitalization in the\n                        accessible name, a computed name of \"First name\" should not be considered a failure\n                        of \"First Name:\".\nFirst Name: \n                        Likewise, \"Next…\" visibly shown on a button could have \"Next\" as the accessible name.\n                        When in doubt, where a meaningful visible label exists, match the string exactly for\n                        the accessible name.\n\n\n\nMathematical expressions and formulae\nMathematical expressions are an exception to the previous subsection about symbolic\n                        characters. Math symbols can be used as labels; for example \"11×3=33\" and \"A>B\" convey\n                        meaning. The label should not be overwritten in the accessible name, and substitutions\n                        of words where a formula is used should be avoided since there are multiple ways to\n                        express the same equation. For example, making the name \"eleven multiplied by three\n                        is equivalent to thirty-three\" might mean a user who said \"eleven times three equals\n                        thirty-three\" may not match. It is best to leave the formulas as used in the label\n                        and count on the user's familiarity with their speech software to achieve a match.\n                        Further, converting a mathematical formula label into an accessible name that is a\n                        spelled-out equivalent may create issues for translation. The name should match the\n                        label's formula text. Note that a consideration for authors is to use the proper symbol\n                        in the formula. For instance 11x3 (with a lower or upper case letter X), 11*3 (with\n                        the asterisk symbol), and 11×3 (with the &times; symbol) are all easy for sighted users to interpret as meaning the same formula,\n                        but may not all be matched to \"11 times 3\" by the speech recognition software. The\n                        proper operator symbol (in this case the times symbol) should be used.\nA>B\nA=B\nA<B\n\n\n\nAccessible Name and Description Computation specification\nIt is important to understand how the accessible name is derived. The Accessible Name and Description Computation 1.1 and the HTML Accessibility API Mappings 1.0 describe how the accessible name is computed, including which attributes are considered\n                     in its calculation, and in what order of preference. If a component has multiple possible\n                     attribute values that could be used for its accessible name, only the most preferred\n                     of those values will be computed. None of the other, less preferred values will be\n                     part of the name. For the most part, existing established programmatic relationships\n                     between labels and controls are reinforced by the specification.\n                  \nOther text displayed on the screen that is correctly coded to meet 1.3.1: Info and\n                     Relationships is not normally factored into the calculation for the accessible name of a UI component\n                     without author intervention (via ARIA labeling techniques). The most common of these\n                     are:\n                  \n\nheadings and instructions\ngroup labels for sets of components (i.e., used with legend/fieldset or with role of group or radiogroup)\n                     \n\nSuch textual information may constitute part of the component's description. So from both a programmatic viewpoint, and from the conservative tactic of only\n                     considering a label to be \"adjacent text,\" neither headings, instructions, nor group\n                     'labels' should normally be considered labels for the purpose of this Success Criterion.\n                  \nIt is important to note that the specification allows authors to override the name\n                     calculated through native semantics. Both aria-label and aria-labelledby take precedence in the name calculation, overriding the visible text as the accessible\n                     name even when the visible text label is programmatically associated with the control.\n                     For this reason, when a visible label already exists, aria-label should be avoided or used carefully, and aria-labelledby should be used as a supplement with care.\n                  \nFinally, aria-describedby is not included in the Accessible Name computation (instead it is part of the Accessible\n                     Description computation). By convention, text associated with a control through aria-describedby is announced immediately after the accessible name by screen readers. Therefore,\n                     the context of headings, instructions, and group labels can be provided through the\n                     accessible description to assist users of screen readers without affecting the experience\n                     of those who navigate using speech recognition software.\n                  \n\n",
      "examples": "\nExamples\n\nAccessible name matches visible label: The accessible name and visible label of a control match.\n                  \nAccessible name starts with visible label: The accessible name \"Search for a value\" begins with the text of the visible label,\n                     \"Search\".\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nVisible label is part of accessible name\n\n"
    }
  },
  "wcag:2.5.4": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this success criterion is to ensure that functions triggered by moving\n                  a device (for example, shaking or tilting) or by gesturing towards the device (so\n                  that sensors like a camera can pick up and interpret the gesturing), can also be operated\n                  by more conventional user interface components.\n               \n\nNote\nThis criterion concerns input through sensors which respond directly to motions such\n                     as gesturing towards, tilting or shaking a device. It does not cover the movement\n                     of users through space as registered by geolocation sensors or beacons, or events\n                     observed by the device other than intentional gesturing by the user. It also does\n                     not cover incidental motion associated with operating a keyboard, pointer, or assistive\n                     technology.\n                  \n\nDevices often have sensors that can act as inputs, such as accelerometer and gyroscope\n                  sensors on a phone or tablet device. These sensors can allow the user to control something\n                  by simply changing the orientation or moving the device in particular ways. In other\n                  situations, web content can interpret user gestures via the camera or other sensors\n                  to actuate functions. For example, shaking the device might issue an \"Undo\" command,\n                  or a gentle hand wave might be used to move forward or backward in a sequence of pages.\n                  Some users with disabilities are not able to operate these device sensors (either\n                  not at all, or not precisely enough) because the device is on a fixed mount (perhaps\n                  a wheelchair) or due to motor impairments. Therefore, functionality offered through\n                  motion must also be available by another mechanism.\n               \nIn addition, some users may accidentally activate sensors due to tremors or other\n                  motor impairments. The user must have the ability to turn off motion actuation to\n                  prevent such accidental triggering of functions. Applications may be able to meet\n                  this requirement by supporting operating system settings which allow the user to disable\n                  motion detection at the system level.\n               \nThere is an exception where motion is essential for the function or not using motions\n                  or gestures would invalidate the activity. Some applications are specifically created\n                  to use device sensor data. Examples of content that are exempt from this requirement\n                  include a pedometer that relies on device motion to count steps.\n               \n",
      "examples": "\nExamples\n\nA user can choose an application setting which turns off Shake to Undo and other motion-activated\n                     features.\n                  \nAfter text is input in a field, shaking a device shows a dialog offering users to\n                     undo the input. A cancel button next to the text field offers the same functionality.\n                  \nA user can tilt a device to advance to the next or a previous page. Buttons are also\n                     provided to perform the same function.\n                  \nA user can move or pan a device to change the view in an interactive photo. A control\n                     is also available to perform these same functions.\n                  \nA user can gesture towards the device to navigate content. Controls are also available\n                     to navigate.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nDevice motion based changes to the content can also be created from the user interface\nDevice motion based changes to the content can be disabled\n\n"
    }
  },
  "wcag:2.5.7": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure functionality that uses a dragging\n                  movement has another single pointer mode of operation without the need for the dexterity required to drag elements.\n               \nSome people cannot perform dragging movements in a precise manner. Others use a specialized\n                  or adapted input device, such as a trackball, head pointer, eye-gaze system, or speech-controlled\n                  mouse emulator, which may make dragging cumbersome and error-prone.\n               \nWhen an interface implements functionality that uses dragging movements, users perform\n                  four discrete actions:\n               \n\ntap or click to establish a starting point, then\npress and hold that contact while...\nperforming a repositioning of the pointer, before...\nreleasing the pointer at the end point.\n\nNot all users can accurately press and hold that contact while also repositioning\n                  the pointer. An alternative method must be provided so that users with mobility impairments\n                  who use a pointer (mouse, pen, or touch contact) can use the functionality.\n               \nThis requirement is separate from keyboard accessibility because people using a touch\n                  screen device may not use a physical keyboard. Keyboard specific interactions such\n                  as tabbing or arrow keys may not be possible when encountering a drag and drop control.\n                  Note, however, that providing a text input can be an acceptable single-pointer alternative\n                  to dragging. For example, an input beside a slider could allow any user to enter a\n                  precise value for the slider. In such a situation, the on-screen keyboard that appears\n                  for touch users offers a single-pointer means of entering an alphanumeric value.\n               \nThis criterion does not apply to scrolling enabled by the user-agent. Scrolling a\n                  page is not in scope, nor is using a technique such as CSS overflow to make a section of content scrollable.\n               \n\nRelationship to other requirements\nSuccess Criteria 2.1.1 Keyboard and 2.1.3 Keyboard (No Exception) require dragging\n                     features to be keyboard accessible. However, achieving keyboard equivalence for a\n                     dragging operation does not automatically meet this Success Criterion. It is possible\n                     to create an interface that works with dragging and keyboard controls that does not\n                     work using only clicks or taps. While many designs can be created for a dragging alternative\n                     which address both keyboard accessibility and operability by single pointer operation,\n                     the two requirements should be assessed independently.\n                  \nThis Success Criterion applies to dragging movements as opposed to pointer gestures,\n                     which are covered in Success Criterion 2.5.1 Pointer Gestures. Pointer gestures include directional path-based as well as multi-point gestures.\n                     In contrast, for dragging movements, only the start and end point of the movement\n                     matters, not the actual path.\n                  \nAdditional examples are selection rectangles that set the first x/y rectangle coordinate\n                     at the pointer position via a pointer down-event, and the second x/y coordinate, after\n                     a dragging movement, at the next up-event. A similar example is a connecting line\n                     drawn between two different items on the screen, as in an allocation test where users\n                     are required to draw a line between questions and corresponding answers. In these\n                     cases, the dragging movement requires an alternative way to accomplish the same action\n                     that does not rely on the dragging movement. For example, two separate single tap\n                     or click actions may define the rectangle coordinates or the start and end points\n                     of a connecting line.\n                  \n\n\nAlternatives for dragging movements on the same page\nWhere functionality can be executed via dragging movements and an equivalent option\n                     exists that allows for single-pointer access without dragging, this Success Criterion\n                     is passed. It does not have to be the same component, so long as the functionality\n                     is equivalent. An example is a color wheel where a color can be changed by dragging\n                     an indicator. In addition, text fields for the numerical input of color values allow\n                     the definition of a color without requiring dragging movements. (Note that a text\n                     input is considered device agnostic; although the purpose is to enter characters,\n                     text entry can take place through voice, pointer or keyboard.)\n                  \n\n\nDistinguishing dragging movements from path-based pointer gestures\nDragging movements covered in this Success Criterion are pointer interactions where\n                     only the start- and endpoints matter. Once the pointer engages with a target, the\n                     direction of the dragging movement does not factor into the interaction until the\n                     pointer disengages the target. Since the dragging movement does not have an intermediate\n                     point, the dragging movement can go in any direction. Path-based gestures are covered\n                     in Success Criterion 2.5.1 Pointer Gestures. For more details, refer to Understanding Success Criterion 2.5.1 Pointer Gestures\n\n",
      "examples": "\nExamples\n\nA map allows users to drag the view of the map around, and the map has up/down/left/right\n                     buttons to move the view as well.\n                  \nA sortable list of elements may, after tapping or clicking on a list element, provide\n                     adjacent controls for moving the element up or down in the list by simply tapping\n                     or clicking on those controls.\n                  \nA taskboard that allows users to drag and drop items between columns also provides\n                     an additional pop-up menu after tapping or clicking on items for moving the selected\n                     element to another column by tapping or clicking on pop-up menu entries.\n                  \nA radial control widget (color wheel) where the value can be set by dragging the marker\n                     for the currently selected color to another position, also allows picking another\n                     color value by tapping or clicking on another place in the color wheel.\n                  \nA linear slider control widget, where the value can be set by dragging the visual\n                     indicator (thumb) showing the current value, allows tapping or clicking on any point\n                     of the slider track to change the value and set the thumb to that position. \n                  \nA widget where you can drag a gift to one person in a photo of a group of people also\n                     has a menu alternative where users can select the person that should receive the gift\n                     from the menu.\n                  \n\n"
    }
  },
  "wcag:2.5.8": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to help ensure targets can be easily activated\n                  without accidentally activating an adjacent target.  Users with dexterity limitations\n                  and those who have difficulty with fine motor movement find it difficult to accurately\n                  activate small targets when there are other targets that are too close.  Providing\n                  sufficient size, or sufficient spacing between targets, will reduce the likelihood\n                  of accidentally activating the wrong control.\n               \nDisabilities addressed by this requirement include hand tremors, spasticity, and quadriplegia.\n                  Some people with disabilities use specialized input devices instead of a computer\n                  mouse or trackpad.  Typically these types of input device do not provide as much accuracy\n                  as mainstream pointing devices.  Meeting this requirement also ensures that touchscreen\n                  interfaces are easier to use.\n               \n\nNote\nThis Success Criterion defines a minimum size and, if this can't be met, a minimum spacing. It is still possible to have very small, and difficult to activate, targets and\n                     meet the requirements of this Success Criterion, provided that the targets don't have\n                     any adjacent targets that are too close. However, using larger target sizes will help\n                     many people use targets more easily. As a best practice it is recommended to at least meet the minimum size requirement of the Success Criterion, regardless of spacing. For important links/controls,\n                     consider aiming for the stricter 2.5.5 Target Size (Enhanced).\n                  \n\n\nExceptions\nThe requirement is for targets to be at least 24 by 24 CSS pixels in size. There are\n                     five exceptions:\n                  \n\nSpacing: Undersized targets (those less than 24 by 24 CSS pixels) are positioned so that if\n                        a 24 CSS pixel diameter circle is centered on the bounding box of each, the circles do not intersect another target or the circle for another undersized\n                        target.\n                     \nEquivalent: In cases where a target does not have a size equivalent to 24 by 24 CSS pixels, but\n                        there is another control that can achieve the underlying function that does meet the minimum size, the target can be excepted based on the \"Equivalent\" exception.\n                     \nInline: The Success Criterion does not apply to inline targets in sentences, or where the\n                        size of the target is constrained by the line-height of non-target text. This exception\n                        is allowed because text reflow based on viewport size makes it impossible for authors\n                        to anticipate where links may be positioned relative to one another. When multiple\n                        links are embedded in blocks of texts in smaller text sizes, guaranteeing that undersized\n                        links in adjacent lines of text fulfill the spacing exception (their 24 CSS pixel\n                        diameter circle don't intersect any other links or their circles) would require a\n                        large line height which can be undesirable in many design contexts.\n                     \nUser agent control: Browsers have default renderings of some controls, such as the days of the month\n                        calendar in an <input type=\"date\">. As long as the author has not modified the user agent default, the target size for\n                        a User agent control is excepted.\n                     \nEssential: If the size and spacing of the targets is fundamental to the information being conveyed,\n                        the Essential exception applies. For example, in digital maps, the position of pins is analogous\n                        to the position of places shown on the map. If there are many pins close together,\n                        the spacing between pins and neighboring pins will often be below 24 CSS pixels. It\n                        is essential to show the pins at the correct map location, therefore the Essential\n                        exception applies. A similar example is an interactive data visualization where targets\n                        are necessarily dense. Another example is where jurisdictions legally require online\n                        forms to replicate paper forms, which can impose constraints on the size of targets.\n                        In such jurisdictions, any legal requirement to replicate small targets can be considered\n                        essential. When the essential exception is applicable, authors are strongly encouraged\n                        to provide equivalent functionality through alternative means to the extent practical.\n                     \n\n\n\nSize requirement\nFor a target to be \"at least 24 by 24 CSS pixels\", it must be possible to draw a solid\n                     24 by 24 CSS pixel square, aligned to the horizontal and vertical axis such that the\n                     square is completely within the target (does not extend outside the target's area).\n                  \n\n\nFigure 1 Where targets are a 24 by 24px square (and larger is better), they meet the size requirement\n                        of the criterion and pass (image shown to scale - see the scalable original version)\n                     \n\nThe 24 by 24px square has to be aligned with the page, although the target itself\n                     could be skewed.\n                  \n\n\nFigure 2 So long as there is a solid 24 by 24px square within the target, it meets the size\n                        requirement of the criterion and passes (image shown to scale - see the scalable original version)\n                     \n\nIf a target is not large enough to allow for a 24 by 24px square to be drawn inside\n                     it, it is considered undersized, and does not pass the size requirement of the Success Criterion. However, if it\n                     has sufficient space around it without adjacent targets, it may still pass the criterion\n                     thanks to the spacing exception (below).\n                  \n\n\nFigure 3 The rounded corners do not leave sufficient space to draw a 24 by 24px square inside\n                        the target, making the target undersized. Depending on the spacing to other targets, it may still pass if it has sufficient\n                        clearance (image shown at 1:1 and 2:1 scale - see the scalable original version)\n                     \n\nThe requirement is independent of the zoom factor of the page; when users zoom in\n                     the CSS pixel size of elements does not change. This means that authors cannot meet\n                     it by claiming that the target will have enough spacing or sufficient size if the\n                     user zooms into the page.\n                  \nThe requirement does not apply to targets while they are obscured by content displayed\n                     as a result of a user interaction or scripted behavior of content, for example:\n                  \n\ninteracting with a combobox shows a dropdown list of suggestions\nactivating a button displays a modal dialog\ncontent displays a cookie banner after page load\ncontent displays a \"Take a survey\" dialog after some period of user inactivity\n\nThe requirement does however apply to targets in any new content that appears on top\n                     of other content.\n                  \nWhile the Success Criterion primarily helps touch users by providing target sizing\n                     to prevent accidental triggering of adjacent targets, it is also useful for mouse\n                     or pen users. It reduces the chances of erroneous activation due to either a tremor\n                     or reduced precision, whether because of reduced fine motor control or input imprecision.\n                  \n\n\nSpacing\nWhen the minimum size for a target is not met, spacing can at least improve the user\n                     experience. There is less chance of accidentally activating a neighboring target if\n                     a target is not immediately adjacent to another. Touchscreen devices and user agents\n                     generally have internal heuristics to identify which link or control is closest to\n                     a user's touch interaction - this means that sufficient spacing between targets can\n                     work as effectively as a larger target size itself.\n                  \nWhen a target is smaller than 24 by 24 CSS pixels, it is undersized. In this case, we check if it at least has sufficient spacing by drawing a 24 CSS pixel diameter circle over the undersized target, centered on\n                     the target's bounding box. For rectangular targets, the bounding box coincides with the target itself – thus,\n                     the circle is placed on the center of the target. If the target is not rectangular – for instance, if the target is clipped, has rounded corners, or if\n                     it's a more complex clickable SVG shape – we need to first determine the bounding\n                     box, and then find the box's center. Note that for concave shapes, the center of the\n                     bounding box may be outside of the target itself. Now, we center the circle on the\n                     center of the bounding box.\n                  \n\n\nFigure 4 For a square/rectangular target, the 24 CSS pixel diameter circle is centered on the\n                        target itself. For convex and concave targets, it is centered on the bounding box\n                        of the shape. Note the concave target, where in this case the center of the bounding\n                        box is outside of the actual target (image shown to scale - see the scalable original version)\n                     \n\nWe repeat this process for all adjacent undersized targets. To determine if an undersized\n                     target has sufficient spacing (to pass this Success Criterion's spacing exception),\n                     we check that the 24 CSS pixel diameter circle of the target does not intersect another\n                     target or the circle of any other adjacent undersized targets.\n                  \nThe following example shows three versions of a horizontal row of six icon-based buttons.\n                     In the top row, the dimensions of each target are 24 by 24 CSS pixels, passing this\n                     Success Criterion. In the second row, the same targets are only 20 by 20 CSS pixels,\n                     but have a 4 CSS pixel space between them – as the target size is below 24 by 24 CSS\n                     pixels, these need to be evaluated against the Success Criterion's spacing exception,\n                     and they pass. In the last row, the targets are again 20 by 20 CSS pixels, but have\n                     no space between them – these fail the spacing exception, because when drawing the\n                     24 CSS pixel diameter circles over the targets, the circles intersect.\n                  \n\n\nFigure 5 Three rows of targets, illustrating two ways of meeting this Success Criterion and\n                        one way of failing it (image shown to scale - see the scalable original version)\n                     \n\nThe next two illustrations show sets of buttons which are only 16 CSS pixels tall.\n                     In the first set, there are no targets immediately above or below the buttons, so\n                     they pass. In the second illustration, there are further buttons, and they have been\n                     stacked on top of one another, resulting in a fail.\n                  \n\n\nFigure 6 While the height of the targets is only 16 CSS pixels, the lack of adjacent targets\n                        above and below means that the targets pass this Success Criterion (image shown to\n                        scale - see the scalable original version)\n                     \n\n\n\nFigure 7 Two rows of buttons, both with a height of only 16 CSS pixels. The rows are close,\n                        with only a 1 CSS pixel gap between them, which means that the 24 CSS pixel spacing\n                        circles of the targets in one row will intersect the targets (and their circles, depending\n                        on their respective widths) in the other line, thus failing the Success Criterion\n                        (image shown to scale - see the scalable original version)\n                     \n\nThe following two illustrations show how menu items can be adjusted to properly meet\n                     this requirement. In the first illustration, the About us menu has been activated, showing that each of the menu item targets (text and padding)\n                     has a 24 CSS pixel height. In the second illustration, the same menu is expanded,\n                     but the menu items only achieve 18 CSS pixels in height.\n                  \n\n\nFigure 8 The menu items with a height of 24 CSS pixels pass. For the menu items that are only\n                        18 CSS pixels high, the 24 CSS pixel spacing circles of the targets in one row will\n                        intersect the adjacent menu item targets and circles, and fail (image shown to scale\n                        - see the scalable original version)\n                     \n\nThe following example has one large target (an image that links to a new page related\n                     to that image) and a very small second target (a control with a magnifier icon, to\n                     open a zoomed-in preview, possibly in a modal, of the image itself). In the top row,\n                     the small target overlaps - or, to be more technically accurate, clips - the large\n                     target. The small target itself has a size of 24 by 24 CSS pixels, so passes. In the\n                     second row, we see that if the second target is any smaller – in this case 16 by 16\n                     CSS pixels – it fails the criterion, as the circle with a 24 CSS pixel diameter we\n                     draw over the small target will intersect the large target itself.\n                  \n\n\nFigure 9 The 24 by 24 CSS pixel small target passes, while the 16 by 16 CSS pixel small target\n                        fails, since the 24 CSS pixel diameter circle used for undersized targets intersect\n                        the large target (image shown to scale - see the scalable original version)\n                     \n\nIn the following example, we have the same two targets – a large target and a small\n                     target. This time, the small target touches/abuts the large target. If the small target\n                     is smaller than 24 by 24 CSS pixels, the circle with a 24 CSS pixel diameter we draw\n                     over the small target will intersect the large target itself, failing the requirement.\n                     The undersized target must be spaced further away from the large target until its\n                     circle doesn't intersect the large target.\n                  \n\n\nFigure 10 In the first row, the 16 by 16 CSS pixel target touching/abutting the large target\n                        fails, as its 24 CSS pixel diameter circle used for undersized targets intersects\n                        the large target. In the second row we see that the only way the undersized target\n                        can pass is by adding a 4 CSS pixel spacing gap between the targets (image shown to\n                        scale - see the scalable original version)\n                     \n\n\nNote\nUsers with different disabilities have different needs for control sizes. It can be\n                        beneficial to provide an option to increase the active target area without increasing\n                        the visible target size. Another option is to provide a mechanism to control the density\n                        of layout and thereby change target size or spacing, or both. This can be beneficial\n                        for a wide range of users. For example, users with visual field loss may prefer a\n                        more condensed layout with smaller sized controls while users with other forms of\n                        low vision may prefer large controls.\n                     \n\n\n",
      "examples": "\nExamples\n\nThree buttons are on-screen and the target size of each button is 24 by 24 CSS pixels.\n                     Since the target size itself is 24 by 24 CSS pixels, no additional spacing is required,\n                     the Success Criterion passes.\n                  \nA row of buttons, each of which has a horizontal width of more than 24 CSS pixels,\n                     a height of only 20 CSS pixels, and vertical margin of 4 CSS pixels above and below\n                     the row of buttons. Since there is sufficient spacing both above and below the row\n                     of buttons, the Success Criterion passes.\n                  \nLinks within a paragraph of text have varying target dimensions. Links within paragraphs\n                     of text do not need to meet the 24 by 24 CSS pixels requirements, so the Success Criterion\n                     passes.\n                  \n\n"
    }
  },
  "wcag:3.1.1": {
    "understanding": {
      "intent": "\nIntent\n\n                  The intent of this Success Criterion is to ensure that content developers provide\n                  information in the Web page that user agents need to present text and other linguistic\n                  content correctly. Both assistive technologies and conventional user agents can render\n                  text more accurately when the language of the Web page is identified. Screen readers\n                  can load the correct pronunciation rules. Visual browsers can display characters and\n                  scripts correctly. Media players can show captions correctly. As a result, users with\n                  disabilities will be better able to understand the content.\n                  \n                  \n               \nThe default human language of the Web page is the default text-processing language\n                  as discussed in \n                  Internationalization Best Practices: Specifying Language in XHTML & HTML Content. When a Web page uses several languages, the default text-processing language is\n                  the language which is used most. (If several languages are used equally, the first\n                  language used should be chosen as the default human language.) \n                  \n                  \n               \n\nNote\n\n\n                        For multilingual sites targeting Conformance Level A, the Working Group strongly encourages\n                        developers to follow Success Criterion 3.1.2 as well even though that is a Level AA\n                        Success Criterion.\n                        \n                        \n                        \n                     \n\n\n",
      "examples": "\nExamples\n\nExample 1. A Web page with content in two languages\nA Web page produced in Germany and written in HTML includes content in both German\n                     and English, but most of the content is in German. The default human language is identified\n                     as German (de) by the lang attribute on the html element.\n                  \n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nHTML page has lang attribute\nHTML page lang attribute has valid language tag\nHTML page lang and xml:lang attributes have matching values\nHTML page language subtag matches default language\n\n"
    }
  },
  "wcag:3.1.2": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that user agents can correctly present\n                  phrases, passages, and in some cases words written in multiple languages. This makes\n                  it possible for user agents and\n                  assistive technologies to present content according to the  presentation and pronunciation\n                  rules for that language. This applies to graphical browsers as well as screen readers,\n                  braille displays, and other voice browsers.\n                  \n               \nBoth assistive technologies and conventional user agents can render text more accurately\n                  if the language of each passage of text is identified. Screen readers can use the\n                  pronunciation rules of the language of the text. Visual browsers can display characters\n                  and scripts in appropriate ways. This is especially important when switching between\n                  languages that read from left to right and languages that read from right to left,\n                  or when text is rendered in a language that uses a different alphabet. Users with\n                  disabilities who know all the languages used in the Web page will be better able to\n                  understand the content when each passage is rendered appropriately. \n                  \n               \nWhen no other language has been specified for a phrase or passage of text, its human\n                  language is the default human language of the Web page (see Success Criterion 3.1.1). So the human language of all content in single language documents can be programmatically\n                  determined. \n                  \n               \nIndividual words or phrases in one language can become part of another language. For\n                  example, \"rendezvous\" is a French word that has been adopted in English, appears in\n                  English dictionaries, and is properly pronounced by English screen readers. Hence\n                  a passage of English text may contain the word \"rendezvous\" without specifying that\n                  its human language is French and still satisfy this Success Criterion. Frequently,\n                  when the human language of text appears to be changing for a single word, that word\n                  has become part of the language of the surrounding text. Because this is so common\n                  in some languages, single words should be considered part of the language of the surrounding\n                  text unless it is clear that a change in language was intended. If there is doubt\n                  whether a change in language is intended, consider whether the word would be pronounced\n                  the same (except for accent or intonation) in the language of the immediately surrounding\n                  text.\n                  \n               \nMost professions require frequent use of technical terms which may originate from\n                  a foreign language. Such terms are usually not translated to all languages. The universal\n                  nature of technical terms also facilitate communication between professionals.\n                  \n               \nSome common examples of technical terms include: Homo sapiens, Alpha Centauri, hertz,\n                  and habeas corpus.\n                  \n               \nIdentifying changes in language is important for a number of reasons:\n\nIt allows braille translation software to follow changes in language, e.g., substitute\n                     control codes for accented characters, and insert control codes necessary to prevent\n                     erroneous creation of Grade 2 braille contractions.\n                     \n                  \nSpeech synthesizers that support multiple languages will be able to speak the text\n                     in the appropriate accent with proper pronunciation. If changes are not marked, the\n                     synthesizer will try its best to speak the words in the  default language it works\n                     in. Thus, the French word for car, \"voiture\" would be pronounced \"voyture\" by a speech\n                     synthesizer that uses English as its default language. \n                     \n                  \nMarking changes in language can benefit future developments in technology, for example\n                     users who are unable to translate between languages themselves will be able to use\n                     machines to translate unfamiliar languages.  \n                     \n                  \nMarking changes in language can also assist user agents in providing definitions using\n                     a dictionary. \n                     \n                  \n\n",
      "examples": "\nExamples\n\n\n\nA German phrase in an English sentence.\n\nIn the sentence, \"He maintained that the DDR (German Democratic Republic) was just\n                        a 'Treppenwitz der Weltgeschichte',\" the German phrase 'Treppenwitz der Weltgeschichte' is marked as German. Depending on the markup language, English may either be marked\n                        as the language for the entire document except where specified, or marked at the paragraph\n                        level. When a screen reader encounters the German phrase, it changes pronunciation\n                        rules from English to German to pronounce the word correctly.\n                        \n                     \n\n\n\nAlternative language links\n\nAn HTML Web page includes links to versions of the page in other languages (e.g.,\n                        Deutsch, Français, Nederlands, Catalan, etc.). The text of each link is the name of the language, in that language. The\n                        language of each link is indicated via a lang attribute.\n                        \n                     \n<ul>\n  <li><a href=\"...\" lang=\"de\">Deutsch</a></li>\n  <li><a href=\"...\" lang=\"it\">Italiano</a></li>\n  <li><a href=\"...\" lang=\"fr\">Français</a></li>\n  ...\n  <li><a href=\"...\" lang=\"zh-hant\">繁體中文</a></li>\n</ul>\n\n\n\n\"Podcast\" used in a French sentence.\n\nBecause \"podcast\" is part of the vernacular of the immediately surrounding text in\n                        the following excerpt, \"À l'occasion de l'exposition \"Energie éternelle. 1500 ans d'art indien\", le Palais\n                           des Beaux-Arts de Bruxelles a lancé son premier podcast. Vous pouvez télécharger ce\n                           podcast au format M4A et MP3\", no indication of language change is required.\n                        \n                     \n\n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nElement with lang attribute has valid language tag\nHTML element language subtag matches language\n\n"
    }
  },
  "wcag:3.2.1": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that functionality is predictable\n                  as visitors navigate their way through a document. Any component that is able to trigger\n                  an event when it receives focus must not change the context.          Examples of\n                  changing context when a component receives focus include, but are not limited to:\n                  \n                  \n               \n\nforms submitted automatically when a component receives focus;\nnew windows launched when a component receives focus;\nfocus is changed to another component when that component receives focus;\n\nFocus may be moved to a control either via the keyboard (e.g. tabbing to a control)\n                  or the mouse (e.g. clicking on a text field). Moving the mouse over a control does\n                  not move the focus\n                  unless scripting implements this behavior. Note that for some types of controls, clicking\n                  on a control may also activate the control (e.g. button), which may, in turn, initiate\n                  a change in context.\n                  \t\t\t\t\t\n                  \n               \n\nNote\n\nWhat is meant by \"component\" here is also sometimes called \"user interface element\"\n                        or \"user interface component\".\n                        \n                     \n\n\n",
      "examples": "\nExamples\n\nExample 1: A dropdown menu\nA dropdown menu on a page allows users to choose between jump destinations. If the\n                     person uses the keyboard to move down to a choice and activates it (with a spacebar\n                     or enter key) it will jump to a new page.  However, if the person moves down to a\n                     choice and either hits the escape or the tab key to move out of the pulldown menu\n                     – it does not jump to a new screen as the focus shifts out of the dropdown menu.\n                  \nExample of a Failure: A help dialog\nWhen a field receives focus, a help dialog window describing the field and providing\n                     options opens. As a keyboard user tabs through the Web page, the dialog opens, moving\n                     the keyboard focus away from the control every time the user attempts to tab past\n                     the field.\n                  \n\n"
    }
  },
  "wcag:3.2.2": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that entering data or selecting\n                  a form control has predictable effects. Changing the setting of any user interface\n                  component is changing some aspect in the control that will persist when the user is\n                  no longer interacting with it. So checking a checkbox, entering text into a text field,\n                  or changing the selected option in a list control changes its setting, but activating\n                  a link or a button does not. Changes in context can confuse users who do not easily\n                  perceive the change or are easily distracted by changes. Changes of context are appropriate\n                  only when it is clear that such a change will happen in response to the user's action.\n                  \n                  \n                  \n               \n\nNote\n\nThis Success Criterion covers changes in context due to changing the setting of a\n                        control. Clicking on links or tabs in a tab control is activating the control, not\n                        changing the setting of that control.\n                        \n                     \n\n\n\nNote\n\nWhat is meant by \"component\" and \"user interface component\" here is also sometimes\n                        called \"user interface element\".\n                        \n                     \n\n\n",
      "examples": "\nExamples\n\n\n                     A form is provided for creating calendar entries in a Web based calendaring and scheduling\n                     application. Along with the standard fields for subject, time and location, there\n                     is a set of radio buttons to select the type of calendar entry to create.  The calendar\n                     entry type can be meeting, appointment or reminder.  If the user selects the radio\n                     for meeting, additional fields are displayed on the page for entering the meeting\n                     participants. Different fields appear if the reminder button is chosen. Because only\n                     parts of the entry change and the overall structure remains the same the basic context\n                     remains for the user.  \n                     \n                     \n                  \n\n                     A form contains fields representing US phone numbers. All of the numbers have a three\n                     digit area code followed by a three digit prefix and finally a four digit number,\n                     and each part of the phone number is entered into a separate field. When the user\n                     completes the entry of one field the focus automatically moves to the next field of\n                     the phone number. This behavior of phone fields is described for the user at the beginning\n                     of the form.\n                     \n                     \n                  \n\n"
    }
  },
  "wcag:3.2.3": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to encourage the use of consistent presentation\n                  and layout for users who interact with repeated content within \n                  a set of Web pages and need to locate specific information or functionality more than\n                  once.\n                  Individuals with low vision who use screen magnification to display a small portion\n                  of the screen at a time often use visual cues and page boundaries to quickly locate\n                  repeated content.\n                  Presenting repeated content in the same order is also important for visual users who\n                  use spatial memory or visual cues within the design to locate repeated content.\n                  \n                  \n               \nIt is important to note that the use of the phrase \"same order\" in this section is\n                  not meant to imply that subnavigation menus cannot be used or that blocks of secondary\n                  navigation or page structure cannot be used. Instead, this Success Criterion is intended\n                  to assist users who interact with repeated content across Web pages to be able to\n                  predict the location of the content they are looking for and find it more quickly\n                  when they encounter it again. \n                  \n                  \n               \nUsers may initiate a change in the order by using adaptive user agents or by setting\n                  preferences so that the information is presented in a way that is most useful to them.\n                  \n                  \n                  \n                  \n               \n",
      "examples": "\nExamples\n\nA consistently located control\nA search field is the last item on every Web page in a site. Users can quickly locate\n                     the search function.\n                  \nAn expanding navigation menu\nA navigation menu includes a list of seven items with links to the main sections of\n                     a site.\n                     When a user selects one of these items, a list of sub-navigation items is inserted\n                     into the top-level navigation menu.\n                  \nConsistently positioned skip navigation controls\nA \"skip navigation\" (or \"skip to main content\") link is included as the first link\n                     on every page in a Web site. The link allows users to quickly bypass heading information\n                     and navigational content and begin interacting with the main content of a page.\n                  \nSkip to navigation link\nNavigational content is consistently located at the end of each page in a set of Web\n                     pages. A \"skip to navigation\" link is consistently located at the beginning of each\n                     page so that keyboard users can easily locate it when needed.\n                  \n\n"
    }
  },
  "wcag:3.2.4": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure consistent identification of functional\n                  components that appear repeatedly within a set of Web pages. A strategy that people\n                  who use screen readers use when operating a Web site is to rely heavily on their familiarity\n                  with functions that may appear on different Web pages. If identical functions have\n                  different labels (or, more generally, a different accessible name)\n                  on different Web pages, the site will be considerably more difficult\n                  to use. It may also be confusing and increase the cognitive load for people with cognitive\n                  limitations. Therefore, consistent labeling will help. \n                  \n               \nThis consistency extends to the text alternatives. If icons or other non-text items\n                  have the same functionality, then their text alternatives should be consistent as\n                  well.\n                  \n               \nIf there are two components on a web page that both have the same functionality as\n                  a component on another page in a set of web pages, then all 3 must be consistent.\n                  Hence the two on the same page will be consistent.\n                  \n               \nWhile it is desirable and best practice always to be consistent within a single web\n                  page, 3.2.4 only addresses consistency within a set of web pages where something is\n                  repeated on more than one page in the set.\n                  \n               \n",
      "examples": "\nExamples\n\nExample 1: Document Icon\nA document icon is used to indicate document download throughout a site. The text\n                     alternative for the icon always begins with the word “Download,\" followed by a shortened\n                     form of the document title. Using different text alternatives to identify document\n                     names for different documents is a consistent use of text alternatives.\n                  \nExample 2: Check Mark\nA check mark icon functions as \"approved\", on one page but as \"included\" on another.\n                     Since they serve different functions, they have different text alternatives.\n                  \nExample 3: Consistent references to other pages\n A Web site publishes articles on-line. Each article spans multiple Web pages and\n                     each page contains a link to the first page, the next page and the previous page of\n                     the article. If the references to the next page read \"page 2\", \"page 3\", \"page 4\"\n                     etcetera, the labels are not the same but they are consistent. Therefore, these references\n                     are not failures of this Success Criterion.\n                  \nExample 4: Icons with similar functions\nAn e-commerce application uses a printer icon that allows the user to print receipts\n                     and invoices. In one part of the application, the printer icon is labeled \"Print receipt\"\n                     and is used to print receipts, while in another part it is labeled \"Print invoice\"\n                     and is used to print invoices. The labeling is consistent (\"Print x\"), but the labels\n                     are different to reflect the different functions of the icons. Therefore, this example\n                     does not fail the Success Criterion.\n                  \nExample 5: Save icon\nA common \"save\" icon is used through out the site where page save function is provided\n                     on multiple Web pages.\n                  \nExample 6: Icon and adjacent link to same destination\nAn icon with alt text and a link are next to each other and go to the same location.\n                     The best practice would be to group them into one link as per \n                     H2: Combining adjacent image and text links for the same resource. However if they are visually positioned one above the other but separated in the\n                     source, this may not be possible. To meet the Success Criterion, the link text for\n                     these two links need only be consistent, not identical. But best practice is to have\n                     identical text so that when users encounter the second one, it is clear that it goes\n                     to the same place as the first.\n                  \nExample 7: Example of a Failure\nA submit \"search\" button on one Web page and a \"find\" button on another Web page both\n                     have a field to enter a term and list topics in the Web site related to the term submitted.\n                     In this case, the buttons have the same functionality but are not labeled consistently.\n                  \nExample 8: Failure primarily impacting assistive technology users\nTwo buttons with the same functionality visually have the same text, but have been\n                     given\n                     different aria-label=\"...\" accessible names. For users of assistive technologies,\n                     these two buttons will be announced differently and inconsistently.\n                  \n\n"
    }
  },
  "wcag:3.2.6": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure users can find help for completing\n                  tasks on a Web site, when it is available. When the placement of the help mechanism\n                  is kept consistent across a set of pages, users looking for help will find it easier\n                  to identify. This is distinct from interface-level help, such as contextual help,\n                  features like spell checkers, and instructional text in a form. \n               \nLocating the help mechanism in a consistent location across pages makes it easier\n                  for users to find it.  For example, when a mechanism or link is located in the header\n                  of one Web page, it will be easier to find if it is in the header of other pages.\n                  The help mechanism, such as a contact phone number, may be provided directly on the\n                  page, or it may also be a direct link to a contact page. Regardless of which approach\n                  is used, the mechanism must be located in the same relative order on each page within\n                  the set of pages.\n               \nWhen testing this Success Criterion, it is the help item which is relative to the\n                  rest of the content. When testing a page, other content that is present across the\n                  set of web pages and is before the help item should be before the help item on this\n                  page. Items which are after the help item on other pages should be after the help\n                  item on this page.\n               \nIf the help item is visually in a different location, but in the same serial order,\n                  that is not helpful from a user's point of view, but it would not fail this criterion.\n               \nWhen having problems completing a task on a Web site (or part of a Web site, what\n                  we call a set of Web pages), people with some types of disabilities may not be able to work through the issue\n                  without further help.  Issues could include difficulty:\n                  completing a form, or finding a document or page which provides information required\n                  to complete a task.\n               \nWithout help, some users may abandon the task. They may also fail to correctly complete\n                  a task, or they may require assistance from people who do not necessarily keep private\n                  information secure.\n               \n\nLimitations and Exceptions\nIt is not the intent of this Success Criterion to require authors to provide help\n                     or access to help. The Criterion only requires that when one of the listed forms of help is available across multiple pages that it be in\n                     a consistent location. It does not require authors to provide help information on\n                     PDFs or other static documents that may be available for viewing/download from the\n                     Web pages. PDFs and other static documents are not considered part of the \"set of web pages\" from which they are downloaded.\n                  \nIt is also not the intent of this Success Criterion to require a human be available\n                     at all times. Ideally, if the human contact is not available during certain hours\n                     or certain days then information would be provided so the user can tell when it will\n                     be available. \n                  \nThis Success Criterion only requires help mechanisms to be consistent within a particular set of web pages. Some complex Web sites consist of multiple different sets of web pages with different\n                     purposes. For example, a web-based spreadsheet application might have one set of pages\n                     for editing spreadsheets and a separate set of pages for marketing the application.\n                     This Success Criterion would allow the different sets of web pages to use different\n                     help mechanism locations. However, it is best if help mechanisms are located as consistently\n                     as possible even among different related sets of web pages.\n                  \nThis Success Criterion contains an exception when \"a change is initiated by the user.\"\n                     This exception is intended to cover cases where a user performs an action with the\n                     intent of changing the display or layout of a page, such as changing the zoom level,\n                     orientation, or viewport size. Help mechanism locations may change in response to\n                     such a user-initiated change; as the criterion's second note clarifies, \"this criterion\n                     is concerned with relative order across pages displayed in the same page variation\n                     (e.g., same zoom level and orientation).\"\n                  \nThis exception allows the location in a smaller viewport to be different than in a\n                     larger viewport. However, it is best if the mechanism or link is consistent across\n                     a set of web pages. A consistent location, both visually and programmatically, is\n                     the most usable.\n                  \nThis exception is not intended to treat every action that a user might initiate as a \"change\"; to qualify\n                     for the exception, the user must be initiating an action that would reasonably be\n                     expected to change the relative order of components within a page. For example, merely\n                     navigating between pages within a set of web pages is not a \"change initiated by the\n                     user\" for the purposes of this exception. Similarly, logging into or out of a page\n                     would not typically qualify, unless logging in would present the user with a distinct\n                     set of web pages.\n                  \n\n\nHelp Mechanisms\nTypical help mechanisms include:\n\nHuman contact details such as a phone number, email address, hours of operation.\nHuman contact mechanism such as a messaging system, chat client, contact form, social\n                        media channel.\n                     \nSelf-help option such as an up-to-date Frequently Asked Questions, How Do I page,\n                        Support page.\n                     \nA fully automated contact mechanism such as a chatbot.\n\nThe order of the types of help listed in the Success Criterion does not imply priority.\n\n\nSupport for people with cognitive and learning disabilities\nThis section is not required by the Consistent Help success criterion, but provides\n                     advice related to Making Content Usable for People with Cognitive and Learning Disabilities.\n                  \nThe human contact details enable users to connect with the  organization or the part\n                     of the organization that can assist with the content. For example, an online jobs\n                     / recruitment portal may provide a contact method for the team that supports the recruitment\n                     portal and not a catch-all for the entire company. Each layer of contact added prolongs\n                     the time before the user will receive help.\n                  \nThe human contact mechanism enables a person to express what they are looking for\n                     using their own words. For some with cognitive disabilities, this may be the best\n                     way for them to find an answer to their problem.\n                  \nFor pages for which no human support is available it helps if a self-help option says\n                     that no human support is available. Self-help options can go beyond allowing the user\n                     to search within the site. Contextual help is still recommended (see Success Criterion 3.3.5 for more information), but a self-help option provides a single location that makes\n                     it easier for people with cognitive disabilities to understand what help is available\n                     without having to hunt for it. While some people may easily be able to identify that\n                     no support would be available for a particular type of Web site, this may not be apparent\n                     to some users with disabilities.\n                  \nChatbots can work for many people, and particularly for people with cognitive disabilities\n                     if they:\n                  \n\nrecognize misspelled words,\nprovide human contact details if the chatbot is unable to provide a satisfactory response\n                        after 3 attempts, and\n                     \ncan be dismissed with a single interaction, and recalled using a link or button.\n\nThis criterion does not require that a site provide a help mechanism. However, when\n                     help is available:\n                  \n\nPeople who may have difficulty locating help are more likely to find it and complete\n                        their task.\n                     \nUsers that experience cognitive fatigue or cognitive shut down will be able to reserve\n                        their energy for the task, instead of using it to find support.\n                     \nEnabling users (especially those with cognitive disabilities) to find solutions while\n                        expressing their question using their own words (for example by interacting with a\n                        chatbot) increases their chances of success for completing a task.\n                     \n\nSelf help methods beyond the site, such as using internet search to find the contact\n                     information for an organization, can be too difficult. Further, the user's disability\n                     may make it more difficult to find the help available (such as a \"contact us\" link,\n                     phone number, or support page) if the information is not consistently present within\n                     a few interactions (e.g., displayed in the header, or via a menu). In addition, for\n                     some users with disabilities, struggling to complete a task on a site may cause additional\n                     cognitive challenges when searching for help within the site.\n                  \nWhen a user is quickly able to find help, they are able to complete the task even\n                     if they encounter challenges.\n                  \n\n",
      "examples": "\nExamples\n\nOn-line job application: Some of the application questions may be hard for new job\n                     seekers to understand even after reading the contextual help. For example, the form\n                     may request their identification number, but they may have several and not know which\n                     one to enter. Consistently located contact information will enable them to use phone\n                     or email so they can get an answer to their question.\n                  \nMedical appointment scheduling form: When the service a patient is trying to book\n                     is not easily findable within the interface, they may need human help. A consistently\n                     located messaging option (chat client) enables them to quickly interact with a staff\n                     person that can help, without requiring them to manage a second interface.\n                  \nFinding a specific policy or procedure: An employee who needs to complete a work task\n                     may have difficulty locating the specific policy or procedure document on their employer's\n                     Web site. A consistently located \"How Do I\" page may include the information that\n                     enables them to independently complete this task.\n                  \n\n"
    }
  },
  "wcag:3.3.1": {
    "understanding": {}
  },
  "wcag:3.3.2": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to have content authors present instructions\n                  or labels that identify the controls in a form so that users know what input data\n                  is expected. In the case of radio buttons, checkboxes, comboboxes, or similar controls\n                  that provide users with options, each option must have an appropriate label so that\n                  users know what they are actually selecting. \n                  Instructions or labels may also specify data formats for data entry fields, especially\n                  if they are out of the customary formats or if there are specific rules for correct\n                  input. Content authors may also choose to make such instructions available to users\n                  only when the individual control has focus especially when instructions are long and\n                  verbose.\n                  \n               \nThe intent of this Success Criterion is not to clutter the page with unnecessary information\n                  but to provide important cues and instructions that will benefit people with disabilities.\n                  Too much information or instruction can be just as harmful as too little.\n                  The goal is to make certain that enough information is provided for the user to accomplish\n                  the task without undue confusion or navigation.\n                  \n               \nThis Success Criterion does not require that labels or instructions be correctly marked\n                  up, \n                  identified, or associated with their respective controls - this aspect is covered\n                  separately by\n                  1.3.1: Info and Relationships. It is possible for content\n                  to pass this Success Criterion (providing relevant labels and instructions) while\n                  failing\n                  Success Criterion 1.3.1 (if the labels or instructions aren't correctly marked up,\n                  identified, or associated).\n                  \n               \nFurther, this Success Criterion does not take into consideration whether or not alternative\n                  methods of\n                  providing an accessible name or description for form controls and inputs has been\n                  used - this aspect is\n                  covered separately by 4.1.2: Name, Role and Value. It is possible\n                  for controls and inputs to have an appropriate accessible name or description (e.g.\n                  using aria-label=\"...\")\n                  and therefore pass Success Criterion 4.1.2, but to still fail this Success Criterion\n                  (if the labels or instructions\n                  aren't presented to all users, not just those using assistive technologies).\n                  \n               \nThis Success Criterion does not apply to links or other controls (such as an expand/collapse\n                  widget, or similar\n                  interactive components) that are not associated with data entry.\n                  \n               \nWhile this Success Criterion requires that controls and inputs have labels or instructions,\n                  whether or\n                  not labels (if used) are sufficiently clear or descriptive is covered separately by\n                  2.4.6: Headings and Labels.\n                  \n               \n",
      "examples": "\nExamples\n\nA field which requires the user to enter the two character abbreviation for a US state\n                     has a link next to it which will popup an alphabetized list of state names and the\n                     correct abbreviation.\n                     \n                  \nA field for entering a date contains initial text which indicates the correct format\n                     for the date.\n                     \n                  \nTo enter their name, users are provided with two separate text fields. Rather than\n                     having a single label \"Name\" (which would appear to leave the second text field unlabelled),\n                     each field is given an explicit label - \"Given Name\" and \"Family Name\".\n                     \n                  \nA U.S. phone number separates the area code, exchange, and number into three fields.\n                     Parentheses surround the area code field, and a dash separates the exchange and number\n                     fields. While the punctuation provides visual clues to those familiar with the U.S.\n                     telephone number format, the punctuation is not sufficient to label the fields. The\n                     single \"Phone number\" label also cannot label all three fields. To address this, the\n                     three fields are grouped in a fieldset with the legend \"Phone number\". Visual labels\n                     for\n                     the fields (beyond the punctuation) cannot be provided\n                     in the design, so invisible labels are provided with the \"title\" attribute to each\n                     of the three fields. The value of this attribute for the three fields are, respectively,\n                     \"Area Code\", \"Exchange\", and \"Number\". \n                     \n                  \n\n"
    }
  },
  "wcag:3.3.3": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that users receive appropriate suggestions\n                  for correction of an input error if it is possible. The definition of \"input error\"\n                  says that it is \"information provided by the user that is not accepted\" by\n                  the system. Some examples of information that is not accepted include information\n                  that is required but omitted by the user and information that is provided by the user\n                  but that falls outside the required data format or allowed values.\n                  \n               \nSuccess Criterion 3.3.1 provides for notification of errors. However, persons with\n                  cognitive limitations may find it difficult to understand how to correct the errors.\n                  People with visual disabilities may not be able to figure out exactly how to correct\n                  the error. In the case of an unsuccessful form submission, users may abandon the form\n                  because they may be unsure of how to correct the error even though they are aware\n                  that it has occurred. \n                  \n               \nThe content author may provide the description of the error, or the user agent may\n                  provide the description of the error based on technology-specific, programmatically\n                  determined information.\n                  \n                  \n               \n",
      "examples": "\nExamples\n\nAdditional Help for Correcting An Input Error\nThe result of a form that was not successfully submitted describes an\n                     input error in place in the page along with the correct input and offers additional\n                     help for the form field that caused the input error.\n                  \nSuggestions from a Limited Set of Values\n\nAn input field requires that a month name be entered. If the user enters \"12,\" suggestions\n                        for correction may include:\n                     \n\nA list of the acceptable values, e.g., \"Choose one of: January, February, March, April,\n                           May, June, July, August, September, October, November, December.\"\n                           \n                        \nThe conversion of the input data interpreted as a different month format, e.g., \"Do\n                           you mean 'December'?\"\n                           \n                        \n\n\n\n"
    }
  },
  "wcag:3.3.4": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to help users with disabilities avoid serious\n                  consequences as the result of a mistake when performing an action that cannot be reversed.\n                  For example, purchasing non-refundable airline tickets or submitting an order to purchase\n                  stock in a brokerage account are financial transactions with serious consequences.\n                  If a user has made a mistake on the date of air travel, he or she could end up with\n                  a ticket for the wrong day that cannot be exchanged. If the user made a mistake on\n                  the number of stock shares to be purchased, he or she could end up purchasing more\n                  stock than intended. Both of these types of mistakes involve transactions that take\n                  place immediately and cannot be altered afterwards, and can be very costly. Likewise,\n                  it may be an unrecoverable error if users unintentionally modify or delete data stored\n                  in a database that they later need to access, such as their entire travel profile\n                  in a travel services web site. When referring to modification or deletion of 'user\n                  controllable' data, the intent is to prevent mass loss of data such as deleting a\n                  file or record. It is not the intent to require a confirmation for each save command\n                  or the simple creation or editing of documents, records or other data.\n                  \n               \nUsers with disabilities may be more likely to make mistakes. People with reading disabilities\n                  may transpose numbers and letters, and those with motor disabilities may hit keys\n                  by mistake. Providing the ability to reverse actions allows users to correct a mistake\n                  that could result in serious consequences. Providing the ability to review and correct\n                  information gives the user an opportunity to detect a mistake before taking an action\n                  that has serious consequences.\n                  \n               \nUser-controllable data is user-viewable data that the user can change and/or delete\n                  through an intentional action. Examples of the user controlling such data would be\n                  updating the phone number and address for the user's account, or deleting a record\n                  of past invoices from a website. It does not refer such things as internet logs and\n                  search engine monitoring data that the user can't view or interact with directly.\n                  \n                  \n               \n",
      "examples": "\nExamples\n\nOrder confirmation\nA Web retailer offers on-line shopping for customers. When an order is submitted,\n                     the order information—including items ordered, quantity of each ordered item, shipping\n                     address, and payment method—are displayed so that the user can inspect the order for\n                     correctness. The user can either confirm the order or make changes.\n                  \nStock sale\nA financial services Web site lets users buy and sell stock online. When a user submits\n                     an order to buy or sell stock, the system checks to see whether or not the market\n                     is open. If it is after hours, the user is alerted that the transaction will be an\n                     after-hours transaction, is told about the risks of trading outside of regular market\n                     hours, and given the opportunity to cancel or confirm the order.\n                  \n\n"
    }
  },
  "wcag:3.3.7": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that users can successfully complete\n                  multi-step processes. It reduces cognitive effort where information is asked for more\n                  than once during a process. It also reduces the need to recall information provided\n                  in a previous step.\n               \nInformation that is required to be remembered for input can pose a significant barrier\n                  to users with cognitive or memory difficulties. All users experience a natural gradual\n                  mental fatigue as they proceed through steps in a process. This fatigue is accelerated\n                  by the stress of recalling information from short-term working memory. Users with\n                  learning, and cognitive disabilities are highly susceptible to mental fatigue.\n               \nRequiring people to recall information previously entered can cause them to give up\n                  or re-enter the same information incorrectly. The autocomplete feature of browsers\n                  is not considered sufficient because it is the content (the web site) that needs to\n                  provide the stored information for a redundant entry, or avoid asking for the same\n                  information again.\n               \nThis Success Criterion does not add a requirement to store information between sessions.\n                  A process is defined on the basis of an activity and is not applicable when a user returns\n                  after closing a session or navigating away. However, a process can run across different\n                  domains, so if a check-out process includes a 3rd party payment provider, that would\n                  be in scope.\n               \nThe term \"available to select\" is not prescriptive. The term allows authors to develop\n                  techniques where auto-population is not possible. It can include allowing the user\n                  to:\n               \n\nselect and populate a field, including from a drop-down;\nselect text from the page and copy it into an input;\ntick a checkbox to populate inputs with the same values as previously entered (e.g.,\n                     my billing address is the same as my shipping address).\n                  \n\nData which is \"available to select\" would need to be on the same page. Ideally, it\n                  would be visible by default and closely associated with the input where the data is\n                  required. However, it could be elsewhere on a page, including within a show/hide component.\n               \nThis Success Criterion does not apply if data is provided by the user with a different\n                  method, such as uploading a resume in a document format.\n               \nThis Success Criterion does not impact Accessible Authentication (Minimum), for which allowing auto-filling of passwords is a sufficient technique. In that\n                  case the filling is performed by the user's browser. Redundant Entry is asking for\n                  the website content to make the previous entry available, but not between sessions\n                  or for essential purposes such as asking for a password.\n               \nThis criterion does not include requirements or exceptions specific to privacy or\n                  personally identifiable information (PII), but when implementing techniques such as\n                  auto-population, authors should ensure data protection when storing information even\n                  temporarily during a process. It is possible to eliminate redundant entry in ways\n                  that do not introduce additional privacy risks, but it is also possible that a poor\n                  implementation (for meeting this criterion) could leak additional PII.\n               \nThere are exceptions for:\n\nEssential uses of input re-entry for things like memory games which would be invalidated\n                     if the previous answers were supplied.\n                  \nSecurity measures such as preventing a password string from being shown or copied.\n                     When creating a password, it should be a unique and complex string and therefore cannot\n                     be validated by the author. If the system requires the user to manually create a password\n                     that is not displayed, having users re-validate their new string is allowed as an\n                     exception.\n                  \nWhen the previously entered information is no longer valid, it can be requested that\n                     the user enter that information again.\n                  \n\n",
      "examples": "\nExamples\n\nA form requests the user’s corporate identification number (ID) in the first step\n                     of a process to purchase a new computer. In the 3rd step the user is asked to confirm\n                     that the computer will belong to the user (rather than a colleague), and re-shows\n                     the ID. It allows the user to change the ID, but defaults to the previously entered\n                     one.\n                  \nA form on an e-commerce website allows the user to confirm that the billing address\n                     and delivery address are the same address.\n                  \nA search results page pre-fills the search input with the previously entered search\n                     term in the same process.\n                  \n\n"
    }
  },
  "wcag:3.3.8": {
    "understanding": {
      "intent": "\nIntent\nThe purpose of this Success Criterion is to ensure there is an accessible, easy-to-use,\n                  and secure method for users to authenticate when logging into an existing account.\n                  As the most prevalent form of authentication, Web sites commonly rely on usernames\n                  and passwords to log in. However, memorizing a username and password places a very\n                  high or impossible burden upon people with certain cognitive disabilities, as do additional\n                  steps often added to authentication processes. For instance, the need to transcribe\n                  a one-time verification code or requiring a puzzle to be solved.\n               \nWhile Web sites can use the recognition of objects or of non-text content provided\n                  by the user to meet this Success Criterion, such techniques do not fully support the\n                  cognitive accessibility community and should be avoided if possible. Refer to Accessible Authentication (Enhanced) for guidance to be more inclusive and accessible.\n               \nThis Success Criterion is focused on authentication of existing users. It does not cover creation of a username or initiation of an account.  For many Web sites, establishing\n                  an initial username and credentials may not differ greatly from logging in with that\n                  username. The techniques used to satisfy this criterion (particularly allowing pasting\n                  into inputs and not relying on transcription) can also reduce the cognitive burden\n                  in account creation. However, the focus of the Success Criterion is on reducing the\n                  ongoing need for users to recall previously supplied information each time they log\n                  in or otherwise authenticate to an account.\n               \n\nCognitive Function Tests\nRemembering a site-specific password is a cognitive function test. Such tests are known to be problematic for many people with cognitive disabilities.\n                     Whether it is remembering random strings of characters, or a pattern gesture to perform\n                     on a touch screen, cognitive function tests will exclude some people. When a cognitive\n                     function test is used, at least one other authentication method must be available\n                     which is not a cognitive function test.\n                  \nSome CAPTCHA systems have an audio alternative of the visible text. If the user needs to transcribe\n                     this audio, it cannot be used to meet the Alternative exception.\n                  \nIf there is more than one step in the authentication process, such as with multi-factor\n                     authentication, all steps need to comply with this Success Criterion to pass. There\n                     needs to be a path through authentication that does not rely on cognitive function\n                     tests.\n                  \nBeing able to recover or change the email and password is an important part of authentication.\n                     If the user is authenticating with alternative information in order to recover their\n                     account, there needs to be a method that is not a cognitive function test.\n                  \nMany organizations are required to use 2-factor authentication that combines independent\n                     sources to confirm a user's identity. These sources can consist of combining authentication\n                     through:\n                  \n\nknowledge (e.g., password, letters in a passphrase or memorized swipe path);\npossession (e.g., a verification code generated or received on a device, or scanning\n                        of a QR code on an external device);\n                     \nbiometrics (e.g., fingerprint scanning, facial recognition or keystroke dynamics).\n\nMost knowledge-based authentication methods rely on a cognitive function test, so\n                     mechanisms to assist users must be available. When authentication relies on performing\n                     an action on a separate device, it should be possible to complete the action without\n                     the need to transcribe information. It may not be possible to know what device-based\n                     authentication methods are available to a user; offering a choice of methods can allow\n                     them to choose the path that most suits them.\n                  \n\n\nAuthentication Approaches\nWeb sites can employ username (or email) and password inputs as an authentication\n                     method if the author enables the user agent (browsers and third-party password managers)\n                     to fill in the fields automatically. Generally, if the login form meets Success Criterion 1.3.5 Input Purpose, and the form controls have an appropriate accessible name in accordance with Success Criterion 4.1.2 Name, Role, Value, the user agent should be able to reliably recognize the fields and automatically\n                     fill them in. However, if the user agent is actively blocked from filling in the fields\n                     (for instance, by a script), then the page would not pass this criterion because it\n                     prevents the mechanism from working.\n                  \n\n\nCopy and paste\nCopy and paste can be relied on to avoid transcription. Users can copy their login\n                     credentials from a local source (such as a standalone third-party password manager)\n                     and paste it into the username and password fields on a login form, or into a web-based\n                     command line interfaces asking for a password. Blocking people from pasting into authentication\n                     fields, or using a different format between the copied text and the input field (for\n                     example, \"Enter the 3rd, 4th, and 6th character of your password\"), would force the\n                     user to transcribe information and therefore fail this criterion, unless another method\n                     is available.\n                  \n\n\nTwo-factor authentication systems (verification codes)\nBeyond usernames and passwords, some sites may use two-factor authentication, asking\n                     the user to enter a verification code (also called a passcode or one-time password).\n                     A service that requires manual transcription of a verification code is not compliant. As with usernames and passwords,\n                     it must be possible for a user to at least paste the code (such as from a standalone\n                     third-party password manager, text message application, or software-based security\n                     key), or to allow user agents to fill in the fields automatically.\n                  \nThere are scenarios where a verification code must be received or generated on a secondary\n                     device. For example, authenticating in a web browser on a laptop requires a verification\n                     code that is sent as an SMS text message to a mobile phone. However, in most cases,\n                     it is possible for the code to then be sent directly to the primary device, where\n                     it can then be copied and pasted (for example, by copying the code on the secondary\n                     device and emailing it to the primary device, or through the use of a shared cross-device\n                     clipboard where copying content on the secondary device makes it available to paste\n                     on the primary device). Evaluating whether or not the code can be seamlessly transferred\n                     from the secondary device to the primary device is outside of the scope for this Success Criterion. For the purpose of evaluating Web content that relies\n                     on authentication using these types of secondary device systems, it is assumed that\n                     provisions are in place that make the code available in the user's clipboard. Evaluating\n                     this criterion therefore only requires verification that the web content does allow\n                     pasting the clipboard content in the related authentication challenge field.\n                  \nNote that two-factor systems that do not rely on codes — including hardware authentication\n                     devices (such as YubiKey), secondary applications (either on the same primary device,\n                     or on a secondary device) that expect the user to confirm that it is indeed them trying\n                     to log in, and authentication methods provided by the user's operating system (such\n                     as Windows Hello, or Touch ID/Face ID on macOS and iOS) — are not a cognitive function test.\n                  \n\n\nObject Recognition\nIf a CAPTCHA is used as part of an authentication process, there must be a method that does not\n                     include a cognitive function test, unless it meets the exception. If the test is based\n                     on something the website has set such as remembering or transcribing a word, or recognizing\n                     a picture the website provided, that would be a cognitive functional test. Recognizing\n                     objects, or a picture the user has provided is a cognitive function test; however,\n                     it is excepted at the AA level.\n                  \nAn object in this context means the general English definition (\"a material thing\n                     that can be seen and touched\") and can include vehicles and animals. If the test goes\n                     beyond recognition (e.g. multiply the number cats by the number of dogs), that does\n                     not meet the exception.\n                  \nSome forms of object recognition may require an understanding of a particular culture.\n                     For example, taxis can appear differently in different locales. This is an issue for\n                     many people, including people with disabilities, but it is not considered an accessibility-specific\n                     issue.\n                  \nSome CAPTCHAs and cognitive function tests used for authentication may only appear\n                     in certain situations, such as when ad blockers are present, or after repeated incorrect\n                     password entry. This criterion applies when these tests are used regardless of whether\n                     they are used every time or only triggered by specific scenarios.\n                  \nThere are a number of technologies that can be employed to prevent scripted abuse\n                     of the authentication process.\n                  \n\n1.1.1. Rate-limited Access\n1.1.2. Client Geo-Location\n1.1.3. Private Client Authentication\n\nNone of these systems are 100% effective. However, they may reduce the likelihood\n                     of a CAPTCHA being displayed.\n                  \n\n\nPersonal Content\nPersonal content is sometimes used as a second factor for authentication. For example,\n                     as part of account creation the user would upload a picture, and when logging in they\n                     would be asked to select that picture from several possible alternatives. Care must\n                     be taken to provide adequate security in this case, since non-legitimate users might\n                     be able to guess the correct personal content when presented with a choice.\n                  \nText-based personal content does not qualify for this exception as it relies on recall\n                     (rather than recognition), and transcription (rather than selecting an item). Whilst\n                     picture-based personal content will still be a barrier for some people, text based\n                     versions tend to be a much larger barrier.\n                  \n\n\nHiding characters\nAnother factor that can contribute to cognitive load is hiding characters when typing.\n                     Although this criterion requires that users do not have to type in (transcribe) a\n                     password, there are scenarios where that is necessary such as creating a password\n                     to be saved by a password manager. Providing a feature to optionally show a password\n                     can improve the chance of success for some people with cognitive disabilities or those\n                     who have difficulties with accurately typing.\n                  \n\n",
      "examples": "\nExamples\nThe examples of this Success Criterion are the same as the Accessible Authentication (Enhanced) examples.\n               \n\nA web site uses a properly marked up username (or email) and password fields as the\n                     login authentication (meeting Success Criterion 1.3.5 Input Purpose and Success Criterion 4.1.2: Name, Role, Value). The user's browser or integrated third-party password manager extension can identify\n                     the purpose of the inputs and automatically fill in the username and password.\n                  \nA web site does not block paste functionality. The user is able to use a third-party\n                     password manager to store credentials, copy them, and paste them directly into a login\n                     form.\n                  \nA web site uses WebAuthn so the user can authenticate with their device instead of\n                     username/password. The user's device could use any available modality. Common methods\n                     on laptops and phones are facial-scan, fingerprint, and PIN (Personal Identification\n                     Number). The web site is not enforcing any particular use; it is assumed a user will\n                     set up a method that suits them.\n                  \nA web site offers the ability to login with a third-party provider using the OAuth\n                     method.\n                  \nA web site that requires two-factor authentication allows for multiple options for\n                     the 2nd factor, including a USB-based method where the user simply presses a button\n                     to enter a time-based token.\n                  \nA web site that requires two-factor authentication displays a QR code which can be\n                     scanned by an app on a user's device to confirm identity.\n                  \nA web site that requires two-factor authentication sends a notification to a user's\n                     device. The user must use their device's authentication mechanism (for example, user-defined\n                     PIN, fingerprint, facial recognition) to confirm identity.\n                  \n\n"
    }
  },
  "wcag:4.1.2": {
    "understanding": {
      "intent": "\nIntent\nThe intent of this Success Criterion is to ensure that Assistive Technologies (AT)\n                  can gather appropriate information about, activate (or set) and keep up to date on\n                  the status of\n                  user interface controls in the content.\n                  \n               \nWhen standard controls from accessible technologies are used, this process is straightforward.\n                  If the user interface elements are used according to specification the conditions\n                  of this provision will be met. (See examples of Success Criterion 4.1.2 below)\n                  \n               \nIf custom controls are created, however, or interface elements are programmed (in\n                  code or script) to have a different role and/or function than usual, then additional\n                  measures need to be taken to ensure that the controls provide important and appropriate\n                  information\n                  to assistive technologies and allow themselves to be controlled by assistive technologies.\n                  \n               \nWhat roles and states are appropriate to convey to assistive technology will depend\n                  on what the control represents. Specifics about such information are defined by other\n                  specifications, such as WAI-ARIA, or the\n                  relevant platform standards. Another factor to consider is whether there is sufficient\n                  accessibility support \n                  with assistive technologies to convey the information as specified.\n                  \n               \nA particularly important state of a user interface control is whether or not it has\n                  focus. The focus state of a control can be programmatically determined, and notifications\n                  about change of focus are sent to user agents and assistive technology. Other examples\n                  of user interface control state are whether or not a checkbox or radio button has\n                  been selected, or whether or not a collapsible tree or list node is expanded or collapsed.\n                  \n               \n\nNote\n\nSuccess Criterion 4.1.2 requires a programmatically determinable name for all user\n                        interface components. Names may be visible or invisible. Occasionally, the name needs\n                        to be visible, in which case it is identified as a label. Refer to the definition\n                        of\n                        name and label in the glossary for more information.\n                        \n                     \n\n\n",
      "examples": "\nExamples\n\nAccessible APIs\nA Java applet uses the accessibility API defined by the language.\n\n",
      "test-rules": "\nTest Rules\nThe following are Test Rules for certain aspects of this Success Criterion. It is\n                  not necessary to use these particular Test Rules to check for conformance with WCAG,\n                  but they are defined and approved test methods. For information on using Test Rules,\n                  see Understanding Test Rules for WCAG Success Criteria.\n               \n\nARIA attribute is defined in WAI-ARIA\nARIA state or property has valid value\nButton has non-empty accessible name\nElement with aria-hidden has no content in sequential focus navigation\nElement with presentational children has no focusable content\nForm field has non-empty accessible name\nImage button has non-empty accessible name\nLink has non-empty accessible name\nMenuitem has non-empty accessible name\nRole attribute has valid value\nARIA required ID references exist\nARIA state or property is permitted\nElement with role attribute has required states and properties\nIframe element has non-empty accessible name\nIframe elements with identical accessible names have equivalent purpose\n\n"
    }
  }
}
